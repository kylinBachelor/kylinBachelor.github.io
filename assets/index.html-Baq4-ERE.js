import{_ as s,c as n,a,o as i}from"./app-BQhiftj7.js";const l={};function p(t,e){return i(),n("div",null,e[0]||(e[0]=[a(`<p>在 MySQL 数据库的学习和使用中，索引是一个非常重要的概念。如果你经常遇到查询速度慢的问题，那很可能是没有合理使用索引。这篇文章将用通俗易懂的语言，带小白们全面了解 MySQL 索引的相关知识。</p><h2 id="一、什么是-mysql-索引" tabindex="-1"><a class="header-anchor" href="#一、什么是-mysql-索引"><span>一、什么是 MySQL 索引</span></a></h2><p>想象一下，你去图书馆找一本书，如果图书馆的书没有任何分类和编号，你可能要翻遍整个图书馆才能找到想要的书。但如果有了图书索引目录，你就能根据书名、作者等信息快速定位到书的位置。</p><p>MySQL 索引就相当于图书馆的索引目录，它是数据库表中一列或多列的值进行排序后的结构。通过索引，数据库引擎可以快速定位到表中符合条件的记录，而不用扫描整个表，从而大大提高查询效率。</p><h2 id="二、索引的作用" tabindex="-1"><a class="header-anchor" href="#二、索引的作用"><span>二、索引的作用</span></a></h2><ol><li><p><strong>提高查询速度</strong>：这是索引最主要的作用。没有索引时，查询可能需要扫描表中的所有记录，即 “全表扫描”，当表中数据量很大时，查询会非常慢。有了索引后，能直接定位到目标记录，大幅减少查询时间。</p></li><li><p><strong>加速排序和分组操作</strong>：当查询中包含ORDER BY（排序）、GROUP BY（分组）等操作时，索引可以避免数据库进行额外的排序操作，提高这些操作的效率。</p></li></ol><p>但要注意，索引不是越多越好，它也有缺点：</p><ul><li><p>索引会占用额外的存储空间。</p></li><li><p>当对表进行插入、更新、删除操作时，索引也需要进行相应的维护，会降低这些操作的效率。</p></li></ul><h2 id="三、mysql-索引的类型" tabindex="-1"><a class="header-anchor" href="#三、mysql-索引的类型"><span>三、MySQL 索引的类型</span></a></h2><p>MySQL 提供了多种类型的索引，不同类型的索引适用于不同的场景。</p><h3 id="_1-主键索引-primary-key" tabindex="-1"><a class="header-anchor" href="#_1-主键索引-primary-key"><span>1. 主键索引（Primary Key）</span></a></h3><ul><li><p>主键索引是一种特殊的唯一索引，一个表只能有一个主键索引。</p></li><li><p>主键索引要求索引列的值唯一且不为NULL。</p></li><li><p>在建表时指定主键，数据库会自动创建主键索引。</p></li><li><p>示例：</p></li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>CREATE TABLE student (</span></span>
<span class="line"><span>    id INT NOT NULL PRIMARY KEY,  -- 主键，自动创建主键索引</span></span>
<span class="line"><span>    name VARCHAR(50),</span></span>
<span class="line"><span>    age INT</span></span>
<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-唯一索引-unique" tabindex="-1"><a class="header-anchor" href="#_2-唯一索引-unique"><span>2. 唯一索引（Unique）</span></a></h3><ul><li><p>唯一索引要求索引列的值必须唯一，但允许为NULL（多个NULL值不视为重复）。</p></li><li><p>可以通过CREATE UNIQUE INDEX语句创建，也可以在建表时指定。</p></li><li><p>示例：</p></li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>-- 建表时创建唯一索引</span></span>
<span class="line"><span>CREATE TABLE user (</span></span>
<span class="line"><span>    id INT,</span></span>
<span class="line"><span>    username VARCHAR(50) NOT NULL UNIQUE,  -- 对username创建唯一索引</span></span>
<span class="line"><span>    password VARCHAR(50)</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 建表后创建唯一索引</span></span>
<span class="line"><span>CREATE UNIQUE INDEX idx_username ON user(username);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-普通索引-index" tabindex="-1"><a class="header-anchor" href="#_3-普通索引-index"><span>3. 普通索引（Index）</span></a></h3><ul><li><p>普通索引是最基本的索引类型，没有唯一性限制，允许列值重复和为NULL。</p></li><li><p>可以通过CREATE INDEX语句创建，也可以在建表时用INDEX关键字指定。</p></li><li><p>示例：</p></li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>-- 建表时创建普通索引</span></span>
<span class="line"><span>CREATE TABLE product (</span></span>
<span class="line"><span>    id INT,</span></span>
<span class="line"><span>    name VARCHAR(100),</span></span>
<span class="line"><span>    price DECIMAL(10,2),</span></span>
<span class="line"><span>    INDEX idx_name (name)  -- 对name创建普通索引</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 建表后创建普通索引</span></span>
<span class="line"><span>CREATE INDEX idx_price ON product(price);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-复合索引-composite-index" tabindex="-1"><a class="header-anchor" href="#_4-复合索引-composite-index"><span>4. 复合索引（Composite Index）</span></a></h3><ul><li><p>复合索引是由多个列组合而成的索引。</p></li><li><p>遵循 “最左前缀原则”，即查询时只有使用了复合索引中最左边的列，索引才可能被使用。</p></li><li><p>示例：</p></li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>-- 对name和price创建复合索引</span></span>
<span class="line"><span>CREATE INDEX idx_name_price ON product(name, price);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述复合索引中，查询条件包含name时索引可能被使用；如果只使用price作为查询条件，该复合索引不会被使用。</p><h3 id="_5-全文索引-full-text" tabindex="-1"><a class="header-anchor" href="#_5-全文索引-full-text"><span>5. 全文索引（Full - Text）</span></a></h3><ul><li><p>全文索引用于在大量文本数据中快速查找关键字，适用于CHAR、VARCHAR、TEXT等类型的列。</p></li><li><p>MySQL 中的MyISAM和InnoDB（5.6 及以上版本）存储引擎支持全文索引。</p></li><li><p>示例：</p></li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>CREATE TABLE article (</span></span>
<span class="line"><span>    id INT,</span></span>
<span class="line"><span>    title VARCHAR(200),</span></span>
<span class="line"><span>    content TEXT,</span></span>
<span class="line"><span>    FULLTEXT INDEX idx_content (content)  -- 对content创建全文索引</span></span>
<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询时使用MATCH AGAINST语法：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>SELECT * FROM article WHERE MATCH(content) AGAINST(&#39;MySQL 索引&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="四、索引的创建与删除" tabindex="-1"><a class="header-anchor" href="#四、索引的创建与删除"><span>四、索引的创建与删除</span></a></h2><h3 id="创建索引" tabindex="-1"><a class="header-anchor" href="#创建索引"><span>创建索引</span></a></h3><ol><li>在建表时创建：</li></ol><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>CREATE TABLE table_name (</span></span>
<span class="line"><span>    column1 data_type,</span></span>
<span class="line"><span>    column2 data_type,</span></span>
<span class="line"><span>    ...,</span></span>
<span class="line"><span>    INDEX index_name (column1, column2, ...)</span></span>
<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>建表后创建：</li></ol><ul><li><p>普通索引：CREATE INDEX index_name ON table_name(column_name);</p></li><li><p>唯一索引：CREATE UNIQUE INDEX index_name ON table_name(column_name);</p></li><li><p>复合索引：CREATE INDEX index_name ON table_name(column1, column2, ...);</p></li></ul><h3 id="删除索引" tabindex="-1"><a class="header-anchor" href="#删除索引"><span>删除索引</span></a></h3><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>DROP INDEX index_name ON table_name;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="五、使用索引的注意事项" tabindex="-1"><a class="header-anchor" href="#五、使用索引的注意事项"><span>五、使用索引的注意事项</span></a></h2><ol><li><p><strong>不要过度索引</strong>：每个索引都会占用存储空间，并且会降低插入、更新和删除操作的效率。只在经常用于查询条件、排序、分组的列上创建索引。</p></li><li><p><strong>小表不适合建索引</strong>：如果表中数据量很小，全表扫描的速度可能比使用索引更快，这时建索引反而会增加额外的开销。</p></li><li><p><strong>避免在频繁变动的列上建索引</strong>：当列的值经常被修改时，索引也需要频繁维护，会影响性能。</p></li><li><p><strong>索引列不要参与计算</strong>：如果查询条件中索引列参与了计算，索引将无法被使用。例如：SELECT * FROM product WHERE price + 10 &gt; 100;，这里price参与了计算，索引不会生效。</p></li><li><p><strong>避免使用<strong><strong>NULL</strong></strong>判断</strong>：如果索引列可能为NULL，查询时使用IS NULL或IS NOT NULL，索引可能无法有效使用，尽量将索引列设置为NOT NULL。</p></li><li><p><strong>合理使用复合索引</strong>：根据查询需求创建复合索引，并且遵循最左前缀原则。</p></li></ol><h2 id="六、如何查看索引是否被使用" tabindex="-1"><a class="header-anchor" href="#六、如何查看索引是否被使用"><span>六、如何查看索引是否被使用</span></a></h2><p>可以使用EXPLAIN语句来分析查询语句，查看索引是否被使用。</p><p>示例：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM product WHERE name = &#39;手机&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在输出结果中，如果type列的值为ref、range、index等，说明索引可能被使用了；如果type列的值为ALL，说明进行了全表扫描，索引没有被使用。</p><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结"><span>七、总结</span></a></h2><p>MySQL 索引是提高查询效率的重要手段，但在使用时要根据实际业务场景合理创建和使用。我们需要了解不同类型索引的特点和适用场景，避免盲目创建索引。同时，要定期分析查询性能，根据需要调整索引策略，让数据库始终保持良好的性能。</p><p>希望这篇文章能帮助小白们理解 MySQL 索引的相关知识，在实际开发中正确使用索引，提升项目的性能。</p>`,46)]))}const r=s(l,[["render",p],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/article/technology/Mysql%E7%B4%A2%E5%BC%95/","title":"MySQL索引","lang":"zh-CN","frontmatter":{"title":"MySQL索引","aliases":null,"tags":["MySQL","SQL"],"description":"MySQL索引","createTime":"2024/11/30 14:15:41","draft":false,"head":[["meta",{"property":"og:url","content":"https://kylinBachelor.github.io/article/technology/Mysql%E7%B4%A2%E5%BC%95/"}],["meta",{"property":"og:site_name","content":"攻城狮"}],["meta",{"property":"og:title","content":"MySQL索引"}],["meta",{"property":"og:description","content":"MySQL索引"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-17T08:10:46.000Z"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:tag","content":"SQL"}],["meta",{"property":"article:modified_time","content":"2025-07-17T08:10:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL索引\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-17T08:10:46.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":5.5,"words":1649},"git":{"updatedTime":1752739846000},"filePathRelative":"article/technology/Mysql索引/index.md","categoryList":[{"id":"92a2b5","sort":10104,"name":"article"},{"id":"4b8d8b","sort":10105,"name":"technology"},{"id":"73d0a0","sort":10118,"name":"Mysql索引"}],"bulletin":false}');export{r as comp,c as data};
