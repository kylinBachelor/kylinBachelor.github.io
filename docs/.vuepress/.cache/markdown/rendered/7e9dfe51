{"content":"<h1 id=\"nginx负载均衡\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#nginx负载均衡\"><span>Nginx负载均衡</span></a></h1>\n<p>在高并发的情况下，一台服务器的负载承受不住，我们就需要使用服务器集群来解决高并发问题，但是这就出现一个问题，就是客户端的请求如何分配给多个服务器，所以在服务器集群中，需要一个服务器充当一个 <strong>【负载均衡器-Ningx】</strong> 用户的所有的请求都会由负载均衡器进行接收，调度者根据每台服务器的负载情况通过<strong>负载均衡算法</strong>将请求分配给某一台后端服务器进行处理。</p>\n<p>负载均衡算法：</p>\n<ol>\n<li>轮询（Round Robin）</li>\n<li>IP哈希(IP Hash)</li>\n<li>加权轮询(Weighted Round Robin)</li>\n<li>最少连接（Least Connection）</li>\n</ol>\n<h2 id=\"_1-轮询\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-轮询\"><span>1. 轮询</span></a></h2>\n<p>这是<strong>默认的负载均衡算法</strong>，Nginx按照请求的顺序依次将请求分配给后端的服务器。每个服务器按照其权重来处理请求，然后按顺序循环分配。这种算法简单且平均地将负载分配给后端服务器，适用于后端服务器配置相同、处理能力相当的场景。</p>\n<div class=\"language-conf line-numbers-mode\" data-ext=\"conf\" data-title=\"conf\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>http {</span></span>\n<span class=\"line\"><span>    upstream backend {</span></span>\n<span class=\"line\"><span>        server 192.168.1.101:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.102:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.103:8080;</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span> </span></span>\n<span class=\"line\"><span>    server {</span></span>\n<span class=\"line\"><span>        listen 80;</span></span>\n<span class=\"line\"><span>        </span></span>\n<span class=\"line\"><span>        location / {</span></span>\n<span class=\"line\"><span>            proxy_pass http://backend;</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_2-ip哈希\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-ip哈希\"><span>2. IP哈希</span></a></h2>\n<p>Nginx根据客户端的IP地址进行哈希运算，并根据计算结果将请求分配给固定的后端服务器。这种算法保证了相同的客户端IP每次请求都会被分配到相同的服务器，适用于需要保持会话状态的应用。</p>\n<div class=\"language-conf line-numbers-mode\" data-ext=\"conf\" data-title=\"conf\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>http {</span></span>\n<span class=\"line\"><span>    upstream backend {</span></span>\n<span class=\"line\"><span>        ip_hash;</span></span>\n<span class=\"line\"><span>        server 192.168.1.101:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.102:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.103:8080;</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span> </span></span>\n<span class=\"line\"><span>    server {</span></span>\n<span class=\"line\"><span>        listen 80;</span></span>\n<span class=\"line\"><span>        </span></span>\n<span class=\"line\"><span>        location / {</span></span>\n<span class=\"line\"><span>            proxy_pass http://backend;</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_3-加权轮询-weighted-round-robin\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-加权轮询-weighted-round-robin\"><span>3. 加权轮询（Weighted Round Robin）</span></a></h2>\n<p>Nginx根据每个后端服务器的配置权重将请求分配给服务器。权重越高的服务器，处理的请求就越多。这种方式适用于后端服务器之间配置不同、处理能力不同的情况下。</p>\n<div class=\"language-conf line-numbers-mode\" data-ext=\"conf\" data-title=\"conf\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>http {</span></span>\n<span class=\"line\"><span>    upstream backend {</span></span>\n<span class=\"line\"><span>        server 192.168.1.101:8080 weight=3;</span></span>\n<span class=\"line\"><span>        server 192.168.1.102:8080 weight=2;</span></span>\n<span class=\"line\"><span>        server 192.168.1.103:8080 weight=1;</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span> </span></span>\n<span class=\"line\"><span>    server {</span></span>\n<span class=\"line\"><span>        listen 80;</span></span>\n<span class=\"line\"><span>        </span></span>\n<span class=\"line\"><span>        location / {</span></span>\n<span class=\"line\"><span>            proxy_pass http://backend;</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_4-最少连接-least-connection\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-最少连接-least-connection\"><span>4. 最少连接（Least Connection）</span></a></h2>\n<p>Nginx会统计每个后端服务器当前的活动连接数，并将请求分配给活动连接数最少的服务器，以实现负载均衡。这种算法适用于后端服务器配置和处理能力不同、连接持续时间不均衡的场景。</p>\n<div class=\"language-conf line-numbers-mode\" data-ext=\"conf\" data-title=\"conf\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>http {</span></span>\n<span class=\"line\"><span>    upstream backend {</span></span>\n<span class=\"line\"><span>        least_conn;</span></span>\n<span class=\"line\"><span>        server 192.168.1.101:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.102:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.103:8080;</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span> </span></span>\n<span class=\"line\"><span>    server {</span></span>\n<span class=\"line\"><span>        listen 80;</span></span>\n<span class=\"line\"><span>        </span></span>\n<span class=\"line\"><span>        location / {</span></span>\n<span class=\"line\"><span>            proxy_pass http://backend;</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","env":{"base":"/","filePath":"C:/Users/kylinBachelor/Desktop/my-project/docs/notes/Nginx/负载均衡/index.md","filePathRelative":"notes/Nginx/负载均衡/index.md","frontmatter":{},"sfcBlocks":{"template":{"type":"template","content":"<template><h1 id=\"nginx负载均衡\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#nginx负载均衡\"><span>Nginx负载均衡</span></a></h1>\n<p>在高并发的情况下，一台服务器的负载承受不住，我们就需要使用服务器集群来解决高并发问题，但是这就出现一个问题，就是客户端的请求如何分配给多个服务器，所以在服务器集群中，需要一个服务器充当一个 <strong>【负载均衡器-Ningx】</strong> 用户的所有的请求都会由负载均衡器进行接收，调度者根据每台服务器的负载情况通过<strong>负载均衡算法</strong>将请求分配给某一台后端服务器进行处理。</p>\n<p>负载均衡算法：</p>\n<ol>\n<li>轮询（Round Robin）</li>\n<li>IP哈希(IP Hash)</li>\n<li>加权轮询(Weighted Round Robin)</li>\n<li>最少连接（Least Connection）</li>\n</ol>\n<h2 id=\"_1-轮询\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-轮询\"><span>1. 轮询</span></a></h2>\n<p>这是<strong>默认的负载均衡算法</strong>，Nginx按照请求的顺序依次将请求分配给后端的服务器。每个服务器按照其权重来处理请求，然后按顺序循环分配。这种算法简单且平均地将负载分配给后端服务器，适用于后端服务器配置相同、处理能力相当的场景。</p>\n<div class=\"language-conf line-numbers-mode\" data-ext=\"conf\" data-title=\"conf\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>http {</span></span>\n<span class=\"line\"><span>    upstream backend {</span></span>\n<span class=\"line\"><span>        server 192.168.1.101:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.102:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.103:8080;</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span> </span></span>\n<span class=\"line\"><span>    server {</span></span>\n<span class=\"line\"><span>        listen 80;</span></span>\n<span class=\"line\"><span>        </span></span>\n<span class=\"line\"><span>        location / {</span></span>\n<span class=\"line\"><span>            proxy_pass http://backend;</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_2-ip哈希\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-ip哈希\"><span>2. IP哈希</span></a></h2>\n<p>Nginx根据客户端的IP地址进行哈希运算，并根据计算结果将请求分配给固定的后端服务器。这种算法保证了相同的客户端IP每次请求都会被分配到相同的服务器，适用于需要保持会话状态的应用。</p>\n<div class=\"language-conf line-numbers-mode\" data-ext=\"conf\" data-title=\"conf\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>http {</span></span>\n<span class=\"line\"><span>    upstream backend {</span></span>\n<span class=\"line\"><span>        ip_hash;</span></span>\n<span class=\"line\"><span>        server 192.168.1.101:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.102:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.103:8080;</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span> </span></span>\n<span class=\"line\"><span>    server {</span></span>\n<span class=\"line\"><span>        listen 80;</span></span>\n<span class=\"line\"><span>        </span></span>\n<span class=\"line\"><span>        location / {</span></span>\n<span class=\"line\"><span>            proxy_pass http://backend;</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_3-加权轮询-weighted-round-robin\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-加权轮询-weighted-round-robin\"><span>3. 加权轮询（Weighted Round Robin）</span></a></h2>\n<p>Nginx根据每个后端服务器的配置权重将请求分配给服务器。权重越高的服务器，处理的请求就越多。这种方式适用于后端服务器之间配置不同、处理能力不同的情况下。</p>\n<div class=\"language-conf line-numbers-mode\" data-ext=\"conf\" data-title=\"conf\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>http {</span></span>\n<span class=\"line\"><span>    upstream backend {</span></span>\n<span class=\"line\"><span>        server 192.168.1.101:8080 weight=3;</span></span>\n<span class=\"line\"><span>        server 192.168.1.102:8080 weight=2;</span></span>\n<span class=\"line\"><span>        server 192.168.1.103:8080 weight=1;</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span> </span></span>\n<span class=\"line\"><span>    server {</span></span>\n<span class=\"line\"><span>        listen 80;</span></span>\n<span class=\"line\"><span>        </span></span>\n<span class=\"line\"><span>        location / {</span></span>\n<span class=\"line\"><span>            proxy_pass http://backend;</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_4-最少连接-least-connection\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-最少连接-least-connection\"><span>4. 最少连接（Least Connection）</span></a></h2>\n<p>Nginx会统计每个后端服务器当前的活动连接数，并将请求分配给活动连接数最少的服务器，以实现负载均衡。这种算法适用于后端服务器配置和处理能力不同、连接持续时间不均衡的场景。</p>\n<div class=\"language-conf line-numbers-mode\" data-ext=\"conf\" data-title=\"conf\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>http {</span></span>\n<span class=\"line\"><span>    upstream backend {</span></span>\n<span class=\"line\"><span>        least_conn;</span></span>\n<span class=\"line\"><span>        server 192.168.1.101:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.102:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.103:8080;</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span> </span></span>\n<span class=\"line\"><span>    server {</span></span>\n<span class=\"line\"><span>        listen 80;</span></span>\n<span class=\"line\"><span>        </span></span>\n<span class=\"line\"><span>        location / {</span></span>\n<span class=\"line\"><span>            proxy_pass http://backend;</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></template>","contentStripped":"<h1 id=\"nginx负载均衡\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#nginx负载均衡\"><span>Nginx负载均衡</span></a></h1>\n<p>在高并发的情况下，一台服务器的负载承受不住，我们就需要使用服务器集群来解决高并发问题，但是这就出现一个问题，就是客户端的请求如何分配给多个服务器，所以在服务器集群中，需要一个服务器充当一个 <strong>【负载均衡器-Ningx】</strong> 用户的所有的请求都会由负载均衡器进行接收，调度者根据每台服务器的负载情况通过<strong>负载均衡算法</strong>将请求分配给某一台后端服务器进行处理。</p>\n<p>负载均衡算法：</p>\n<ol>\n<li>轮询（Round Robin）</li>\n<li>IP哈希(IP Hash)</li>\n<li>加权轮询(Weighted Round Robin)</li>\n<li>最少连接（Least Connection）</li>\n</ol>\n<h2 id=\"_1-轮询\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-轮询\"><span>1. 轮询</span></a></h2>\n<p>这是<strong>默认的负载均衡算法</strong>，Nginx按照请求的顺序依次将请求分配给后端的服务器。每个服务器按照其权重来处理请求，然后按顺序循环分配。这种算法简单且平均地将负载分配给后端服务器，适用于后端服务器配置相同、处理能力相当的场景。</p>\n<div class=\"language-conf line-numbers-mode\" data-ext=\"conf\" data-title=\"conf\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>http {</span></span>\n<span class=\"line\"><span>    upstream backend {</span></span>\n<span class=\"line\"><span>        server 192.168.1.101:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.102:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.103:8080;</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span> </span></span>\n<span class=\"line\"><span>    server {</span></span>\n<span class=\"line\"><span>        listen 80;</span></span>\n<span class=\"line\"><span>        </span></span>\n<span class=\"line\"><span>        location / {</span></span>\n<span class=\"line\"><span>            proxy_pass http://backend;</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_2-ip哈希\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-ip哈希\"><span>2. IP哈希</span></a></h2>\n<p>Nginx根据客户端的IP地址进行哈希运算，并根据计算结果将请求分配给固定的后端服务器。这种算法保证了相同的客户端IP每次请求都会被分配到相同的服务器，适用于需要保持会话状态的应用。</p>\n<div class=\"language-conf line-numbers-mode\" data-ext=\"conf\" data-title=\"conf\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>http {</span></span>\n<span class=\"line\"><span>    upstream backend {</span></span>\n<span class=\"line\"><span>        ip_hash;</span></span>\n<span class=\"line\"><span>        server 192.168.1.101:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.102:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.103:8080;</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span> </span></span>\n<span class=\"line\"><span>    server {</span></span>\n<span class=\"line\"><span>        listen 80;</span></span>\n<span class=\"line\"><span>        </span></span>\n<span class=\"line\"><span>        location / {</span></span>\n<span class=\"line\"><span>            proxy_pass http://backend;</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_3-加权轮询-weighted-round-robin\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-加权轮询-weighted-round-robin\"><span>3. 加权轮询（Weighted Round Robin）</span></a></h2>\n<p>Nginx根据每个后端服务器的配置权重将请求分配给服务器。权重越高的服务器，处理的请求就越多。这种方式适用于后端服务器之间配置不同、处理能力不同的情况下。</p>\n<div class=\"language-conf line-numbers-mode\" data-ext=\"conf\" data-title=\"conf\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>http {</span></span>\n<span class=\"line\"><span>    upstream backend {</span></span>\n<span class=\"line\"><span>        server 192.168.1.101:8080 weight=3;</span></span>\n<span class=\"line\"><span>        server 192.168.1.102:8080 weight=2;</span></span>\n<span class=\"line\"><span>        server 192.168.1.103:8080 weight=1;</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span> </span></span>\n<span class=\"line\"><span>    server {</span></span>\n<span class=\"line\"><span>        listen 80;</span></span>\n<span class=\"line\"><span>        </span></span>\n<span class=\"line\"><span>        location / {</span></span>\n<span class=\"line\"><span>            proxy_pass http://backend;</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_4-最少连接-least-connection\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-最少连接-least-connection\"><span>4. 最少连接（Least Connection）</span></a></h2>\n<p>Nginx会统计每个后端服务器当前的活动连接数，并将请求分配给活动连接数最少的服务器，以实现负载均衡。这种算法适用于后端服务器配置和处理能力不同、连接持续时间不均衡的场景。</p>\n<div class=\"language-conf line-numbers-mode\" data-ext=\"conf\" data-title=\"conf\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>http {</span></span>\n<span class=\"line\"><span>    upstream backend {</span></span>\n<span class=\"line\"><span>        least_conn;</span></span>\n<span class=\"line\"><span>        server 192.168.1.101:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.102:8080;</span></span>\n<span class=\"line\"><span>        server 192.168.1.103:8080;</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span> </span></span>\n<span class=\"line\"><span>    server {</span></span>\n<span class=\"line\"><span>        listen 80;</span></span>\n<span class=\"line\"><span>        </span></span>\n<span class=\"line\"><span>        location / {</span></span>\n<span class=\"line\"><span>            proxy_pass http://backend;</span></span>\n<span class=\"line\"><span>        }</span></span>\n<span class=\"line\"><span>    }</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n# Nginx负载均衡\r\n\r\n在高并发的情况下，一台服务器的负载承受不住，我们就需要使用服务器集群来解决高并发问题，但是这就出现一个问题，就是客户端的请求如何分配给多个服务器，所以在服务器集群中，需要一个服务器充当一个 **【负载均衡器-Ningx】** 用户的所有的请求都会由负载均衡器进行接收，调度者根据每台服务器的负载情况通过**负载均衡算法**将请求分配给某一台后端服务器进行处理。\r\n\r\n负载均衡算法：\r\n\r\n1. 轮询（Round Robin）\r\n2. IP哈希(IP Hash)\r\n3. 加权轮询(Weighted Round Robin)\r\n4. 最少连接（Least Connection）\r\n\r\n\r\n\r\n## 1. 轮询\r\n\r\n这是**默认的负载均衡算法**，Nginx按照请求的顺序依次将请求分配给后端的服务器。每个服务器按照其权重来处理请求，然后按顺序循环分配。这种算法简单且平均地将负载分配给后端服务器，适用于后端服务器配置相同、处理能力相当的场景。\r\n\r\n```conf\r\nhttp {\r\n    upstream backend {\r\n        server 192.168.1.101:8080;\r\n        server 192.168.1.102:8080;\r\n        server 192.168.1.103:8080;\r\n    }\r\n \r\n    server {\r\n        listen 80;\r\n        \r\n        location / {\r\n            proxy_pass http://backend;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 2. IP哈希\r\n\r\nNginx根据客户端的IP地址进行哈希运算，并根据计算结果将请求分配给固定的后端服务器。这种算法保证了相同的客户端IP每次请求都会被分配到相同的服务器，适用于需要保持会话状态的应用。\r\n\r\n```conf\r\nhttp {\r\n    upstream backend {\r\n        ip_hash;\r\n        server 192.168.1.101:8080;\r\n        server 192.168.1.102:8080;\r\n        server 192.168.1.103:8080;\r\n    }\r\n \r\n    server {\r\n        listen 80;\r\n        \r\n        location / {\r\n            proxy_pass http://backend;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 3. 加权轮询（Weighted Round Robin）\r\n\r\nNginx根据每个后端服务器的配置权重将请求分配给服务器。权重越高的服务器，处理的请求就越多。这种方式适用于后端服务器之间配置不同、处理能力不同的情况下。\r\n\r\n```conf\r\nhttp {\r\n    upstream backend {\r\n        server 192.168.1.101:8080 weight=3;\r\n        server 192.168.1.102:8080 weight=2;\r\n        server 192.168.1.103:8080 weight=1;\r\n    }\r\n \r\n    server {\r\n        listen 80;\r\n        \r\n        location / {\r\n            proxy_pass http://backend;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## 4. 最少连接（Least Connection）\r\n\r\nNginx会统计每个后端服务器当前的活动连接数，并将请求分配给活动连接数最少的服务器，以实现负载均衡。这种算法适用于后端服务器配置和处理能力不同、连接持续时间不均衡的场景。\r\n\r\n```conf\r\nhttp {\r\n    upstream backend {\r\n        least_conn;\r\n        server 192.168.1.101:8080;\r\n        server 192.168.1.102:8080;\r\n        server 192.168.1.103:8080;\r\n    }\r\n \r\n    server {\r\n        listen 80;\r\n        \r\n        location / {\r\n            proxy_pass http://backend;\r\n        }\r\n    }\r\n}\r\n```","excerpt":"","includedFiles":[],"tasklists":0,"title":"Nginx负载均衡","headers":[{"level":2,"title":"1. 轮询","slug":"_1-轮询","link":"#_1-轮询","children":[]},{"level":2,"title":"2. IP哈希","slug":"_2-ip哈希","link":"#_2-ip哈希","children":[]},{"level":2,"title":"3. 加权轮询（Weighted Round Robin）","slug":"_3-加权轮询-weighted-round-robin","link":"#_3-加权轮询-weighted-round-robin","children":[]},{"level":2,"title":"4. 最少连接（Least Connection）","slug":"_4-最少连接-least-connection","link":"#_4-最少连接-least-connection","children":[]}]}}
