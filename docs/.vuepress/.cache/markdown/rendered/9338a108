{"content":"<h2 id=\"注解定义\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#注解定义\"><span>注解定义</span></a></h2>\n<p>使用<code v-pre>@interface</code>语法来定义注解（<code v-pre>Annotation</code>），格式如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> @</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">interface</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> Report</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    String </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">level</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">info</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    String </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注解的参数类似无参数方法，可以用<code v-pre>default</code>设定一个默认值（强烈推荐）。最常用的参数应当命名为<code v-pre>value</code>。</p>\n<h2 id=\"元注解\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#元注解\"><span>元注解</span></a></h2>\n<p>有一些注解可以修饰其他注解，这些注解就称为元注解（meta annotation）。Java标准库已经定义了一些元注解，我们只需要使用元注解，通常不需要自己去编写元注解。</p>\n<h4 id=\"target\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#target\"><span>@Target</span></a></h4>\n<p>最常用的元注解是<code v-pre>@Target</code>。使用<code v-pre>@Target</code>可以定义<code v-pre>Annotation</code>能够被应用于源码的哪些位置：</p>\n<ul>\n<li>类或接口：<code v-pre>ElementType.TYPE</code>；</li>\n<li>字段：<code v-pre>ElementType.FIELD</code>；</li>\n<li>方法：<code v-pre>ElementType.METHOD</code>；</li>\n<li>构造方法：<code v-pre>ElementType.CONSTRUCTOR</code>；</li>\n<li>方法参数：<code v-pre>ElementType.PARAMETER</code>。</li>\n</ul>\n<p>例如，定义注解<code v-pre>@Report</code>可用在方法上，我们必须添加一个<code v-pre>@Target(ElementType.METHOD)</code>：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">Target</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">ElementType</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">METHOD</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> @</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">interface</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> Report</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    String </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">level</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">info</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    String </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4 id=\"retention\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#retention\"><span>@Retention</span></a></h4>\n<p>另一个重要的元注解<code v-pre>@Retention</code>定义了<code v-pre>Annotation</code>的生命周期：</p>\n<ul>\n<li>仅编译期：<code v-pre>RetentionPolicy.SOURCE</code>；</li>\n<li>仅class文件：<code v-pre>RetentionPolicy.CLASS</code>；</li>\n<li>运行期：<code v-pre>RetentionPolicy.RUNTIME</code>。</li>\n</ul>\n<p>如果<code v-pre>@Retention</code>不存在，则该<code v-pre>Annotation</code>默认为<code v-pre>CLASS</code>。因为通常我们自定义的<code v-pre>Annotation</code>都是<code v-pre>RUNTIME</code>，所以，务必要加上<code v-pre>@Retention(RetentionPolicy.RUNTIME)</code>这个元注解：</p>\n<h4 id=\"repeatable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#repeatable\"><span>@Repeatable</span></a></h4>\n<p>使用<code v-pre>@Repeatable</code>这个元注解可以定义<code v-pre>Annotation</code>是否可重复。</p>\n<h4 id=\"inherited\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#inherited\"><span>@Inherited</span></a></h4>\n<p>使用<code v-pre>@Inherited</code>定义子类是否可继承父类定义的<code v-pre>Annotation</code>。<code v-pre>@Inherited</code>仅针对<code v-pre>@Target(ElementType.TYPE)</code>类型的<code v-pre>annotation</code>有效，并且仅针对<code v-pre>class</code>的继承，对<code v-pre>interface</code>的继承无效：</p>\n","env":{"base":"/","filePath":"C:/Users/kylinBachelor/Desktop/kylinBachelor.github.io/docs/notes/Java/Java注解/index.md","filePathRelative":"notes/Java/Java注解/index.md","frontmatter":{"title":"Java注解","aliases":[],"tags":["Java"],"createTime":"2024/11/30 14:15:41","time":621},"sfcBlocks":{"template":{"type":"template","content":"<template><h2 id=\"注解定义\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#注解定义\"><span>注解定义</span></a></h2>\n<p>使用<code v-pre>@interface</code>语法来定义注解（<code v-pre>Annotation</code>），格式如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> @</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">interface</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> Report</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    String </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">level</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">info</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    String </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注解的参数类似无参数方法，可以用<code v-pre>default</code>设定一个默认值（强烈推荐）。最常用的参数应当命名为<code v-pre>value</code>。</p>\n<h2 id=\"元注解\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#元注解\"><span>元注解</span></a></h2>\n<p>有一些注解可以修饰其他注解，这些注解就称为元注解（meta annotation）。Java标准库已经定义了一些元注解，我们只需要使用元注解，通常不需要自己去编写元注解。</p>\n<h4 id=\"target\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#target\"><span>@Target</span></a></h4>\n<p>最常用的元注解是<code v-pre>@Target</code>。使用<code v-pre>@Target</code>可以定义<code v-pre>Annotation</code>能够被应用于源码的哪些位置：</p>\n<ul>\n<li>类或接口：<code v-pre>ElementType.TYPE</code>；</li>\n<li>字段：<code v-pre>ElementType.FIELD</code>；</li>\n<li>方法：<code v-pre>ElementType.METHOD</code>；</li>\n<li>构造方法：<code v-pre>ElementType.CONSTRUCTOR</code>；</li>\n<li>方法参数：<code v-pre>ElementType.PARAMETER</code>。</li>\n</ul>\n<p>例如，定义注解<code v-pre>@Report</code>可用在方法上，我们必须添加一个<code v-pre>@Target(ElementType.METHOD)</code>：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">Target</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">ElementType</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">METHOD</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> @</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">interface</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> Report</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    String </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">level</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">info</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    String </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4 id=\"retention\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#retention\"><span>@Retention</span></a></h4>\n<p>另一个重要的元注解<code v-pre>@Retention</code>定义了<code v-pre>Annotation</code>的生命周期：</p>\n<ul>\n<li>仅编译期：<code v-pre>RetentionPolicy.SOURCE</code>；</li>\n<li>仅class文件：<code v-pre>RetentionPolicy.CLASS</code>；</li>\n<li>运行期：<code v-pre>RetentionPolicy.RUNTIME</code>。</li>\n</ul>\n<p>如果<code v-pre>@Retention</code>不存在，则该<code v-pre>Annotation</code>默认为<code v-pre>CLASS</code>。因为通常我们自定义的<code v-pre>Annotation</code>都是<code v-pre>RUNTIME</code>，所以，务必要加上<code v-pre>@Retention(RetentionPolicy.RUNTIME)</code>这个元注解：</p>\n<h4 id=\"repeatable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#repeatable\"><span>@Repeatable</span></a></h4>\n<p>使用<code v-pre>@Repeatable</code>这个元注解可以定义<code v-pre>Annotation</code>是否可重复。</p>\n<h4 id=\"inherited\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#inherited\"><span>@Inherited</span></a></h4>\n<p>使用<code v-pre>@Inherited</code>定义子类是否可继承父类定义的<code v-pre>Annotation</code>。<code v-pre>@Inherited</code>仅针对<code v-pre>@Target(ElementType.TYPE)</code>类型的<code v-pre>annotation</code>有效，并且仅针对<code v-pre>class</code>的继承，对<code v-pre>interface</code>的继承无效：</p>\n</template>","contentStripped":"<h2 id=\"注解定义\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#注解定义\"><span>注解定义</span></a></h2>\n<p>使用<code v-pre>@interface</code>语法来定义注解（<code v-pre>Annotation</code>），格式如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> @</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">interface</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> Report</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    String </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">level</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">info</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    String </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>注解的参数类似无参数方法，可以用<code v-pre>default</code>设定一个默认值（强烈推荐）。最常用的参数应当命名为<code v-pre>value</code>。</p>\n<h2 id=\"元注解\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#元注解\"><span>元注解</span></a></h2>\n<p>有一些注解可以修饰其他注解，这些注解就称为元注解（meta annotation）。Java标准库已经定义了一些元注解，我们只需要使用元注解，通常不需要自己去编写元注解。</p>\n<h4 id=\"target\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#target\"><span>@Target</span></a></h4>\n<p>最常用的元注解是<code v-pre>@Target</code>。使用<code v-pre>@Target</code>可以定义<code v-pre>Annotation</code>能够被应用于源码的哪些位置：</p>\n<ul>\n<li>类或接口：<code v-pre>ElementType.TYPE</code>；</li>\n<li>字段：<code v-pre>ElementType.FIELD</code>；</li>\n<li>方法：<code v-pre>ElementType.METHOD</code>；</li>\n<li>构造方法：<code v-pre>ElementType.CONSTRUCTOR</code>；</li>\n<li>方法参数：<code v-pre>ElementType.PARAMETER</code>。</li>\n</ul>\n<p>例如，定义注解<code v-pre>@Report</code>可用在方法上，我们必须添加一个<code v-pre>@Target(ElementType.METHOD)</code>：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">Target</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">ElementType</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">METHOD</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> @</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">interface</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> Report</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    int</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> type</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\"> 0</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    String </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">level</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">info</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    String </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">value</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> default</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h4 id=\"retention\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#retention\"><span>@Retention</span></a></h4>\n<p>另一个重要的元注解<code v-pre>@Retention</code>定义了<code v-pre>Annotation</code>的生命周期：</p>\n<ul>\n<li>仅编译期：<code v-pre>RetentionPolicy.SOURCE</code>；</li>\n<li>仅class文件：<code v-pre>RetentionPolicy.CLASS</code>；</li>\n<li>运行期：<code v-pre>RetentionPolicy.RUNTIME</code>。</li>\n</ul>\n<p>如果<code v-pre>@Retention</code>不存在，则该<code v-pre>Annotation</code>默认为<code v-pre>CLASS</code>。因为通常我们自定义的<code v-pre>Annotation</code>都是<code v-pre>RUNTIME</code>，所以，务必要加上<code v-pre>@Retention(RetentionPolicy.RUNTIME)</code>这个元注解：</p>\n<h4 id=\"repeatable\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#repeatable\"><span>@Repeatable</span></a></h4>\n<p>使用<code v-pre>@Repeatable</code>这个元注解可以定义<code v-pre>Annotation</code>是否可重复。</p>\n<h4 id=\"inherited\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#inherited\"><span>@Inherited</span></a></h4>\n<p>使用<code v-pre>@Inherited</code>定义子类是否可继承父类定义的<code v-pre>Annotation</code>。<code v-pre>@Inherited</code>仅针对<code v-pre>@Target(ElementType.TYPE)</code>类型的<code v-pre>annotation</code>有效，并且仅针对<code v-pre>class</code>的继承，对<code v-pre>interface</code>的继承无效：</p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"## 注解定义\r\n\r\n使用`@interface`语法来定义注解（`Annotation`），格式如下：\r\n\r\n```java\r\npublic @interface Report {\r\n    int type() default 0;\r\n    String level() default \"info\";\r\n    String value() default \"\";\r\n}\r\n```\r\n\r\n注解的参数类似无参数方法，可以用`default`设定一个默认值（强烈推荐）。最常用的参数应当命名为`value`。\r\n\r\n## 元注解\r\n\r\n有一些注解可以修饰其他注解，这些注解就称为元注解（meta annotation）。Java标准库已经定义了一些元注解，我们只需要使用元注解，通常不需要自己去编写元注解。\r\n\r\n#### @Target\r\n\r\n最常用的元注解是`@Target`。使用`@Target`可以定义`Annotation`能够被应用于源码的哪些位置：\r\n\r\n- 类或接口：`ElementType.TYPE`；\r\n- 字段：`ElementType.FIELD`；\r\n- 方法：`ElementType.METHOD`；\r\n- 构造方法：`ElementType.CONSTRUCTOR`；\r\n- 方法参数：`ElementType.PARAMETER`。\r\n\r\n例如，定义注解`@Report`可用在方法上，我们必须添加一个`@Target(ElementType.METHOD)`：\r\n\r\n```java\r\n@Target(ElementType.METHOD)\r\npublic @interface Report {\r\n    int type() default 0;\r\n    String level() default \"info\";\r\n    String value() default \"\";\r\n}\r\n```\r\n\r\n#### @Retention\r\n\r\n另一个重要的元注解`@Retention`定义了`Annotation`的生命周期：\r\n\r\n- 仅编译期：`RetentionPolicy.SOURCE`；\r\n- 仅class文件：`RetentionPolicy.CLASS`；\r\n- 运行期：`RetentionPolicy.RUNTIME`。\r\n\r\n如果`@Retention`不存在，则该`Annotation`默认为`CLASS`。因为通常我们自定义的`Annotation`都是`RUNTIME`，所以，务必要加上`@Retention(RetentionPolicy.RUNTIME)`这个元注解：\r\n\r\n#### @Repeatable\r\n\r\n使用`@Repeatable`这个元注解可以定义`Annotation`是否可重复。\r\n\r\n#### @Inherited\r\n\r\n使用`@Inherited`定义子类是否可继承父类定义的`Annotation`。`@Inherited`仅针对`@Target(ElementType.TYPE)`类型的`annotation`有效，并且仅针对`class`的继承，对`interface`的继承无效：","excerpt":"","includedFiles":[],"tasklists":0,"title":"","headers":[{"level":2,"title":"注解定义","slug":"注解定义","link":"#注解定义","children":[]},{"level":2,"title":"元注解","slug":"元注解","link":"#元注解","children":[]}]}}
