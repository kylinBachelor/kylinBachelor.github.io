{"content":"<h1 id=\"supplier接口\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#supplier接口\"><span>Supplier接口</span></a></h1>\n<p><code v-pre>java.util.function.Supplier&lt;T&gt;</code> 接口仅包含一个无参的方法<code v-pre>T get()</code>,☞为获取一个泛型参数指定类型的对象数据，对应的Labmda表达式需要<strong>对外提供</strong>一个符合泛型类型的对象数据</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">package</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * Represents a supplier of results.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * &#x3C;p>There is no requirement that a new or distinct result be returned each</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * time the supplier is invoked.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * &#x3C;p>This is a &#x3C;a href=\"package-summary.html\">functional interface&#x3C;/a></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * whose functional method is {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">get()</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of results supplied by this supplier</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@since</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> 1.8</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">FunctionalInterface</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> interface</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Supplier</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Gets a result.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a result</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    T </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"示例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例\"><span>示例</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    java.util.function.Supplier&#x3C;T>接口仅包含一个无参的方法：T get()。用来获取一个泛型参数指定类型的对象数据。</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    Supplier&#x3C;T>接口被称之为生产型接口,指定接口的泛型是什么类型,那么接口中的get方法就会生产什么类型的数据</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    //定义一个方法,方法的参数传递Supplier&#x3C;T>接口,泛型执行String,get方法就会返回一个String</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> String </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getString</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Supplier</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> sup</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> sup</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        // 不要被sup.get()所迷惑，你试试return \"hello world\",也是可以的，不过我们要想拿到生产型接口的返回值，自然而然就是sup.get（）了，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[]</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> args</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //调用getString方法,方法的参数Supplier是一个函数式接口,所以可以传递Lambda表达式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">        String</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> getString</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(()->{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            // 生成一个字符串并返回</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">            return</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">hello world</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //优化Lambda表达式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">        String</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> getString</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(()-></span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">I love china</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1 id=\"consumer-接口\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#consumer-接口\"><span>Consumer 接口</span></a></h1>\n<p><code v-pre>java.util.function.Consumer&lt;T&gt;</code> 接口则正好与Supplier接口相反，它不是生产一个数据，而是<strong>消费</strong>一个数据， 其数据类型由泛型决定。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">package</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * Represents an operation that accepts a single input argument and returns no</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * result. Unlike most other functional interfaces, {@code Consumer} is expected</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * to operate via side-effects.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * &#x3C;p>This is a &#x3C;a href=\"package-summary.html\">functional interface&#x3C;/a></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * whose functional method is {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">accept(Object)</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of the input to the operation</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@since</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> 1.8</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">FunctionalInterface</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> interface</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Consumer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Performs this operation on the given argument.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> t</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the input argument</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> accept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a composed {@code Consumer} that performs, in sequence, this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * operation followed by the {@code after} operation. If performing either</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * operation throws an exception, it is relayed to the caller of the</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * composed operation.  If performing this operation throws an exception,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * the {@code after} operation will not be performed.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the operation to perform after this operation</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a composed {@code Consumer} that performs in sequence this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * operation followed by the {@code after} operation</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@throws</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> NullPointerException</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> if {@code after} is null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Consumer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> andThen</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Consumer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> super</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">requireNonNull</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> accept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">accept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"示例-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例-1\"><span>示例</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Consumer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        定义一个方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        方法的参数传递一个字符串的姓名</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        方法的参数传递Consumer接口,泛型使用String</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        可以使用Consumer接口消费字符串的姓名</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> method</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">String </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Consumer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> con</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        con</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">accept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[]</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> args</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //调用method方法,传递字符串,方法的另一个参数是Consumer接口,是一个函数式接口,所以可以传递Lambda表达式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">        method</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">I love china</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">String s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)->{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            //对传递的字符串进行消费</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            //消费方式:直接输出字符串</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            //System.out.println(name);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            //消费方式:把字符串转换为大写</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">            String</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">toUpperCase</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">            System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1 id=\"predicate接口\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#predicate接口\"><span>Predicate接口</span></a></h1>\n<p>有时候我们需要对某种类型的数据进行判断，从而得到一个boolean值结果。这时可以使用 <code v-pre>java.util.function.Predicate&lt;T&gt;</code> 接口。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">package</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * Represents a predicate (boolean-valued function) of one argument.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * &#x3C;p>This is a &#x3C;a href=\"package-summary.html\">functional interface&#x3C;/a></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * whose functional method is {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">test(Object)</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of the input to the predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@since</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> 1.8</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">FunctionalInterface</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> interface</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Evaluates this predicate on the given argument.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> t</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the input argument</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> {@code true} if the input argument matches the predicate,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * otherwise {@code false}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    boolean</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a composed predicate that represents a short-circuiting logical</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * AND of this predicate and another.  When evaluating the composed</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate, if this predicate is {@code false}, then the {@code other}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate is not evaluated.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * &#x3C;p>Any exceptions thrown during evaluation of either predicate are relayed</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * to the caller; if evaluation of this predicate throws an exception, the</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * {@code other} predicate will not be evaluated.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a predicate that will be logically-ANDed with this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *              predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a composed predicate that represents the short-circuiting logical</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * AND of this predicate and the {@code other} predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@throws</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> NullPointerException</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> if other is null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> and</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> super</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">requireNonNull</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x26;&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a predicate that represents the logical negation of this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a predicate that represents the logical negation of this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> negate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> !</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a composed predicate that represents a short-circuiting logical</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * OR of this predicate and another.  When evaluating the composed</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate, if this predicate is {@code true}, then the {@code other}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate is not evaluated.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * &#x3C;p>Any exceptions thrown during evaluation of either predicate are relayed</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * to the caller; if evaluation of this predicate throws an exception, the</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * {@code other} predicate will not be evaluated.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a predicate that will be logically-ORed with this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *              predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a composed predicate that represents the short-circuiting logical</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * OR of this predicate and the {@code other} predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@throws</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> NullPointerException</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> if other is null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> or</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> super</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">requireNonNull</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ||</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a predicate that tests if two arguments are equal according</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * to {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Objects</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">#</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">equals(Object, Object)</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of arguments to the predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> targetRef</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the object reference with which to compare for equality,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *               which may be {@code null}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a predicate that tests if two arguments are equal according</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * to {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Objects</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">#</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">equals(Object, Object)</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    static</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> isEqual</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Object </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">targetRef</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">null</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ==</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> targetRef</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">                ?</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Objects</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">isNull</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">                :</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> object </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">-></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> targetRef</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">equals</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">object</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"示例-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例-2\"><span>示例</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    java.util.function.Predicate&#x3C;T>接口</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    作用:对某种数据类型的数据进行判断,结果返回一个boolean值</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    Predicate接口中包含一个抽象方法：</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        boolean test(T t):用来对指定数据类型数据进行判断的方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            结果:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">                符合条件,返回true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">                不符合条件,返回false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">*/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        定义一个方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        参数传递一个String类型的字符串</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        传递一个Predicate接口,泛型使用String</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        使用Predicate中的方法test对字符串进行判断,并把判断的结果返回</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> boolean</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> checkString</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">String </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> pre</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  pre</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[]</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> args</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">        String</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">hello</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">        boolean</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> checkString</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">-></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">length</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">5</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1 id=\"function接口\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#function接口\"><span>Function接口</span></a></h1>\n<p><code v-pre>java.util.function.Function&lt;T,R&gt;</code> 接口用来根据一个类型的数据得到另一个类型的数据，前者称为前置条件， 后者称为后置条件</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">package</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * Represents a function that accepts one argument and produces a result.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * &#x3C;p>This is a &#x3C;a href=\"package-summary.html\">functional interface&#x3C;/a></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * whose functional method is {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">apply(Object)</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of the input to the function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;R></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of the result of the function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@since</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> 1.8</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">FunctionalInterface</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> interface</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> R</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Applies this function to the given argument.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> t</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the function argument</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the function result</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    R </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a composed function that first applies the {@code before}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * function to its input, and then applies this function to the result.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * If evaluation of either function throws an exception, it is relayed to</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * the caller of the composed function.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;V></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of input to the {@code before} function, and to the</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *           composed function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> before</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the function to apply before this function is applied</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a composed function that first applies the {@code before}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * function and then applies this function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@throws</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> NullPointerException</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> if before is null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@see</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #andThen(Function)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> R</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> compose</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> super</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> extends</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> before</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">requireNonNull</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">before</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">V v</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">before</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">v</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a composed function that first applies this function to</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * its input, and then applies the {@code after} function to the result.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * If evaluation of either function throws an exception, it is relayed to</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * the caller of the composed function.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;V></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of output of the {@code after} function, and of the</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *           composed function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the function to apply after this function is applied</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a composed function that first applies this function and then</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * applies the {@code after} function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@throws</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> NullPointerException</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> if after is null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@see</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #compose(Function)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> andThen</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> super</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> R</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> extends</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">requireNonNull</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a function that always returns its input argument.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of the input and output objects to the function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a function that always returns its input argument</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    static</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> identity</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> t </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">-></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"示例-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例-3\"><span>示例</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    java.util.function.Function&#x3C;T,R>接口用来根据一个类型的数据得到另一个类型的数据，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        前者称为前置条件，后者称为后置条件。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    Function接口中最主要的抽象方法为：R apply(T t)，根据类型T的参数获取类型R的结果。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        使用的场景例如：将String类型转换为Integer类型。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        定义一个方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        方法的参数传递一个字符串类型的整数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        方法的参数传递一个Function接口,泛型使用&#x3C;String,Integer></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        使用Function接口中的方法apply,把字符串类型的整数,转换为Integer类型的整数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> change</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">String </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">Integer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> fun</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //Integer in = fun.apply(s);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">        int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> in</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> fun</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">//自动拆箱 Integer->int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">in</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[]</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> args</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //定义一个字符串类型的整数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">        String</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">1234</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //调用change方法,传递字符串类型的整数,和Lambda表达式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">        change</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">String str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)->{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            //把字符串类型的整数,转换为Integer类型的整数返回</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">            return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> Integer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">parseInt</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //优化Lambda</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">        change</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">-></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">Integer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">parseInt</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","env":{"base":"/","filePath":"C:/Users/kylinBachelor/Desktop/my-project/docs/notes/Java/常用的函数式接口/index.md","filePathRelative":"notes/Java/常用的函数式接口/index.md","frontmatter":{"title":"常用的函数式接口","aliases":null,"tags":["Java"],"description":"常用的函数式接口","createTime":"2024/11/30 14:15:41","draft":false},"sfcBlocks":{"template":{"type":"template","content":"<template><h1 id=\"supplier接口\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#supplier接口\"><span>Supplier接口</span></a></h1>\n<p><code v-pre>java.util.function.Supplier&lt;T&gt;</code> 接口仅包含一个无参的方法<code v-pre>T get()</code>,☞为获取一个泛型参数指定类型的对象数据，对应的Labmda表达式需要<strong>对外提供</strong>一个符合泛型类型的对象数据</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">package</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * Represents a supplier of results.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * &#x3C;p>There is no requirement that a new or distinct result be returned each</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * time the supplier is invoked.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * &#x3C;p>This is a &#x3C;a href=\"package-summary.html\">functional interface&#x3C;/a></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * whose functional method is {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">get()</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of results supplied by this supplier</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@since</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> 1.8</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">FunctionalInterface</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> interface</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Supplier</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Gets a result.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a result</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    T </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"示例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例\"><span>示例</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    java.util.function.Supplier&#x3C;T>接口仅包含一个无参的方法：T get()。用来获取一个泛型参数指定类型的对象数据。</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    Supplier&#x3C;T>接口被称之为生产型接口,指定接口的泛型是什么类型,那么接口中的get方法就会生产什么类型的数据</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    //定义一个方法,方法的参数传递Supplier&#x3C;T>接口,泛型执行String,get方法就会返回一个String</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> String </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getString</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Supplier</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> sup</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> sup</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        // 不要被sup.get()所迷惑，你试试return \"hello world\",也是可以的，不过我们要想拿到生产型接口的返回值，自然而然就是sup.get（）了，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[]</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> args</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //调用getString方法,方法的参数Supplier是一个函数式接口,所以可以传递Lambda表达式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">        String</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> getString</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(()->{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            // 生成一个字符串并返回</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">            return</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">hello world</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //优化Lambda表达式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">        String</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> getString</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(()-></span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">I love china</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1 id=\"consumer-接口\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#consumer-接口\"><span>Consumer 接口</span></a></h1>\n<p><code v-pre>java.util.function.Consumer&lt;T&gt;</code> 接口则正好与Supplier接口相反，它不是生产一个数据，而是<strong>消费</strong>一个数据， 其数据类型由泛型决定。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">package</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * Represents an operation that accepts a single input argument and returns no</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * result. Unlike most other functional interfaces, {@code Consumer} is expected</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * to operate via side-effects.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * &#x3C;p>This is a &#x3C;a href=\"package-summary.html\">functional interface&#x3C;/a></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * whose functional method is {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">accept(Object)</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of the input to the operation</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@since</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> 1.8</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">FunctionalInterface</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> interface</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Consumer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Performs this operation on the given argument.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> t</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the input argument</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> accept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a composed {@code Consumer} that performs, in sequence, this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * operation followed by the {@code after} operation. If performing either</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * operation throws an exception, it is relayed to the caller of the</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * composed operation.  If performing this operation throws an exception,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * the {@code after} operation will not be performed.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the operation to perform after this operation</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a composed {@code Consumer} that performs in sequence this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * operation followed by the {@code after} operation</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@throws</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> NullPointerException</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> if {@code after} is null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Consumer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> andThen</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Consumer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> super</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">requireNonNull</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> accept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">accept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"示例-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例-1\"><span>示例</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Consumer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        定义一个方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        方法的参数传递一个字符串的姓名</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        方法的参数传递Consumer接口,泛型使用String</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        可以使用Consumer接口消费字符串的姓名</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> method</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">String </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Consumer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> con</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        con</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">accept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[]</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> args</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //调用method方法,传递字符串,方法的另一个参数是Consumer接口,是一个函数式接口,所以可以传递Lambda表达式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">        method</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">I love china</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">String s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)->{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            //对传递的字符串进行消费</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            //消费方式:直接输出字符串</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            //System.out.println(name);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            //消费方式:把字符串转换为大写</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">            String</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">toUpperCase</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">            System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1 id=\"predicate接口\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#predicate接口\"><span>Predicate接口</span></a></h1>\n<p>有时候我们需要对某种类型的数据进行判断，从而得到一个boolean值结果。这时可以使用 <code v-pre>java.util.function.Predicate&lt;T&gt;</code> 接口。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">package</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * Represents a predicate (boolean-valued function) of one argument.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * &#x3C;p>This is a &#x3C;a href=\"package-summary.html\">functional interface&#x3C;/a></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * whose functional method is {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">test(Object)</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of the input to the predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@since</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> 1.8</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">FunctionalInterface</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> interface</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Evaluates this predicate on the given argument.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> t</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the input argument</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> {@code true} if the input argument matches the predicate,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * otherwise {@code false}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    boolean</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a composed predicate that represents a short-circuiting logical</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * AND of this predicate and another.  When evaluating the composed</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate, if this predicate is {@code false}, then the {@code other}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate is not evaluated.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * &#x3C;p>Any exceptions thrown during evaluation of either predicate are relayed</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * to the caller; if evaluation of this predicate throws an exception, the</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * {@code other} predicate will not be evaluated.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a predicate that will be logically-ANDed with this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *              predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a composed predicate that represents the short-circuiting logical</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * AND of this predicate and the {@code other} predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@throws</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> NullPointerException</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> if other is null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> and</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> super</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">requireNonNull</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x26;&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a predicate that represents the logical negation of this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a predicate that represents the logical negation of this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> negate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> !</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a composed predicate that represents a short-circuiting logical</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * OR of this predicate and another.  When evaluating the composed</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate, if this predicate is {@code true}, then the {@code other}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate is not evaluated.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * &#x3C;p>Any exceptions thrown during evaluation of either predicate are relayed</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * to the caller; if evaluation of this predicate throws an exception, the</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * {@code other} predicate will not be evaluated.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a predicate that will be logically-ORed with this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *              predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a composed predicate that represents the short-circuiting logical</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * OR of this predicate and the {@code other} predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@throws</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> NullPointerException</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> if other is null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> or</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> super</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">requireNonNull</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ||</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a predicate that tests if two arguments are equal according</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * to {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Objects</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">#</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">equals(Object, Object)</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of arguments to the predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> targetRef</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the object reference with which to compare for equality,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *               which may be {@code null}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a predicate that tests if two arguments are equal according</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * to {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Objects</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">#</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">equals(Object, Object)</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    static</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> isEqual</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Object </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">targetRef</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">null</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ==</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> targetRef</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">                ?</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Objects</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">isNull</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">                :</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> object </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">-></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> targetRef</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">equals</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">object</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"示例-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例-2\"><span>示例</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    java.util.function.Predicate&#x3C;T>接口</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    作用:对某种数据类型的数据进行判断,结果返回一个boolean值</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    Predicate接口中包含一个抽象方法：</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        boolean test(T t):用来对指定数据类型数据进行判断的方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            结果:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">                符合条件,返回true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">                不符合条件,返回false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">*/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        定义一个方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        参数传递一个String类型的字符串</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        传递一个Predicate接口,泛型使用String</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        使用Predicate中的方法test对字符串进行判断,并把判断的结果返回</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> boolean</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> checkString</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">String </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> pre</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  pre</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[]</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> args</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">        String</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">hello</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">        boolean</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> checkString</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">-></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">length</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">5</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1 id=\"function接口\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#function接口\"><span>Function接口</span></a></h1>\n<p><code v-pre>java.util.function.Function&lt;T,R&gt;</code> 接口用来根据一个类型的数据得到另一个类型的数据，前者称为前置条件， 后者称为后置条件</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">package</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * Represents a function that accepts one argument and produces a result.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * &#x3C;p>This is a &#x3C;a href=\"package-summary.html\">functional interface&#x3C;/a></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * whose functional method is {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">apply(Object)</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of the input to the function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;R></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of the result of the function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@since</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> 1.8</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">FunctionalInterface</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> interface</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> R</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Applies this function to the given argument.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> t</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the function argument</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the function result</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    R </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a composed function that first applies the {@code before}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * function to its input, and then applies this function to the result.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * If evaluation of either function throws an exception, it is relayed to</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * the caller of the composed function.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;V></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of input to the {@code before} function, and to the</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *           composed function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> before</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the function to apply before this function is applied</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a composed function that first applies the {@code before}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * function and then applies this function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@throws</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> NullPointerException</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> if before is null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@see</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #andThen(Function)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> R</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> compose</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> super</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> extends</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> before</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">requireNonNull</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">before</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">V v</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">before</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">v</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a composed function that first applies this function to</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * its input, and then applies the {@code after} function to the result.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * If evaluation of either function throws an exception, it is relayed to</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * the caller of the composed function.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;V></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of output of the {@code after} function, and of the</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *           composed function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the function to apply after this function is applied</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a composed function that first applies this function and then</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * applies the {@code after} function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@throws</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> NullPointerException</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> if after is null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@see</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #compose(Function)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> andThen</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> super</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> R</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> extends</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">requireNonNull</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a function that always returns its input argument.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of the input and output objects to the function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a function that always returns its input argument</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    static</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> identity</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> t </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">-></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"示例-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例-3\"><span>示例</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    java.util.function.Function&#x3C;T,R>接口用来根据一个类型的数据得到另一个类型的数据，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        前者称为前置条件，后者称为后置条件。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    Function接口中最主要的抽象方法为：R apply(T t)，根据类型T的参数获取类型R的结果。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        使用的场景例如：将String类型转换为Integer类型。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        定义一个方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        方法的参数传递一个字符串类型的整数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        方法的参数传递一个Function接口,泛型使用&#x3C;String,Integer></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        使用Function接口中的方法apply,把字符串类型的整数,转换为Integer类型的整数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> change</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">String </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">Integer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> fun</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //Integer in = fun.apply(s);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">        int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> in</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> fun</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">//自动拆箱 Integer->int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">in</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[]</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> args</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //定义一个字符串类型的整数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">        String</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">1234</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //调用change方法,传递字符串类型的整数,和Lambda表达式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">        change</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">String str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)->{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            //把字符串类型的整数,转换为Integer类型的整数返回</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">            return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> Integer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">parseInt</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //优化Lambda</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">        change</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">-></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">Integer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">parseInt</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></template>","contentStripped":"<h1 id=\"supplier接口\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#supplier接口\"><span>Supplier接口</span></a></h1>\n<p><code v-pre>java.util.function.Supplier&lt;T&gt;</code> 接口仅包含一个无参的方法<code v-pre>T get()</code>,☞为获取一个泛型参数指定类型的对象数据，对应的Labmda表达式需要<strong>对外提供</strong>一个符合泛型类型的对象数据</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">package</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * Represents a supplier of results.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * &#x3C;p>There is no requirement that a new or distinct result be returned each</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * time the supplier is invoked.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * &#x3C;p>This is a &#x3C;a href=\"package-summary.html\">functional interface&#x3C;/a></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * whose functional method is {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">get()</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of results supplied by this supplier</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@since</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> 1.8</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">FunctionalInterface</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> interface</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Supplier</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Gets a result.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a result</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    T </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"示例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例\"><span>示例</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    java.util.function.Supplier&#x3C;T>接口仅包含一个无参的方法：T get()。用来获取一个泛型参数指定类型的对象数据。</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    Supplier&#x3C;T>接口被称之为生产型接口,指定接口的泛型是什么类型,那么接口中的get方法就会生产什么类型的数据</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    //定义一个方法,方法的参数传递Supplier&#x3C;T>接口,泛型执行String,get方法就会返回一个String</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> String </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getString</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Supplier</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> sup</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> sup</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">get</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        // 不要被sup.get()所迷惑，你试试return \"hello world\",也是可以的，不过我们要想拿到生产型接口的返回值，自然而然就是sup.get（）了，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[]</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> args</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //调用getString方法,方法的参数Supplier是一个函数式接口,所以可以传递Lambda表达式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">        String</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> getString</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(()->{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            // 生成一个字符串并返回</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">            return</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">hello world</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //优化Lambda表达式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">        String</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> getString</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(()-></span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">I love china</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s2</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1 id=\"consumer-接口\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#consumer-接口\"><span>Consumer 接口</span></a></h1>\n<p><code v-pre>java.util.function.Consumer&lt;T&gt;</code> 接口则正好与Supplier接口相反，它不是生产一个数据，而是<strong>消费</strong>一个数据， 其数据类型由泛型决定。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">package</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * Represents an operation that accepts a single input argument and returns no</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * result. Unlike most other functional interfaces, {@code Consumer} is expected</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * to operate via side-effects.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * &#x3C;p>This is a &#x3C;a href=\"package-summary.html\">functional interface&#x3C;/a></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * whose functional method is {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">accept(Object)</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of the input to the operation</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@since</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> 1.8</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">FunctionalInterface</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> interface</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Consumer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Performs this operation on the given argument.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> t</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the input argument</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> accept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a composed {@code Consumer} that performs, in sequence, this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * operation followed by the {@code after} operation. If performing either</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * operation throws an exception, it is relayed to the caller of the</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * composed operation.  If performing this operation throws an exception,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * the {@code after} operation will not be performed.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the operation to perform after this operation</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a composed {@code Consumer} that performs in sequence this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * operation followed by the {@code after} operation</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@throws</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> NullPointerException</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> if {@code after} is null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Consumer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> andThen</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Consumer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> super</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">requireNonNull</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> accept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">accept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"示例-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例-1\"><span>示例</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Consumer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        定义一个方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        方法的参数传递一个字符串的姓名</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        方法的参数传递Consumer接口,泛型使用String</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        可以使用Consumer接口消费字符串的姓名</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> method</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">String </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Consumer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> con</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        con</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">accept</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">name</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[]</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> args</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //调用method方法,传递字符串,方法的另一个参数是Consumer接口,是一个函数式接口,所以可以传递Lambda表达式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">        method</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">I love china</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">String s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)->{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            //对传递的字符串进行消费</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            //消费方式:直接输出字符串</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            //System.out.println(name);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            //消费方式:把字符串转换为大写</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">            String</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">toUpperCase</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">            System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1 id=\"predicate接口\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#predicate接口\"><span>Predicate接口</span></a></h1>\n<p>有时候我们需要对某种类型的数据进行判断，从而得到一个boolean值结果。这时可以使用 <code v-pre>java.util.function.Predicate&lt;T&gt;</code> 接口。</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">package</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * Represents a predicate (boolean-valued function) of one argument.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * &#x3C;p>This is a &#x3C;a href=\"package-summary.html\">functional interface&#x3C;/a></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * whose functional method is {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">test(Object)</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of the input to the predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@since</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> 1.8</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">FunctionalInterface</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> interface</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Evaluates this predicate on the given argument.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> t</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the input argument</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> {@code true} if the input argument matches the predicate,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * otherwise {@code false}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    boolean</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a composed predicate that represents a short-circuiting logical</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * AND of this predicate and another.  When evaluating the composed</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate, if this predicate is {@code false}, then the {@code other}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate is not evaluated.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * &#x3C;p>Any exceptions thrown during evaluation of either predicate are relayed</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * to the caller; if evaluation of this predicate throws an exception, the</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * {@code other} predicate will not be evaluated.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a predicate that will be logically-ANDed with this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *              predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a composed predicate that represents the short-circuiting logical</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * AND of this predicate and the {@code other} predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@throws</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> NullPointerException</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> if other is null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> and</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> super</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">requireNonNull</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x26;&#x26;</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a predicate that represents the logical negation of this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a predicate that represents the logical negation of this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> negate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> !</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a composed predicate that represents a short-circuiting logical</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * OR of this predicate and another.  When evaluating the composed</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate, if this predicate is {@code true}, then the {@code other}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * predicate is not evaluated.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * &#x3C;p>Any exceptions thrown during evaluation of either predicate are relayed</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * to the caller; if evaluation of this predicate throws an exception, the</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * {@code other} predicate will not be evaluated.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a predicate that will be logically-ORed with this</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *              predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a composed predicate that represents the short-circuiting logical</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * OR of this predicate and the {@code other} predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@throws</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> NullPointerException</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> if other is null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> or</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> super</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">requireNonNull</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ||</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> other</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a predicate that tests if two arguments are equal according</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * to {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Objects</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">#</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">equals(Object, Object)</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of arguments to the predicate</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> targetRef</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the object reference with which to compare for equality,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *               which may be {@code null}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a predicate that tests if two arguments are equal according</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * to {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Objects</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">#</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">equals(Object, Object)</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    static</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> isEqual</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Object </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">targetRef</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">null</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ==</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> targetRef</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">                ?</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Objects</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">::</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">isNull</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">                :</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> object </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">-></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> targetRef</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">equals</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">object</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"示例-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例-2\"><span>示例</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    java.util.function.Predicate&#x3C;T>接口</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    作用:对某种数据类型的数据进行判断,结果返回一个boolean值</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    Predicate接口中包含一个抽象方法：</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        boolean test(T t):用来对指定数据类型数据进行判断的方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            结果:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">                符合条件,返回true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">                不符合条件,返回false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">*/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        定义一个方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        参数传递一个String类型的字符串</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        传递一个Predicate接口,泛型使用String</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        使用Predicate中的方法test对字符串进行判断,并把判断的结果返回</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> boolean</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> checkString</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">String </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Predicate</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> pre</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">  pre</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[]</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> args</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">        String</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">hello</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">        boolean</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> checkString</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">-></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">length</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">></span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">5</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">b</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h1 id=\"function接口\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#function接口\"><span>Function接口</span></a></h1>\n<p><code v-pre>java.util.function.Function&lt;T,R&gt;</code> 接口用来根据一个类型的数据得到另一个类型的数据，前者称为前置条件， 后者称为后置条件</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">package</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * Represents a function that accepts one argument and produces a result.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * &#x3C;p>This is a &#x3C;a href=\"package-summary.html\">functional interface&#x3C;/a></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * whose functional method is {</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@link</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">apply(Object)</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">}.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of the input to the function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;R></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of the result of the function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@since</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> 1.8</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">@</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">FunctionalInterface</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> interface</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> R</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Applies this function to the given argument.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> t</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the function argument</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the function result</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">    R </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a composed function that first applies the {@code before}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * function to its input, and then applies this function to the result.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * If evaluation of either function throws an exception, it is relayed to</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * the caller of the composed function.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;V></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of input to the {@code before} function, and to the</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *           composed function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> before</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the function to apply before this function is applied</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a composed function that first applies the {@code before}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * function and then applies this function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@throws</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> NullPointerException</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> if before is null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@see</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #andThen(Function)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> R</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> compose</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> super</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> extends</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> before</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">requireNonNull</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">before</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">V v</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">before</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">v</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a composed function that first applies this function to</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * its input, and then applies the {@code after} function to the result.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * If evaluation of either function throws an exception, it is relayed to</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * the caller of the composed function.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;V></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of output of the {@code after} function, and of the</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *           composed function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the function to apply after this function is applied</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a composed function that first applies this function and then</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * applies the {@code after} function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@throws</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> NullPointerException</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> if after is null</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@see</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> #compose(Function)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    default</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> andThen</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> super</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> R</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> ?</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> extends</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> V</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        Objects</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">requireNonNull</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">T t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> -></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> after</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /**</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * Returns a function that always returns its input argument.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     *</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@param</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> &#x3C;T></span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> the type of the input and output objects to the function</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     * </span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">@return</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> a function that always returns its input argument</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    static</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> &#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> T</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> identity</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> t </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">-></span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> t</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"示例-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#示例-3\"><span>示例</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">import</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> java</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">util</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">/*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    java.util.function.Function&#x3C;T,R>接口用来根据一个类型的数据得到另一个类型的数据，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        前者称为前置条件，后者称为后置条件。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    Function接口中最主要的抽象方法为：R apply(T t)，根据类型T的参数获取类型R的结果。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        使用的场景例如：将String类型转换为Integer类型。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> test</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    /*</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        定义一个方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        方法的参数传递一个字符串类型的整数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        方法的参数传递一个Function接口,泛型使用&#x3C;String,Integer></span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        使用Function接口中的方法apply,把字符串类型的整数,转换为Integer类型的整数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">     */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> change</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">String </span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Function</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">&#x3C;</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">Integer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> fun</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">){</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //Integer in = fun.apply(s);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">        int</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> in</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> fun</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">apply</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">//自动拆箱 Integer->int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">in</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> main</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">String</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">[]</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> args</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //定义一个字符串类型的整数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">        String</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\"> \"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">1234</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //调用change方法,传递字符串类型的整数,和Lambda表达式</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">        change</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">String str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)->{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">            //把字符串类型的整数,转换为Integer类型的整数返回</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">            return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> Integer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">parseInt</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">        //优化Lambda</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">        change</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">s</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">,</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">-></span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">Integer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">parseInt</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">str</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"# Supplier接口\r\n\r\n`java.util.function.Supplier<T>` 接口仅包含一个无参的方法`T get()`,☞为获取一个泛型参数指定类型的对象数据，对应的Labmda表达式需要**对外提供**一个符合泛型类型的对象数据\r\n\r\n```java\r\npackage java.util.function;\r\n\r\n/**\r\n * Represents a supplier of results.\r\n *\r\n * <p>There is no requirement that a new or distinct result be returned each\r\n * time the supplier is invoked.\r\n *\r\n * <p>This is a <a href=\"package-summary.html\">functional interface</a>\r\n * whose functional method is {@link #get()}.\r\n *\r\n * @param <T> the type of results supplied by this supplier\r\n *\r\n * @since 1.8\r\n */\r\n@FunctionalInterface\r\npublic interface Supplier<T> {\r\n\r\n    /**\r\n     * Gets a result.\r\n     *\r\n     * @return a result\r\n     */\r\n    T get();\r\n}\r\n```\r\n\r\n## 示例\r\n\r\n```java\r\n/*\r\n    java.util.function.Supplier<T>接口仅包含一个无参的方法：T get()。用来获取一个泛型参数指定类型的对象数据。\r\n\r\n    Supplier<T>接口被称之为生产型接口,指定接口的泛型是什么类型,那么接口中的get方法就会生产什么类型的数据\r\n */\r\npublic class test {\r\n    //定义一个方法,方法的参数传递Supplier<T>接口,泛型执行String,get方法就会返回一个String\r\n    public static String getString(Supplier<String> sup){\r\n        return sup.get();\r\n        // 不要被sup.get()所迷惑，你试试return \"hello world\",也是可以的，不过我们要想拿到生产型接口的返回值，自然而然就是sup.get（）了，\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        //调用getString方法,方法的参数Supplier是一个函数式接口,所以可以传递Lambda表达式\r\n        String s = getString(()->{\r\n            // 生成一个字符串并返回\r\n            return \"hello world\";\r\n        });\r\n        System.out.println(s);\r\n\r\n        //优化Lambda表达式\r\n        String s2 = getString(()->\"I love china\");\r\n        System.out.println(s2);\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n# Consumer 接口\r\n\r\n`java.util.function.Consumer<T>` 接口则正好与Supplier接口相反，它不是生产一个数据，而是**消费**一个数据， 其数据类型由泛型决定。\r\n\r\n```java\r\npackage java.util.function;\r\n\r\nimport java.util.Objects;\r\n\r\n/**\r\n * Represents an operation that accepts a single input argument and returns no\r\n * result. Unlike most other functional interfaces, {@code Consumer} is expected\r\n * to operate via side-effects.\r\n *\r\n * <p>This is a <a href=\"package-summary.html\">functional interface</a>\r\n * whose functional method is {@link #accept(Object)}.\r\n *\r\n * @param <T> the type of the input to the operation\r\n *\r\n * @since 1.8\r\n */\r\n@FunctionalInterface\r\npublic interface Consumer<T> {\r\n\r\n    /**\r\n     * Performs this operation on the given argument.\r\n     *\r\n     * @param t the input argument\r\n     */\r\n    void accept(T t);\r\n\r\n    /**\r\n     * Returns a composed {@code Consumer} that performs, in sequence, this\r\n     * operation followed by the {@code after} operation. If performing either\r\n     * operation throws an exception, it is relayed to the caller of the\r\n     * composed operation.  If performing this operation throws an exception,\r\n     * the {@code after} operation will not be performed.\r\n     *\r\n     * @param after the operation to perform after this operation\r\n     * @return a composed {@code Consumer} that performs in sequence this\r\n     * operation followed by the {@code after} operation\r\n     * @throws NullPointerException if {@code after} is null\r\n     */\r\n    default Consumer<T> andThen(Consumer<? super T> after) {\r\n        Objects.requireNonNull(after);\r\n        return (T t) -> { accept(t); after.accept(t); };\r\n    }\r\n}\r\n\r\n```\r\n\r\n## 示例\r\n\r\n```java\r\nimport java.util.function.Consumer;\r\nclass test {\r\n    /*\r\n        定义一个方法\r\n        方法的参数传递一个字符串的姓名\r\n        方法的参数传递Consumer接口,泛型使用String\r\n        可以使用Consumer接口消费字符串的姓名\r\n     */\r\n    public static void method(String name, Consumer<String> con){\r\n        con.accept(name);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        //调用method方法,传递字符串,方法的另一个参数是Consumer接口,是一个函数式接口,所以可以传递Lambda表达式\r\n        method(\"I love china\",(String s)->{\r\n            //对传递的字符串进行消费\r\n            //消费方式:直接输出字符串\r\n            //System.out.println(name);\r\n            //消费方式:把字符串转换为大写\r\n            String str = s.toUpperCase();\r\n            System.out.println(str);\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n# Predicate接口\r\n\r\n有时候我们需要对某种类型的数据进行判断，从而得到一个boolean值结果。这时可以使用 `java.util.function.Predicate<T>` 接口。\r\n\r\n```java\r\npackage java.util.function;\r\n\r\nimport java.util.Objects;\r\n\r\n/**\r\n * Represents a predicate (boolean-valued function) of one argument.\r\n *\r\n * <p>This is a <a href=\"package-summary.html\">functional interface</a>\r\n * whose functional method is {@link #test(Object)}.\r\n *\r\n * @param <T> the type of the input to the predicate\r\n *\r\n * @since 1.8\r\n */\r\n@FunctionalInterface\r\npublic interface Predicate<T> {\r\n\r\n    /**\r\n     * Evaluates this predicate on the given argument.\r\n     *\r\n     * @param t the input argument\r\n     * @return {@code true} if the input argument matches the predicate,\r\n     * otherwise {@code false}\r\n     */\r\n    boolean test(T t);\r\n\r\n    /**\r\n     * Returns a composed predicate that represents a short-circuiting logical\r\n     * AND of this predicate and another.  When evaluating the composed\r\n     * predicate, if this predicate is {@code false}, then the {@code other}\r\n     * predicate is not evaluated.\r\n     *\r\n     * <p>Any exceptions thrown during evaluation of either predicate are relayed\r\n     * to the caller; if evaluation of this predicate throws an exception, the\r\n     * {@code other} predicate will not be evaluated.\r\n     *\r\n     * @param other a predicate that will be logically-ANDed with this\r\n     *              predicate\r\n     * @return a composed predicate that represents the short-circuiting logical\r\n     * AND of this predicate and the {@code other} predicate\r\n     * @throws NullPointerException if other is null\r\n     */\r\n    default Predicate<T> and(Predicate<? super T> other) {\r\n        Objects.requireNonNull(other);\r\n        return (t) -> test(t) && other.test(t);\r\n    }\r\n\r\n    /**\r\n     * Returns a predicate that represents the logical negation of this\r\n     * predicate.\r\n     *\r\n     * @return a predicate that represents the logical negation of this\r\n     * predicate\r\n     */\r\n    default Predicate<T> negate() {\r\n        return (t) -> !test(t);\r\n    }\r\n\r\n    /**\r\n     * Returns a composed predicate that represents a short-circuiting logical\r\n     * OR of this predicate and another.  When evaluating the composed\r\n     * predicate, if this predicate is {@code true}, then the {@code other}\r\n     * predicate is not evaluated.\r\n     *\r\n     * <p>Any exceptions thrown during evaluation of either predicate are relayed\r\n     * to the caller; if evaluation of this predicate throws an exception, the\r\n     * {@code other} predicate will not be evaluated.\r\n     *\r\n     * @param other a predicate that will be logically-ORed with this\r\n     *              predicate\r\n     * @return a composed predicate that represents the short-circuiting logical\r\n     * OR of this predicate and the {@code other} predicate\r\n     * @throws NullPointerException if other is null\r\n     */\r\n    default Predicate<T> or(Predicate<? super T> other) {\r\n        Objects.requireNonNull(other);\r\n        return (t) -> test(t) || other.test(t);\r\n    }\r\n\r\n    /**\r\n     * Returns a predicate that tests if two arguments are equal according\r\n     * to {@link Objects#equals(Object, Object)}.\r\n     *\r\n     * @param <T> the type of arguments to the predicate\r\n     * @param targetRef the object reference with which to compare for equality,\r\n     *               which may be {@code null}\r\n     * @return a predicate that tests if two arguments are equal according\r\n     * to {@link Objects#equals(Object, Object)}\r\n     */\r\n    static <T> Predicate<T> isEqual(Object targetRef) {\r\n        return (null == targetRef)\r\n                ? Objects::isNull\r\n                : object -> targetRef.equals(object);\r\n    }\r\n}\r\n```\r\n\r\n## 示例\r\n\r\n```java\r\nimport java.util.function.Predicate;\r\n/*\r\n    java.util.function.Predicate<T>接口\r\n    作用:对某种数据类型的数据进行判断,结果返回一个boolean值\r\n\r\n    Predicate接口中包含一个抽象方法：\r\n        boolean test(T t):用来对指定数据类型数据进行判断的方法\r\n            结果:\r\n                符合条件,返回true\r\n                不符合条件,返回false\r\n*/\r\npublic class test {\r\n    /*\r\n        定义一个方法\r\n        参数传递一个String类型的字符串\r\n        传递一个Predicate接口,泛型使用String\r\n        使用Predicate中的方法test对字符串进行判断,并把判断的结果返回\r\n     */\r\n    public static boolean checkString(String s, Predicate<String> pre){\r\n        return  pre.test(s);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        String s = \"hello\";\r\n        boolean b = checkString(s,str->str.length()>5);\r\n        System.out.println(b);\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n# Function接口\r\n\r\n`java.util.function.Function<T,R>` 接口用来根据一个类型的数据得到另一个类型的数据，前者称为前置条件， 后者称为后置条件\r\n\r\n```java\r\npackage java.util.function;\r\n\r\nimport java.util.Objects;\r\n\r\n/**\r\n * Represents a function that accepts one argument and produces a result.\r\n *\r\n * <p>This is a <a href=\"package-summary.html\">functional interface</a>\r\n * whose functional method is {@link #apply(Object)}.\r\n *\r\n * @param <T> the type of the input to the function\r\n * @param <R> the type of the result of the function\r\n *\r\n * @since 1.8\r\n */\r\n@FunctionalInterface\r\npublic interface Function<T, R> {\r\n\r\n    /**\r\n     * Applies this function to the given argument.\r\n     *\r\n     * @param t the function argument\r\n     * @return the function result\r\n     */\r\n    R apply(T t);\r\n\r\n    /**\r\n     * Returns a composed function that first applies the {@code before}\r\n     * function to its input, and then applies this function to the result.\r\n     * If evaluation of either function throws an exception, it is relayed to\r\n     * the caller of the composed function.\r\n     *\r\n     * @param <V> the type of input to the {@code before} function, and to the\r\n     *           composed function\r\n     * @param before the function to apply before this function is applied\r\n     * @return a composed function that first applies the {@code before}\r\n     * function and then applies this function\r\n     * @throws NullPointerException if before is null\r\n     *\r\n     * @see #andThen(Function)\r\n     */\r\n    default <V> Function<V, R> compose(Function<? super V, ? extends T> before) {\r\n        Objects.requireNonNull(before);\r\n        return (V v) -> apply(before.apply(v));\r\n    }\r\n\r\n    /**\r\n     * Returns a composed function that first applies this function to\r\n     * its input, and then applies the {@code after} function to the result.\r\n     * If evaluation of either function throws an exception, it is relayed to\r\n     * the caller of the composed function.\r\n     *\r\n     * @param <V> the type of output of the {@code after} function, and of the\r\n     *           composed function\r\n     * @param after the function to apply after this function is applied\r\n     * @return a composed function that first applies this function and then\r\n     * applies the {@code after} function\r\n     * @throws NullPointerException if after is null\r\n     *\r\n     * @see #compose(Function)\r\n     */\r\n    default <V> Function<T, V> andThen(Function<? super R, ? extends V> after) {\r\n        Objects.requireNonNull(after);\r\n        return (T t) -> after.apply(apply(t));\r\n    }\r\n\r\n    /**\r\n     * Returns a function that always returns its input argument.\r\n     *\r\n     * @param <T> the type of the input and output objects to the function\r\n     * @return a function that always returns its input argument\r\n     */\r\n    static <T> Function<T, T> identity() {\r\n        return t -> t;\r\n    }\r\n}\r\n```\r\n\r\n## 示例\r\n\r\n```java\r\nimport java.util.function.Function;\r\n/*\r\n    java.util.function.Function<T,R>接口用来根据一个类型的数据得到另一个类型的数据，\r\n        前者称为前置条件，后者称为后置条件。\r\n    Function接口中最主要的抽象方法为：R apply(T t)，根据类型T的参数获取类型R的结果。\r\n        使用的场景例如：将String类型转换为Integer类型。\r\n */\r\npublic class test {\r\n    /*\r\n        定义一个方法\r\n        方法的参数传递一个字符串类型的整数\r\n        方法的参数传递一个Function接口,泛型使用<String,Integer>\r\n        使用Function接口中的方法apply,把字符串类型的整数,转换为Integer类型的整数\r\n     */\r\n    public static void change(String s, Function<String,Integer> fun){\r\n        //Integer in = fun.apply(s);\r\n        int in = fun.apply(s);//自动拆箱 Integer->int\r\n        System.out.println(in);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        //定义一个字符串类型的整数\r\n        String s = \"1234\";\r\n        //调用change方法,传递字符串类型的整数,和Lambda表达式\r\n        change(s,(String str)->{\r\n            //把字符串类型的整数,转换为Integer类型的整数返回\r\n            return Integer.parseInt(str);\r\n        });\r\n        //优化Lambda\r\n        change(s,str->Integer.parseInt(str));\r\n    }\r\n}\r\n```","excerpt":"","includedFiles":[],"tasklists":0,"title":"Supplier接口","headers":[{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]},{"level":2,"title":"示例","slug":"示例-2","link":"#示例-2","children":[]},{"level":2,"title":"示例","slug":"示例-3","link":"#示例-3","children":[]}]}}
