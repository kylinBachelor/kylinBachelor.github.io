{"content":"<h2 id=\"饿汉式-静态常量\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#饿汉式-静态常量\"><span>饿汉式（静态常量）</span></a></h2>\n<ol>\n<li>构造器私有化，防止使用new构造对象</li>\n<li>类的内部创建对象</li>\n<li>向外暴露一个静态的公共方法：getInstance</li>\n</ol>\n<!--listend-->\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 1. 构造器私有化，外部无法new</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 2. 本类内部创建实例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> final</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 3. 提供一个公有的静态方法，返回实例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点\"><span>优缺点</span></a></h3>\n<ol>\n<li>优点：这种写法比较简单，就是在类装载的时候完成了实例化，避免了线程同步问题。</li>\n<li>缺点：在类装载的时候完成实例化，没有达到lazy loading的效果，如果从始至终未使用过这个实例，则会造成内存的浪费。</li>\n<li>这种方式基于classLoader机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多，因此不能确定有其它的方式（或者其它的静态方法）导致类装载，这时候\n初始化instance就没有达到lazy loading的效果</li>\n<li>总而言之，这种单例模式可用，可能造成内存的浪费</li>\n</ol>\n<h2 id=\"饿汉式-静态代码块\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#饿汉式-静态代码块\"><span>饿汉式（静态代码块）</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 1. 构造器私有化</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 2. 本类内部创建实例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 3. 在静态代码块中创建单例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    static</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">        instance </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 4. 提供一个公有的静态方法，返回实例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点-1\"><span>优缺点</span></a></h3>\n<ol>\n<li>这种方式和使用静态常量的方式其实类似的，只不过将实例化的过程放在了静态代码块之中了，也是在类装载的时候，就执行静态代码块之中的代码，初始化类的实例。优缺点和静态常量方式是一样的。</li>\n<li>这种单例模式可用，但是可能造成内存的浪费。</li>\n</ol>\n<h2 id=\"懒汉式-线程不安全\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#懒汉式-线程不安全\"><span>懒汉式（线程不安全）</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 提供一个公有的静态方法，当使用到该方法时才去创建instance</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">instance </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">==</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> null</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">            instance </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点-2\"><span>优缺点</span></a></h3>\n<ol>\n<li>起到了lazy loading的效果，但是只能在单线程下使用。</li>\n<li>如果在多线程下，一个线程进入了判空语句块，还未来得及往下执行，另一个线程也通过了这个语句，这时便会产生多个实例，所以在多线程环境下不可使用这种方式。</li>\n</ol>\n<h2 id=\"懒汉式-线程安全-同步方法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#懒汉式-线程安全-同步方法\"><span>懒汉式（线程安全，同步方法）</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 提供一个公有的静态方法，当使用到该方法时才去创建instance</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> synchronized</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">instance </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">==</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> null</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">            instance </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点-3\"><span>优缺点</span></a></h3>\n<ol>\n<li>解决了 <strong>线程安全</strong> 的问题</li>\n<li>效率太低了，每个线程想要获得类的实例的时候，执行getInstance()都要进行同步。而其实这个方法执行一次就够了。</li>\n</ol>\n<h2 id=\"懒汉式-线程安全-同步代码块\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#懒汉式-线程安全-同步代码块\"><span>懒汉式（线程安全，同步代码块）</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 提供一个公有的静态方法，当使用到该方法时才去创建instance</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">instance </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">==</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> null</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">            synchronized</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">class</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">                instance </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点-4\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点-4\"><span>优缺点</span></a></h3>\n<ol>\n<li>这种方式并不能起到线程同步的作用</li>\n<li><strong>开发中不能使用</strong></li>\n</ol>\n<h2 id=\"双重检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#双重检查\"><span>双重检查</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> volatile</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 提供一个公有的静态方法，当使用到该方法时才去创建instance</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">instance </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">==</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> null</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">            synchronized</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">class</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">                if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">instance </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">==</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> null</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">                    instance </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">                }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"静态内部类\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#静态内部类\"><span>静态内部类</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> volatile</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 构造器私有化</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 写一个静态内部类，该类中有一个静态属性 Singleton</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> SingletonInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">        private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> final</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> INSTANCE</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 提供一个公有的静态方法，直接返回SingletonInstance.INSTANCE</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> synchronized</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> ()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> SingletonInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">INSTANCE</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点-5\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点-5\"><span>优缺点</span></a></h3>\n<ol>\n<li>这种方式采用了类装载的机制保证初始化实例时只有一个线程。</li>\n<li>静态内部类方式在Singleton类被装载时并不会立即实例化，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化</li>\n<li>类的静态属性只会在第一次加载类的时候初始化，所以在这里JVM帮我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的</li>\n<li>避免了线程不安全，利用静态内部类特点实现延迟加载，效率高</li>\n</ol>\n<h2 id=\"枚举\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#枚举\"><span>枚举</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">enum</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\">    INSTANCE</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> sayOK</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">is ok-----</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","env":{"base":"/","filePath":"C:/Users/kylinBachelor/Desktop/my-project/docs/notes/设计模式/单例模式/index.md","filePathRelative":"notes/设计模式/单例模式/index.md","frontmatter":{"title":"单例模式","tags":["设计模式"],"description":"单例模式","createTime":"2024/11/30 14:15:41"},"sfcBlocks":{"template":{"type":"template","content":"<template><h2 id=\"饿汉式-静态常量\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#饿汉式-静态常量\"><span>饿汉式（静态常量）</span></a></h2>\n<ol>\n<li>构造器私有化，防止使用new构造对象</li>\n<li>类的内部创建对象</li>\n<li>向外暴露一个静态的公共方法：getInstance</li>\n</ol>\n<!--listend-->\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 1. 构造器私有化，外部无法new</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 2. 本类内部创建实例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> final</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 3. 提供一个公有的静态方法，返回实例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点\"><span>优缺点</span></a></h3>\n<ol>\n<li>优点：这种写法比较简单，就是在类装载的时候完成了实例化，避免了线程同步问题。</li>\n<li>缺点：在类装载的时候完成实例化，没有达到lazy loading的效果，如果从始至终未使用过这个实例，则会造成内存的浪费。</li>\n<li>这种方式基于classLoader机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多，因此不能确定有其它的方式（或者其它的静态方法）导致类装载，这时候\n初始化instance就没有达到lazy loading的效果</li>\n<li>总而言之，这种单例模式可用，可能造成内存的浪费</li>\n</ol>\n<h2 id=\"饿汉式-静态代码块\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#饿汉式-静态代码块\"><span>饿汉式（静态代码块）</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 1. 构造器私有化</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 2. 本类内部创建实例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 3. 在静态代码块中创建单例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    static</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">        instance </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 4. 提供一个公有的静态方法，返回实例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点-1\"><span>优缺点</span></a></h3>\n<ol>\n<li>这种方式和使用静态常量的方式其实类似的，只不过将实例化的过程放在了静态代码块之中了，也是在类装载的时候，就执行静态代码块之中的代码，初始化类的实例。优缺点和静态常量方式是一样的。</li>\n<li>这种单例模式可用，但是可能造成内存的浪费。</li>\n</ol>\n<h2 id=\"懒汉式-线程不安全\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#懒汉式-线程不安全\"><span>懒汉式（线程不安全）</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 提供一个公有的静态方法，当使用到该方法时才去创建instance</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">instance </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">==</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> null</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">            instance </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点-2\"><span>优缺点</span></a></h3>\n<ol>\n<li>起到了lazy loading的效果，但是只能在单线程下使用。</li>\n<li>如果在多线程下，一个线程进入了判空语句块，还未来得及往下执行，另一个线程也通过了这个语句，这时便会产生多个实例，所以在多线程环境下不可使用这种方式。</li>\n</ol>\n<h2 id=\"懒汉式-线程安全-同步方法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#懒汉式-线程安全-同步方法\"><span>懒汉式（线程安全，同步方法）</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 提供一个公有的静态方法，当使用到该方法时才去创建instance</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> synchronized</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">instance </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">==</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> null</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">            instance </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点-3\"><span>优缺点</span></a></h3>\n<ol>\n<li>解决了 <strong>线程安全</strong> 的问题</li>\n<li>效率太低了，每个线程想要获得类的实例的时候，执行getInstance()都要进行同步。而其实这个方法执行一次就够了。</li>\n</ol>\n<h2 id=\"懒汉式-线程安全-同步代码块\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#懒汉式-线程安全-同步代码块\"><span>懒汉式（线程安全，同步代码块）</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 提供一个公有的静态方法，当使用到该方法时才去创建instance</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">instance </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">==</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> null</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">            synchronized</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">class</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">                instance </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点-4\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点-4\"><span>优缺点</span></a></h3>\n<ol>\n<li>这种方式并不能起到线程同步的作用</li>\n<li><strong>开发中不能使用</strong></li>\n</ol>\n<h2 id=\"双重检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#双重检查\"><span>双重检查</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> volatile</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 提供一个公有的静态方法，当使用到该方法时才去创建instance</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">instance </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">==</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> null</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">            synchronized</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">class</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">                if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">instance </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">==</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> null</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">                    instance </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">                }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"静态内部类\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#静态内部类\"><span>静态内部类</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> volatile</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 构造器私有化</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 写一个静态内部类，该类中有一个静态属性 Singleton</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> SingletonInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">        private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> final</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> INSTANCE</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 提供一个公有的静态方法，直接返回SingletonInstance.INSTANCE</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> synchronized</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> ()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> SingletonInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">INSTANCE</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点-5\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点-5\"><span>优缺点</span></a></h3>\n<ol>\n<li>这种方式采用了类装载的机制保证初始化实例时只有一个线程。</li>\n<li>静态内部类方式在Singleton类被装载时并不会立即实例化，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化</li>\n<li>类的静态属性只会在第一次加载类的时候初始化，所以在这里JVM帮我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的</li>\n<li>避免了线程不安全，利用静态内部类特点实现延迟加载，效率高</li>\n</ol>\n<h2 id=\"枚举\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#枚举\"><span>枚举</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">enum</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\">    INSTANCE</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> sayOK</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">is ok-----</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></template>","contentStripped":"<h2 id=\"饿汉式-静态常量\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#饿汉式-静态常量\"><span>饿汉式（静态常量）</span></a></h2>\n<ol>\n<li>构造器私有化，防止使用new构造对象</li>\n<li>类的内部创建对象</li>\n<li>向外暴露一个静态的公共方法：getInstance</li>\n</ol>\n<!--listend-->\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 1. 构造器私有化，外部无法new</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 2. 本类内部创建实例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> final</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 3. 提供一个公有的静态方法，返回实例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点\"><span>优缺点</span></a></h3>\n<ol>\n<li>优点：这种写法比较简单，就是在类装载的时候完成了实例化，避免了线程同步问题。</li>\n<li>缺点：在类装载的时候完成实例化，没有达到lazy loading的效果，如果从始至终未使用过这个实例，则会造成内存的浪费。</li>\n<li>这种方式基于classLoader机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多，因此不能确定有其它的方式（或者其它的静态方法）导致类装载，这时候\n初始化instance就没有达到lazy loading的效果</li>\n<li>总而言之，这种单例模式可用，可能造成内存的浪费</li>\n</ol>\n<h2 id=\"饿汉式-静态代码块\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#饿汉式-静态代码块\"><span>饿汉式（静态代码块）</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 1. 构造器私有化</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 2. 本类内部创建实例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 3. 在静态代码块中创建单例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    static</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">        instance </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 4. 提供一个公有的静态方法，返回实例对象</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点-1\"><span>优缺点</span></a></h3>\n<ol>\n<li>这种方式和使用静态常量的方式其实类似的，只不过将实例化的过程放在了静态代码块之中了，也是在类装载的时候，就执行静态代码块之中的代码，初始化类的实例。优缺点和静态常量方式是一样的。</li>\n<li>这种单例模式可用，但是可能造成内存的浪费。</li>\n</ol>\n<h2 id=\"懒汉式-线程不安全\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#懒汉式-线程不安全\"><span>懒汉式（线程不安全）</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 提供一个公有的静态方法，当使用到该方法时才去创建instance</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">instance </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">==</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> null</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">            instance </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点-2\"><span>优缺点</span></a></h3>\n<ol>\n<li>起到了lazy loading的效果，但是只能在单线程下使用。</li>\n<li>如果在多线程下，一个线程进入了判空语句块，还未来得及往下执行，另一个线程也通过了这个语句，这时便会产生多个实例，所以在多线程环境下不可使用这种方式。</li>\n</ol>\n<h2 id=\"懒汉式-线程安全-同步方法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#懒汉式-线程安全-同步方法\"><span>懒汉式（线程安全，同步方法）</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 提供一个公有的静态方法，当使用到该方法时才去创建instance</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> synchronized</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">instance </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">==</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> null</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">            instance </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点-3\"><span>优缺点</span></a></h3>\n<ol>\n<li>解决了 <strong>线程安全</strong> 的问题</li>\n<li>效率太低了，每个线程想要获得类的实例的时候，执行getInstance()都要进行同步。而其实这个方法执行一次就够了。</li>\n</ol>\n<h2 id=\"懒汉式-线程安全-同步代码块\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#懒汉式-线程安全-同步代码块\"><span>懒汉式（线程安全，同步代码块）</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 提供一个公有的静态方法，当使用到该方法时才去创建instance</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">instance </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">==</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> null</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">            synchronized</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">class</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">                instance </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点-4\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点-4\"><span>优缺点</span></a></h3>\n<ol>\n<li>这种方式并不能起到线程同步的作用</li>\n<li><strong>开发中不能使用</strong></li>\n</ol>\n<h2 id=\"双重检查\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#双重检查\"><span>双重检查</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> volatile</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 提供一个公有的静态方法，当使用到该方法时才去创建instance</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">instance </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">==</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> null</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">            synchronized</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">class</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">                if</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> (</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">instance </span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">==</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> null</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">)</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">                    instance </span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">                }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"静态内部类\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#静态内部类\"><span>静态内部类</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> volatile</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> instance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 构造器私有化</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 写一个静态内部类，该类中有一个静态属性 Singleton</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> class</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> SingletonInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">        private</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> final</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> INSTANCE</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> =</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\"> new</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">    // 提供一个公有的静态方法，直接返回SingletonInstance.INSTANCE</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> static</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> synchronized</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> Singleton </span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">getInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> ()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">        return</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> SingletonInstance</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">INSTANCE</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"优缺点-5\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#优缺点-5\"><span>优缺点</span></a></h3>\n<ol>\n<li>这种方式采用了类装载的机制保证初始化实例时只有一个线程。</li>\n<li>静态内部类方式在Singleton类被装载时并不会立即实例化，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化</li>\n<li>类的静态属性只会在第一次加载类的时候初始化，所以在这里JVM帮我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的</li>\n<li>避免了线程不安全，利用静态内部类特点实现延迟加载，效率高</li>\n</ol>\n<h2 id=\"枚举\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#枚举\"><span>枚举</span></a></h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\" data-title=\"java\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">enum</span><span style=\"--shiki-light:#2E8F82;--shiki-dark:#5DA994\"> Singleton</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\">    INSTANCE</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\">    public</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> void</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> sayOK</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">()</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">        System</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">out</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">.</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">println</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">(</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">is ok-----</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">}</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"## 饿汉式（静态常量）\r\n\r\n1.  构造器私有化，防止使用new构造对象\r\n2.  类的内部创建对象\r\n3.  向外暴露一个静态的公共方法：getInstance\r\n\r\n<!--listend-->\r\n\r\n```java\r\nclass Singleton {\r\n    // 1. 构造器私有化，外部无法new\r\n    private Singleton() {}\r\n    // 2. 本类内部创建实例对象\r\n    private final static Singleton instance = new Singleton();\r\n    // 3. 提供一个公有的静态方法，返回实例对象\r\n    public static Singleton getInstance() {\r\n        return instance;\r\n    }\r\n}\r\n```\r\n\r\n\r\n### 优缺点\r\n\r\n1.  优点：这种写法比较简单，就是在类装载的时候完成了实例化，避免了线程同步问题。\r\n2.  缺点：在类装载的时候完成实例化，没有达到lazy loading的效果，如果从始至终未使用过这个实例，则会造成内存的浪费。\r\n3.  这种方式基于classLoader机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多，因此不能确定有其它的方式（或者其它的静态方法）导致类装载，这时候\r\n    初始化instance就没有达到lazy loading的效果\r\n4.  总而言之，这种单例模式可用，可能造成内存的浪费\r\n\r\n\r\n## 饿汉式（静态代码块）\r\n\r\n```java\r\nclass Singleton {\r\n    // 1. 构造器私有化\r\n    private Singleton() {}\r\n    // 2. 本类内部创建实例对象\r\n    private static Singleton instance;\r\n    // 3. 在静态代码块中创建单例对象\r\n    static {\r\n        instance = new Singleton();\r\n    }\r\n    // 4. 提供一个公有的静态方法，返回实例对象\r\n    public static Singleton getInstance() {\r\n        return instance;\r\n    }\r\n}\r\n```\r\n\r\n\r\n### 优缺点\r\n\r\n1.  这种方式和使用静态常量的方式其实类似的，只不过将实例化的过程放在了静态代码块之中了，也是在类装载的时候，就执行静态代码块之中的代码，初始化类的实例。优缺点和静态常量方式是一样的。\r\n2.  这种单例模式可用，但是可能造成内存的浪费。\r\n\r\n\r\n## 懒汉式（线程不安全）\r\n\r\n```java\r\nclass Singleton {\r\n    private static instance;\r\n    private Singleton() {}\r\n    // 提供一个公有的静态方法，当使用到该方法时才去创建instance\r\n    public static Singleton getInstance() {\r\n        if (instance == null) {\r\n            instance = new Singleton();\r\n        }\r\n        return instance;\r\n    }\r\n}\r\n```\r\n\r\n\r\n### 优缺点\r\n\r\n1.  起到了lazy loading的效果，但是只能在单线程下使用。\r\n2.  如果在多线程下，一个线程进入了判空语句块，还未来得及往下执行，另一个线程也通过了这个语句，这时便会产生多个实例，所以在多线程环境下不可使用这种方式。\r\n\r\n\r\n## 懒汉式（线程安全，同步方法）\r\n\r\n```java\r\nclass Singleton {\r\n    private static instance;\r\n    private Singleton() {}\r\n    // 提供一个公有的静态方法，当使用到该方法时才去创建instance\r\n    public static synchronized Singleton getInstance() {\r\n        if (instance == null) {\r\n            instance = new Singleton();\r\n        }\r\n        return instance;\r\n    }\r\n}\r\n```\r\n\r\n\r\n### 优缺点\r\n\r\n1.  解决了 **线程安全** 的问题\r\n2.  效率太低了，每个线程想要获得类的实例的时候，执行getInstance()都要进行同步。而其实这个方法执行一次就够了。\r\n\r\n\r\n## 懒汉式（线程安全，同步代码块）\r\n\r\n```java\r\nclass Singleton {\r\n    private static Singleton instance;\r\n    private Singleton() {}\r\n    // 提供一个公有的静态方法，当使用到该方法时才去创建instance\r\n    public static Singleton getInstance() {\r\n        if (instance == null) {\r\n            synchronized(Singleton.class) {\r\n                instance = new Singleton();\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n}\r\n```\r\n\r\n\r\n### 优缺点\r\n\r\n1.  这种方式并不能起到线程同步的作用\r\n2.  **开发中不能使用**\r\n\r\n\r\n## 双重检查\r\n\r\n```java\r\nclass Singleton {\r\n    private static volatile Singleton instance;\r\n    private Singleton() {}\r\n    // 提供一个公有的静态方法，当使用到该方法时才去创建instance\r\n    public static Singleton getInstance() {\r\n        if (instance == null) {\r\n            synchronized(Singleton.class) {\r\n                if (instance == null) {\r\n                    instance = new Singleton();\r\n                }\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n}\r\n```\r\n\r\n\r\n## 静态内部类\r\n\r\n```java\r\nclass Singleton {\r\n    private static volatile Singleton instance;\r\n    // 构造器私有化\r\n    private Singleton() {}\r\n    // 写一个静态内部类，该类中有一个静态属性 Singleton\r\n    private static class SingletonInstance {\r\n        private static final Singleton INSTANCE = new Singleton();\r\n    }\r\n    // 提供一个公有的静态方法，直接返回SingletonInstance.INSTANCE\r\n    public static synchronized Singleton getInstance () {\r\n        return SingletonInstance.INSTANCE;\r\n    }\r\n}\r\n```\r\n\r\n\r\n### 优缺点\r\n\r\n1.  这种方式采用了类装载的机制保证初始化实例时只有一个线程。\r\n2.  静态内部类方式在Singleton类被装载时并不会立即实例化，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化\r\n3.  类的静态属性只会在第一次加载类的时候初始化，所以在这里JVM帮我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的\r\n4.  避免了线程不安全，利用静态内部类特点实现延迟加载，效率高\r\n\r\n\r\n## 枚举\r\n\r\n```java\r\nenum Singleton {\r\n    INSTANCE;\r\n    public void sayOK() {\r\n        System.out.println(\"is ok-----\");\r\n    }\r\n}\r\n```","excerpt":"","includedFiles":[],"tasklists":0,"title":"","headers":[{"level":2,"title":"饿汉式（静态常量）","slug":"饿汉式-静态常量","link":"#饿汉式-静态常量","children":[{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]}]},{"level":2,"title":"饿汉式（静态代码块）","slug":"饿汉式-静态代码块","link":"#饿汉式-静态代码块","children":[{"level":3,"title":"优缺点","slug":"优缺点-1","link":"#优缺点-1","children":[]}]},{"level":2,"title":"懒汉式（线程不安全）","slug":"懒汉式-线程不安全","link":"#懒汉式-线程不安全","children":[{"level":3,"title":"优缺点","slug":"优缺点-2","link":"#优缺点-2","children":[]}]},{"level":2,"title":"懒汉式（线程安全，同步方法）","slug":"懒汉式-线程安全-同步方法","link":"#懒汉式-线程安全-同步方法","children":[{"level":3,"title":"优缺点","slug":"优缺点-3","link":"#优缺点-3","children":[]}]},{"level":2,"title":"懒汉式（线程安全，同步代码块）","slug":"懒汉式-线程安全-同步代码块","link":"#懒汉式-线程安全-同步代码块","children":[{"level":3,"title":"优缺点","slug":"优缺点-4","link":"#优缺点-4","children":[]}]},{"level":2,"title":"双重检查","slug":"双重检查","link":"#双重检查","children":[]},{"level":2,"title":"静态内部类","slug":"静态内部类","link":"#静态内部类","children":[{"level":3,"title":"优缺点","slug":"优缺点-5","link":"#优缺点-5","children":[]}]},{"level":2,"title":"枚举","slug":"枚举","link":"#枚举","children":[]}]}}
