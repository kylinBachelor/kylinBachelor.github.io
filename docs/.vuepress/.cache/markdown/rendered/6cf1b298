{"content":"<p>Federation插件的设计目标是使RabbitMQ在不同的Broker节点之间进行消息传递而无须建立集群。</p>\n<p>它可以在不同的管理域中的Broker或集群间传递消息，这些管理域可能设置了不同的用户和vhost，也可能运行在不同版本的RabbitMQ和Erlang上。Federation基于AMQP 0-9-1协议在不同的Broker之间进行通信，并且设计成能够容忍不稳定的网络连接情况。</p>\n<h1 id=\"二、federation交换机\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#二、federation交换机\"><span>二、Federation交换机</span></a></h1>\n<h2 id=\"_1、总体说明\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1、总体说明\"><span>1、总体说明</span></a></h2>\n<ul>\n<li>各节点操作：启用联邦插件</li>\n<li>下游操作：\n<ul>\n<li>添加上游连接端点</li>\n<li>创建控制策略</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"_2、准备工作\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2、准备工作\"><span>2、准备工作</span></a></h2>\n<p>为了执行相关测试，我们使用Docker创建两个RabbitMQ实例。</p>\n<p><span style=\"color:blue;\"><strong>特别提示</strong></span>：由于Federation机制的最大特点就是跨集群同步数据，所以这两个Docker容器中的RabbitMQ实例不加入集群！！！是两个<span style=\"color:blue;\"><strong>独立的broker实例</strong></span>。</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> run</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -d</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">--name </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">rabbitmq-shenzhen</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-p </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">51000:5672</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-p </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">52000:15672</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-v </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">rabbitmq-plugin:/plugins</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-e </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">RABBITMQ_DEFAULT_USER=guest</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-e </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">RABBITMQ_DEFAULT_PASS=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123456</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">rabbitmq:3.13-management</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> run</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -d</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">--name </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">rabbitmq-shanghai</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-p </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">61000:5672</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-p </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">62000:15672</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-v </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">rabbitmq-plugin:/plugins</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-e </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">RABBITMQ_DEFAULT_USER=guest</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-e </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">RABBITMQ_DEFAULT_PASS=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123456</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">rabbitmq:3.13-management</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_3、启用联邦插件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3、启用联邦插件\"><span>3、启用联邦插件</span></a></h2>\n<p>在上游、下游节点中都需要开启。</p>\n<p>Docker容器中的RabbitMQ已经开启了rabbitmq_federation，还需要开启rabbitmq_federation_management</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">rabbitmq-plugins</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> enable</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> rabbitmq_federation</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">rabbitmq-plugins</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> enable</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> rabbitmq_federation_management</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>rabbitmq_federation_management插件启用后会在Management UI的Admin选项卡下看到：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425152627455.png\" alt=\"image-20240425152627455\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425152627455</figcaption></figure>\n<h2 id=\"_4、添加上游连接端点\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4、添加上游连接端点\"><span>4、添加上游连接端点</span></a></h2>\n<p>在下游节点填写上游节点的连接信息：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425164430500.png\" alt=\"image-20240425164430500\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425164430500</figcaption></figure>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425170737126.png\" alt=\"image-20240425170737126\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425170737126</figcaption></figure>\n<h2 id=\"_5、创建控制策略\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5、创建控制策略\"><span>5、创建控制策略</span></a></h2>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425164648385.png\" alt=\"image-20240425164648385\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425164648385</figcaption></figure>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425165531899.png\" alt=\"image-20240425165531899\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425165531899</figcaption></figure>\n<h2 id=\"_6、测试\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6、测试\"><span>6、测试</span></a></h2>\n<h3 id=\"_1测试计划\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1测试计划\"><span>①测试计划</span></a></h3>\n<p><span style=\"color:blue;\"><strong>特别提示</strong></span>：</p>\n<ul>\n<li>普通交换机和联邦交换机名称要一致</li>\n<li>交换机名称要能够和策略正则表达式匹配上</li>\n<li>发送消息时，两边使用的路由键也要一致</li>\n<li>队列名称不要求一致</li>\n</ul>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425170044297.png\" alt=\"image-20240425170044297\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425170044297</figcaption></figure>\n<h3 id=\"_2创建组件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2创建组件\"><span>②创建组件</span></a></h3>\n<table>\n<thead>\n<tr>\n<th>所在机房</th>\n<th>交换机名称</th>\n<th>路由键</th>\n<th>队列名称</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>深圳机房（上游）</td>\n<td>federated.exchange.demo</td>\n<td>routing.key.demo.test</td>\n<td>queue.normal.shenzhen</td>\n</tr>\n<tr>\n<td>上海机房（下游）</td>\n<td>federated.exchange.demo</td>\n<td>routing.key.demo.test</td>\n<td>queue.normal.shanghai</td>\n</tr>\n</tbody>\n</table>\n<p>创建组件后可以查看一下联邦状态，连接成功的联邦状态如下：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425170652201.png\" alt=\"image-20240425170652201\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425170652201</figcaption></figure>\n<h3 id=\"_3发布消息执行测试\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3发布消息执行测试\"><span>③发布消息执行测试</span></a></h3>\n<p>在上游节点向交换机发布消息：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425171228928.png\" alt=\"image-20240425171228928\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425171228928</figcaption></figure>\n<p>看到下游节点接收到了消息：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425171308430.png\" alt=\"image-20240425171308430\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425171308430</figcaption></figure>\n<h1 id=\"三、federation队列\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#三、federation队列\"><span>三、Federation队列</span></a></h1>\n<h2 id=\"_1、总体说明-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1、总体说明-1\"><span>1、总体说明</span></a></h2>\n<p>Federation队列和Federation交换机的最核心区别就是：</p>\n<ul>\n<li>Federation Police作用在交换机上，就是Federation交换机</li>\n<li>Federation Police作用在队列上，就是Federation队列</li>\n</ul>\n<h2 id=\"_2、创建控制策略\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2、创建控制策略\"><span>2、创建控制策略</span></a></h2>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425171911774.png\" alt=\"image-20240425171911774\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425171911774</figcaption></figure>\n<h2 id=\"_3、测试\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3、测试\"><span>3、测试</span></a></h2>\n<h3 id=\"_1测试计划-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1测试计划-1\"><span>①测试计划</span></a></h3>\n<p>上游节点和下游节点中队列名称是相同的，只是下游队列中的节点附加了联邦策略而已</p>\n<table>\n<thead>\n<tr>\n<th>所在机房</th>\n<th>交换机</th>\n<th>路由键</th>\n<th>队列</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>深圳机房（上游）</td>\n<td>exchange.normal.shenzhen</td>\n<td>routing.key.normal.shenzhen</td>\n<td>fed.queue.demo</td>\n</tr>\n<tr>\n<td>上海机房（下游）</td>\n<td>——</td>\n<td>——</td>\n<td>fed.queue.demo</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"_2创建组件-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2创建组件-1\"><span>②创建组件</span></a></h3>\n<p>上游节点都是常规操作，此处省略。重点需要关注的是下游节点的联邦队列创建时需要指定相关参数：</p>\n<p>创建组件后可以查看一下联邦状态，连接成功的联邦状态如下：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425172528528.png\" alt=\"image-20240425172528528\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425172528528</figcaption></figure>\n<h3 id=\"_3执行测试\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3执行测试\"><span>③执行测试</span></a></h3>\n<p>在上游节点向交换机发布消息：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425172625339.png\" alt=\"image-20240425172625339\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425172625339</figcaption></figure>\n<p>但此时发现下游节点中联邦队列并没有接收到消息，这是为什么呢？这里就体现出了联邦队列和联邦交换机工作逻辑的区别。</p>\n<p>对联邦队列来说，如果没有监听联邦队列的消费端程序，它是不会到上游去拉取消息的！</p>\n<p>如果有消费端监听联邦队列，那么首先消费联邦队列自身的消息；如果联邦队列为空，<span style=\"color:blue;\"><strong>这时候才</strong></span>会到上游队列节点中拉取消息。</p>\n<p>所以现在的测试效果需要消费端程序配合才能看到：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425182437573.png\" alt=\"image-20240425182437573\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425182437573</figcaption></figure>\n","env":{"base":"/","filePath":"C:/Users/kylinBachelor/Desktop/kylinBachelor.github.io/docs/notes/MQ/RabbitMQ/Federation插件.md","filePathRelative":"notes/MQ/RabbitMQ/Federation插件.md","frontmatter":{"title":"Federation插件","createTime":"2024/12/01 14:22:13"},"sfcBlocks":{"template":{"type":"template","content":"<template><p>Federation插件的设计目标是使RabbitMQ在不同的Broker节点之间进行消息传递而无须建立集群。</p>\n<p>它可以在不同的管理域中的Broker或集群间传递消息，这些管理域可能设置了不同的用户和vhost，也可能运行在不同版本的RabbitMQ和Erlang上。Federation基于AMQP 0-9-1协议在不同的Broker之间进行通信，并且设计成能够容忍不稳定的网络连接情况。</p>\n<h1 id=\"二、federation交换机\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#二、federation交换机\"><span>二、Federation交换机</span></a></h1>\n<h2 id=\"_1、总体说明\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1、总体说明\"><span>1、总体说明</span></a></h2>\n<ul>\n<li>各节点操作：启用联邦插件</li>\n<li>下游操作：\n<ul>\n<li>添加上游连接端点</li>\n<li>创建控制策略</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"_2、准备工作\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2、准备工作\"><span>2、准备工作</span></a></h2>\n<p>为了执行相关测试，我们使用Docker创建两个RabbitMQ实例。</p>\n<p><span style=\"color:blue;\"><strong>特别提示</strong></span>：由于Federation机制的最大特点就是跨集群同步数据，所以这两个Docker容器中的RabbitMQ实例不加入集群！！！是两个<span style=\"color:blue;\"><strong>独立的broker实例</strong></span>。</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> run</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -d</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">--name </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">rabbitmq-shenzhen</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-p </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">51000:5672</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-p </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">52000:15672</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-v </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">rabbitmq-plugin:/plugins</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-e </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">RABBITMQ_DEFAULT_USER=guest</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-e </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">RABBITMQ_DEFAULT_PASS=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123456</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">rabbitmq:3.13-management</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> run</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -d</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">--name </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">rabbitmq-shanghai</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-p </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">61000:5672</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-p </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">62000:15672</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-v </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">rabbitmq-plugin:/plugins</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-e </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">RABBITMQ_DEFAULT_USER=guest</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-e </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">RABBITMQ_DEFAULT_PASS=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123456</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">rabbitmq:3.13-management</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_3、启用联邦插件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3、启用联邦插件\"><span>3、启用联邦插件</span></a></h2>\n<p>在上游、下游节点中都需要开启。</p>\n<p>Docker容器中的RabbitMQ已经开启了rabbitmq_federation，还需要开启rabbitmq_federation_management</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">rabbitmq-plugins</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> enable</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> rabbitmq_federation</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">rabbitmq-plugins</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> enable</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> rabbitmq_federation_management</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>rabbitmq_federation_management插件启用后会在Management UI的Admin选项卡下看到：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425152627455.png\" alt=\"image-20240425152627455\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425152627455</figcaption></figure>\n<h2 id=\"_4、添加上游连接端点\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4、添加上游连接端点\"><span>4、添加上游连接端点</span></a></h2>\n<p>在下游节点填写上游节点的连接信息：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425164430500.png\" alt=\"image-20240425164430500\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425164430500</figcaption></figure>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425170737126.png\" alt=\"image-20240425170737126\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425170737126</figcaption></figure>\n<h2 id=\"_5、创建控制策略\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5、创建控制策略\"><span>5、创建控制策略</span></a></h2>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425164648385.png\" alt=\"image-20240425164648385\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425164648385</figcaption></figure>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425165531899.png\" alt=\"image-20240425165531899\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425165531899</figcaption></figure>\n<h2 id=\"_6、测试\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6、测试\"><span>6、测试</span></a></h2>\n<h3 id=\"_1测试计划\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1测试计划\"><span>①测试计划</span></a></h3>\n<p><span style=\"color:blue;\"><strong>特别提示</strong></span>：</p>\n<ul>\n<li>普通交换机和联邦交换机名称要一致</li>\n<li>交换机名称要能够和策略正则表达式匹配上</li>\n<li>发送消息时，两边使用的路由键也要一致</li>\n<li>队列名称不要求一致</li>\n</ul>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425170044297.png\" alt=\"image-20240425170044297\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425170044297</figcaption></figure>\n<h3 id=\"_2创建组件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2创建组件\"><span>②创建组件</span></a></h3>\n<table>\n<thead>\n<tr>\n<th>所在机房</th>\n<th>交换机名称</th>\n<th>路由键</th>\n<th>队列名称</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>深圳机房（上游）</td>\n<td>federated.exchange.demo</td>\n<td>routing.key.demo.test</td>\n<td>queue.normal.shenzhen</td>\n</tr>\n<tr>\n<td>上海机房（下游）</td>\n<td>federated.exchange.demo</td>\n<td>routing.key.demo.test</td>\n<td>queue.normal.shanghai</td>\n</tr>\n</tbody>\n</table>\n<p>创建组件后可以查看一下联邦状态，连接成功的联邦状态如下：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425170652201.png\" alt=\"image-20240425170652201\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425170652201</figcaption></figure>\n<h3 id=\"_3发布消息执行测试\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3发布消息执行测试\"><span>③发布消息执行测试</span></a></h3>\n<p>在上游节点向交换机发布消息：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425171228928.png\" alt=\"image-20240425171228928\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425171228928</figcaption></figure>\n<p>看到下游节点接收到了消息：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425171308430.png\" alt=\"image-20240425171308430\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425171308430</figcaption></figure>\n<h1 id=\"三、federation队列\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#三、federation队列\"><span>三、Federation队列</span></a></h1>\n<h2 id=\"_1、总体说明-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1、总体说明-1\"><span>1、总体说明</span></a></h2>\n<p>Federation队列和Federation交换机的最核心区别就是：</p>\n<ul>\n<li>Federation Police作用在交换机上，就是Federation交换机</li>\n<li>Federation Police作用在队列上，就是Federation队列</li>\n</ul>\n<h2 id=\"_2、创建控制策略\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2、创建控制策略\"><span>2、创建控制策略</span></a></h2>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425171911774.png\" alt=\"image-20240425171911774\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425171911774</figcaption></figure>\n<h2 id=\"_3、测试\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3、测试\"><span>3、测试</span></a></h2>\n<h3 id=\"_1测试计划-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1测试计划-1\"><span>①测试计划</span></a></h3>\n<p>上游节点和下游节点中队列名称是相同的，只是下游队列中的节点附加了联邦策略而已</p>\n<table>\n<thead>\n<tr>\n<th>所在机房</th>\n<th>交换机</th>\n<th>路由键</th>\n<th>队列</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>深圳机房（上游）</td>\n<td>exchange.normal.shenzhen</td>\n<td>routing.key.normal.shenzhen</td>\n<td>fed.queue.demo</td>\n</tr>\n<tr>\n<td>上海机房（下游）</td>\n<td>——</td>\n<td>——</td>\n<td>fed.queue.demo</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"_2创建组件-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2创建组件-1\"><span>②创建组件</span></a></h3>\n<p>上游节点都是常规操作，此处省略。重点需要关注的是下游节点的联邦队列创建时需要指定相关参数：</p>\n<p>创建组件后可以查看一下联邦状态，连接成功的联邦状态如下：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425172528528.png\" alt=\"image-20240425172528528\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425172528528</figcaption></figure>\n<h3 id=\"_3执行测试\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3执行测试\"><span>③执行测试</span></a></h3>\n<p>在上游节点向交换机发布消息：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425172625339.png\" alt=\"image-20240425172625339\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425172625339</figcaption></figure>\n<p>但此时发现下游节点中联邦队列并没有接收到消息，这是为什么呢？这里就体现出了联邦队列和联邦交换机工作逻辑的区别。</p>\n<p>对联邦队列来说，如果没有监听联邦队列的消费端程序，它是不会到上游去拉取消息的！</p>\n<p>如果有消费端监听联邦队列，那么首先消费联邦队列自身的消息；如果联邦队列为空，<span style=\"color:blue;\"><strong>这时候才</strong></span>会到上游队列节点中拉取消息。</p>\n<p>所以现在的测试效果需要消费端程序配合才能看到：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425182437573.png\" alt=\"image-20240425182437573\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425182437573</figcaption></figure>\n</template>","contentStripped":"<p>Federation插件的设计目标是使RabbitMQ在不同的Broker节点之间进行消息传递而无须建立集群。</p>\n<p>它可以在不同的管理域中的Broker或集群间传递消息，这些管理域可能设置了不同的用户和vhost，也可能运行在不同版本的RabbitMQ和Erlang上。Federation基于AMQP 0-9-1协议在不同的Broker之间进行通信，并且设计成能够容忍不稳定的网络连接情况。</p>\n<h1 id=\"二、federation交换机\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#二、federation交换机\"><span>二、Federation交换机</span></a></h1>\n<h2 id=\"_1、总体说明\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1、总体说明\"><span>1、总体说明</span></a></h2>\n<ul>\n<li>各节点操作：启用联邦插件</li>\n<li>下游操作：\n<ul>\n<li>添加上游连接端点</li>\n<li>创建控制策略</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"_2、准备工作\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2、准备工作\"><span>2、准备工作</span></a></h2>\n<p>为了执行相关测试，我们使用Docker创建两个RabbitMQ实例。</p>\n<p><span style=\"color:blue;\"><strong>特别提示</strong></span>：由于Federation机制的最大特点就是跨集群同步数据，所以这两个Docker容器中的RabbitMQ实例不加入集群！！！是两个<span style=\"color:blue;\"><strong>独立的broker实例</strong></span>。</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> run</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -d</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">--name </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">rabbitmq-shenzhen</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-p </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">51000:5672</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-p </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">52000:15672</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-v </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">rabbitmq-plugin:/plugins</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-e </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">RABBITMQ_DEFAULT_USER=guest</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-e </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">RABBITMQ_DEFAULT_PASS=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123456</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">rabbitmq:3.13-management</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> run</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -d</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">--name </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">rabbitmq-shanghai</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-p </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">61000:5672</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-p </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">62000:15672</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-v </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">rabbitmq-plugin:/plugins</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-e </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">RABBITMQ_DEFAULT_USER=guest</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">-e </span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">RABBITMQ_DEFAULT_PASS=</span><span style=\"--shiki-light:#2F798A;--shiki-dark:#4C9A91\">123456</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> \\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">rabbitmq:3.13-management</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_3、启用联邦插件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3、启用联邦插件\"><span>3、启用联邦插件</span></a></h2>\n<p>在上游、下游节点中都需要开启。</p>\n<p>Docker容器中的RabbitMQ已经开启了rabbitmq_federation，还需要开启rabbitmq_federation_management</p>\n<div class=\"language-shell line-numbers-mode\" data-ext=\"shell\" data-title=\"shell\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">rabbitmq-plugins</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> enable</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> rabbitmq_federation</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">rabbitmq-plugins</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> enable</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> rabbitmq_federation_management</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>rabbitmq_federation_management插件启用后会在Management UI的Admin选项卡下看到：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425152627455.png\" alt=\"image-20240425152627455\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425152627455</figcaption></figure>\n<h2 id=\"_4、添加上游连接端点\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4、添加上游连接端点\"><span>4、添加上游连接端点</span></a></h2>\n<p>在下游节点填写上游节点的连接信息：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425164430500.png\" alt=\"image-20240425164430500\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425164430500</figcaption></figure>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425170737126.png\" alt=\"image-20240425170737126\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425170737126</figcaption></figure>\n<h2 id=\"_5、创建控制策略\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5、创建控制策略\"><span>5、创建控制策略</span></a></h2>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425164648385.png\" alt=\"image-20240425164648385\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425164648385</figcaption></figure>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425165531899.png\" alt=\"image-20240425165531899\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425165531899</figcaption></figure>\n<h2 id=\"_6、测试\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6、测试\"><span>6、测试</span></a></h2>\n<h3 id=\"_1测试计划\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1测试计划\"><span>①测试计划</span></a></h3>\n<p><span style=\"color:blue;\"><strong>特别提示</strong></span>：</p>\n<ul>\n<li>普通交换机和联邦交换机名称要一致</li>\n<li>交换机名称要能够和策略正则表达式匹配上</li>\n<li>发送消息时，两边使用的路由键也要一致</li>\n<li>队列名称不要求一致</li>\n</ul>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425170044297.png\" alt=\"image-20240425170044297\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425170044297</figcaption></figure>\n<h3 id=\"_2创建组件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2创建组件\"><span>②创建组件</span></a></h3>\n<table>\n<thead>\n<tr>\n<th>所在机房</th>\n<th>交换机名称</th>\n<th>路由键</th>\n<th>队列名称</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>深圳机房（上游）</td>\n<td>federated.exchange.demo</td>\n<td>routing.key.demo.test</td>\n<td>queue.normal.shenzhen</td>\n</tr>\n<tr>\n<td>上海机房（下游）</td>\n<td>federated.exchange.demo</td>\n<td>routing.key.demo.test</td>\n<td>queue.normal.shanghai</td>\n</tr>\n</tbody>\n</table>\n<p>创建组件后可以查看一下联邦状态，连接成功的联邦状态如下：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425170652201.png\" alt=\"image-20240425170652201\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425170652201</figcaption></figure>\n<h3 id=\"_3发布消息执行测试\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3发布消息执行测试\"><span>③发布消息执行测试</span></a></h3>\n<p>在上游节点向交换机发布消息：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425171228928.png\" alt=\"image-20240425171228928\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425171228928</figcaption></figure>\n<p>看到下游节点接收到了消息：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425171308430.png\" alt=\"image-20240425171308430\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425171308430</figcaption></figure>\n<h1 id=\"三、federation队列\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#三、federation队列\"><span>三、Federation队列</span></a></h1>\n<h2 id=\"_1、总体说明-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1、总体说明-1\"><span>1、总体说明</span></a></h2>\n<p>Federation队列和Federation交换机的最核心区别就是：</p>\n<ul>\n<li>Federation Police作用在交换机上，就是Federation交换机</li>\n<li>Federation Police作用在队列上，就是Federation队列</li>\n</ul>\n<h2 id=\"_2、创建控制策略\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2、创建控制策略\"><span>2、创建控制策略</span></a></h2>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425171911774.png\" alt=\"image-20240425171911774\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425171911774</figcaption></figure>\n<h2 id=\"_3、测试\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3、测试\"><span>3、测试</span></a></h2>\n<h3 id=\"_1测试计划-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1测试计划-1\"><span>①测试计划</span></a></h3>\n<p>上游节点和下游节点中队列名称是相同的，只是下游队列中的节点附加了联邦策略而已</p>\n<table>\n<thead>\n<tr>\n<th>所在机房</th>\n<th>交换机</th>\n<th>路由键</th>\n<th>队列</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>深圳机房（上游）</td>\n<td>exchange.normal.shenzhen</td>\n<td>routing.key.normal.shenzhen</td>\n<td>fed.queue.demo</td>\n</tr>\n<tr>\n<td>上海机房（下游）</td>\n<td>——</td>\n<td>——</td>\n<td>fed.queue.demo</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"_2创建组件-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2创建组件-1\"><span>②创建组件</span></a></h3>\n<p>上游节点都是常规操作，此处省略。重点需要关注的是下游节点的联邦队列创建时需要指定相关参数：</p>\n<p>创建组件后可以查看一下联邦状态，连接成功的联邦状态如下：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425172528528.png\" alt=\"image-20240425172528528\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425172528528</figcaption></figure>\n<h3 id=\"_3执行测试\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3执行测试\"><span>③执行测试</span></a></h3>\n<p>在上游节点向交换机发布消息：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425172625339.png\" alt=\"image-20240425172625339\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425172625339</figcaption></figure>\n<p>但此时发现下游节点中联邦队列并没有接收到消息，这是为什么呢？这里就体现出了联邦队列和联邦交换机工作逻辑的区别。</p>\n<p>对联邦队列来说，如果没有监听联邦队列的消费端程序，它是不会到上游去拉取消息的！</p>\n<p>如果有消费端监听联邦队列，那么首先消费联邦队列自身的消息；如果联邦队列为空，<span style=\"color:blue;\"><strong>这时候才</strong></span>会到上游队列节点中拉取消息。</p>\n<p>所以现在的测试效果需要消费端程序配合才能看到：</p>\n<figure><img src=\"@source/notes/MQ/RabbitMQ/assets/image-20240425182437573.png\" alt=\"image-20240425182437573\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240425182437573</figcaption></figure>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"Federation插件的设计目标是使RabbitMQ在不同的Broker节点之间进行消息传递而无须建立集群。\n\n它可以在不同的管理域中的Broker或集群间传递消息，这些管理域可能设置了不同的用户和vhost，也可能运行在不同版本的RabbitMQ和Erlang上。Federation基于AMQP 0-9-1协议在不同的Broker之间进行通信，并且设计成能够容忍不稳定的网络连接情况。\n\n# 二、Federation交换机\n\n## 1、总体说明\n\n- 各节点操作：启用联邦插件\n- 下游操作：\n  - 添加上游连接端点\n  - 创建控制策略\n\n\n\n## 2、准备工作\n\n为了执行相关测试，我们使用Docker创建两个RabbitMQ实例。\n\n<span style=\"color:blue;\">**特别提示**</span>：由于Federation机制的最大特点就是跨集群同步数据，所以这两个Docker容器中的RabbitMQ实例不加入集群！！！是两个<span style=\"color:blue;\">**独立的broker实例**</span>。\n\n```shell\ndocker run -d \\\n--name rabbitmq-shenzhen \\\n-p 51000:5672 \\\n-p 52000:15672 \\\n-v rabbitmq-plugin:/plugins \\\n-e RABBITMQ_DEFAULT_USER=guest \\\n-e RABBITMQ_DEFAULT_PASS=123456 \\\nrabbitmq:3.13-management\n\ndocker run -d \\\n--name rabbitmq-shanghai \\\n-p 61000:5672 \\\n-p 62000:15672 \\\n-v rabbitmq-plugin:/plugins \\\n-e RABBITMQ_DEFAULT_USER=guest \\\n-e RABBITMQ_DEFAULT_PASS=123456 \\\nrabbitmq:3.13-management\n```\n\n\n\n## 3、启用联邦插件\n\n在上游、下游节点中都需要开启。\n\nDocker容器中的RabbitMQ已经开启了rabbitmq_federation，还需要开启rabbitmq_federation_management\n\n```shell\nrabbitmq-plugins enable rabbitmq_federation\nrabbitmq-plugins enable rabbitmq_federation_management\n```\n\nrabbitmq_federation_management插件启用后会在Management UI的Admin选项卡下看到：\n\n![image-20240425152627455](./assets/image-20240425152627455.png)\n\n\n\n## 4、添加上游连接端点\n\n在下游节点填写上游节点的连接信息：\n\n![image-20240425164430500](./assets/image-20240425164430500.png)\n\n\n\n![image-20240425170737126](./assets/image-20240425170737126.png)\n\n\n\n\n\n## 5、创建控制策略\n\n![image-20240425164648385](./assets/image-20240425164648385.png)\n\n\n\n![image-20240425165531899](./assets/image-20240425165531899.png)\n\n\n\n\n\n## 6、测试\n\n### ①测试计划\n\n<span style=\"color:blue;\">**特别提示**</span>：\n\n- 普通交换机和联邦交换机名称要一致\n- 交换机名称要能够和策略正则表达式匹配上\n- 发送消息时，两边使用的路由键也要一致\n- 队列名称不要求一致\n\n![image-20240425170044297](./assets/image-20240425170044297.png)\n\n\n\n### ②创建组件\n\n| 所在机房         | 交换机名称              | 路由键                | 队列名称              |\n| ---------------- | ----------------------- | --------------------- | --------------------- |\n| 深圳机房（上游） | federated.exchange.demo | routing.key.demo.test | queue.normal.shenzhen |\n| 上海机房（下游） | federated.exchange.demo | routing.key.demo.test | queue.normal.shanghai |\n\n创建组件后可以查看一下联邦状态，连接成功的联邦状态如下：\n\n![image-20240425170652201](./assets/image-20240425170652201.png)\n\n\n\n### ③发布消息执行测试\n\n在上游节点向交换机发布消息：\n\n![image-20240425171228928](./assets/image-20240425171228928.png)\n\n\n\n看到下游节点接收到了消息：\n\n![image-20240425171308430](./assets/image-20240425171308430.png)\n\n\n\n# 三、Federation队列\n\n## 1、总体说明\n\nFederation队列和Federation交换机的最核心区别就是：\n\n- Federation Police作用在交换机上，就是Federation交换机\n- Federation Police作用在队列上，就是Federation队列\n\n\n\n## 2、创建控制策略\n\n![image-20240425171911774](./assets/image-20240425171911774.png)\n\n\n\n## 3、测试\n\n### ①测试计划\n\n上游节点和下游节点中队列名称是相同的，只是下游队列中的节点附加了联邦策略而已\n\n| 所在机房         | 交换机                   | 路由键                      | 队列           |\n| ---------------- | ------------------------ | --------------------------- | -------------- |\n| 深圳机房（上游） | exchange.normal.shenzhen | routing.key.normal.shenzhen | fed.queue.demo |\n| 上海机房（下游） | ——                       | ——                          | fed.queue.demo |\n\n\n\n### ②创建组件\n\n上游节点都是常规操作，此处省略。重点需要关注的是下游节点的联邦队列创建时需要指定相关参数：\n\n创建组件后可以查看一下联邦状态，连接成功的联邦状态如下：\n\n![image-20240425172528528](./assets/image-20240425172528528.png)\n\n\n\n### ③执行测试\n\n在上游节点向交换机发布消息：\n\n![image-20240425172625339](./assets/image-20240425172625339.png)\n\n\n\n但此时发现下游节点中联邦队列并没有接收到消息，这是为什么呢？这里就体现出了联邦队列和联邦交换机工作逻辑的区别。\n\n对联邦队列来说，如果没有监听联邦队列的消费端程序，它是不会到上游去拉取消息的！\n\n如果有消费端监听联邦队列，那么首先消费联邦队列自身的消息；如果联邦队列为空，<span style=\"color:blue;\">**这时候才**</span>会到上游队列节点中拉取消息。\n\n所以现在的测试效果需要消费端程序配合才能看到：\n\n![image-20240425182437573](./assets/image-20240425182437573.png)","excerpt":"","includedFiles":[],"tasklists":0,"title":"二、Federation交换机","headers":[{"level":2,"title":"1、总体说明","slug":"_1、总体说明","link":"#_1、总体说明","children":[]},{"level":2,"title":"2、准备工作","slug":"_2、准备工作","link":"#_2、准备工作","children":[]},{"level":2,"title":"3、启用联邦插件","slug":"_3、启用联邦插件","link":"#_3、启用联邦插件","children":[]},{"level":2,"title":"4、添加上游连接端点","slug":"_4、添加上游连接端点","link":"#_4、添加上游连接端点","children":[]},{"level":2,"title":"5、创建控制策略","slug":"_5、创建控制策略","link":"#_5、创建控制策略","children":[]},{"level":2,"title":"6、测试","slug":"_6、测试","link":"#_6、测试","children":[{"level":3,"title":"①测试计划","slug":"_1测试计划","link":"#_1测试计划","children":[]},{"level":3,"title":"②创建组件","slug":"_2创建组件","link":"#_2创建组件","children":[]},{"level":3,"title":"③发布消息执行测试","slug":"_3发布消息执行测试","link":"#_3发布消息执行测试","children":[]}]},{"level":2,"title":"1、总体说明","slug":"_1、总体说明-1","link":"#_1、总体说明-1","children":[]},{"level":2,"title":"2、创建控制策略","slug":"_2、创建控制策略","link":"#_2、创建控制策略","children":[]},{"level":2,"title":"3、测试","slug":"_3、测试","link":"#_3、测试","children":[{"level":3,"title":"①测试计划","slug":"_1测试计划-1","link":"#_1测试计划-1","children":[]},{"level":3,"title":"②创建组件","slug":"_2创建组件-1","link":"#_2创建组件-1","children":[]},{"level":3,"title":"③执行测试","slug":"_3执行测试","link":"#_3执行测试","children":[]}]}]}}
