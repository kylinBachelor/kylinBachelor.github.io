{"content":"<h1 id=\"搭建docker仓库私服-harbor\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#搭建docker仓库私服-harbor\"><span>搭建Docker仓库私服（Harbor）</span></a></h1>\n<blockquote>\n<p>=== Docker私服使用Docker环境搭建的，首先需要有Docker环境</p>\n</blockquote>\n<p>很多时候，开发者本地是没有Docker的，但是可以使用远程的Docker服务来build镜像，通过远程Docker服务将本地镜像推送到 <strong>Harbor</strong> 仓库私服。</p>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705125934120.png\" alt=\"image-20240705125934120\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705125934120</figcaption></figure>\n<h2 id=\"_1-安装docker\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-安装docker\"><span>1. 安装Docker</span></a></h2>\n<blockquote>\n<p>=== 保证机器可以访问外网</p>\n</blockquote>\n<ol>\n<li>\n<p>安装gcc\nyum -y install gcc</p>\n</li>\n<li>\n<p>安装c++\nyum -y install gcc-c++</p>\n</li>\n<li>\n<p>安装包管理\nsudo yum install -y yum-utils</p>\n</li>\n<li>\n<p>设置仓库\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</p>\n</li>\n<li>\n<p>更新yum软件包索引\nyum makecache fast</p>\n</li>\n<li>\n<p>安装docker 引擎\nsudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</p>\n</li>\n<li>\n<p>启动Docker\nsystemctl start docker</p>\n</li>\n<li>\n<p>查看Docker版本\ndocker version</p>\n</li>\n<li>\n<p>校验Docker Engine 是否安装成功\ndocker run hello-world</p>\n</li>\n<li>\n<p>配置阿里云镜像加速器 https://cr.console.aliyun.com/cn-beijing/instances/mirrors\n阿里云中有容器镜像服务，创建一个个人版本的就可以,针对Docker客户端版本大于 1.10.0 的用户,您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705124456342.png\" alt=\"image-20240705124456342\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705124456342</figcaption></figure>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705124612056.png\" alt=\"image-20240705124612056\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705124612056</figcaption></figure>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705124631737.png\" alt=\"image-20240705124631737\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705124631737</figcaption></figure>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">sudo</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> mkdir</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -p</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /etc/docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">sudo</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> tee</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /etc/docker/daemon.json</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;-</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'EOF'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">  \"registry-mirrors\": [\"https://cfst52be.mirror.aliyuncs.com\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">EOF</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">sudo</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> daemon-reload</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">sudo</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> restart</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 感觉restart不管用，最好是stop之后再start</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ol>\n<h2 id=\"_2-开启docker-remote-api\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-开启docker-remote-api\"><span>2. 开启Docker Remote Api</span></a></h2>\n<blockquote>\n<p>=== Docker RemoteAPI是为了保证其它机器能够通过url访问到Docker提供的服务（例如：build、push）</p>\n</blockquote>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">vim</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /usr/lib/systemd/system/docker.service</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">#14 行 修改为</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">ExecStart</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">/usr/bin/dockerd</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> -H</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> tcp://0.0.0.0:2375</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -H</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> unix://var/run/docker.sock</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 重新加载配置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> daemon-reload</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 重启Docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> restart</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>初始化镜像（pigx官方给的，应该不初始化也行）</p>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> pull</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> java:8-jre</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> pull</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> pig4cloud/java:8-jre</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_3-安装docker-compose\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-安装docker-compose\"><span>3. 安装docker-compose</span></a></h2>\n<p>将提供的 <strong>docker-compose-Linux-x86_64</strong> 文件拷贝至相应位置即可</p>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">mv</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker-compose-Linux-x86_64</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /usr/local/bin/docker-compose</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">chmod</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> +x</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /usr/local/bin/docker-compose</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_4-安装harbor\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-安装harbor\"><span>4. 安装Harbor</span></a></h2>\n<blockquote>\n<p>=== 前提：已经安装完成docker-compose</p>\n</blockquote>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 前提条件 已安装docker-compose</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 解压harbor 离线包</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> tar</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -zxvf</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> harbor-offline-installer-v1.9.3.tgz</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 修改 harbor.yml hostname配置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> vim</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> harbor.yml</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 执行安装</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> sh</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> install.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 重启 docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> restart</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 重启 harbor 建议先关闭再重启</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> docker-compose</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> stop</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> docker-compose</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> start</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>hostname配置不能是 localhost 或者 127.0.0.1 必须是具体的ip地址或者域名</p>\n<p><strong>harbor.yml</strong> 也可配置端口（默认80），登录密码等信息，可自行调整</p>\n</div>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p>sh install.sh 其实是安装了harbor所需的docker镜像</p>\n</div>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p><strong>建议重启时使用docker-compose命令</strong></p>\n</div>\n<h2 id=\"_5-配置docker连接私服\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-配置docker连接私服\"><span>5. 配置Docker连接私服</span></a></h2>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">vim</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /etc/docker/daemon.json</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 修改insecure-registries 的IP, insecure-registries 即为 harbor的地址，如果安装时更改了端口则是:  ip:端口</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">\"registry-mirrors\"</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">:</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">[</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">\"https://3wzyb32e.mirror.aliyuncs.com\"</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">],</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">\"insecure-registries\"</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">:</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">[</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">\"192.168.1.100\"</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">]}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 更新配置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> daemon-reload</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 重启docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> restart</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 重启harbor</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker-compose</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> stop</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker-compose</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> start</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p>正常来说，Docker服务 和 Harbor仓库 可以不在一个服务器，通过该配置将Docker连接到Harbor私服，为了可以push到Harbor仓库</p>\n</div>\n<h2 id=\"_6-具体操作生成镜像-推送私服-仅对于pigx这个框架来说\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-具体操作生成镜像-推送私服-仅对于pigx这个框架来说\"><span>6. 具体操作生成镜像，推送私服（仅对于pigx这个框架来说）</span></a></h2>\n<blockquote>\n<p>=== 首先得配置好 <strong>Dockerfile</strong> , 这里不作阐述，我也没研究过</p>\n</blockquote>\n<p>配置 Docker 服务地址 和 Harbor地址</p>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705135534009.png\" alt=\"image-20240705135534009\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705135534009</figcaption></figure>\n<h3 id=\"_6-1-idea方式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-1-idea方式\"><span>6.1 IDEA方式</span></a></h3>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705135633621.png\" alt=\"image-20240705135633621\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705135633621</figcaption></figure>\n<h3 id=\"_6-2-maven-fabric8-docker-构建插件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-2-maven-fabric8-docker-构建插件\"><span>6.2 maven fabric8 docker 构建插件</span></a></h3>\n<blockquote>\n<p>=== 即命令行的方式，需要构建哪个模块，相应的目录就是对应模块的pom.xml同一个目录（biz）</p>\n</blockquote>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">cd</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> pigx-upms/pigx-upms-biz/</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">mvn</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> install</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker:build</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">mvn</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker:push</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>使用远程服务的前提是远程Docker服务必须登录至Harbor才能进行push操作</p>\n<p>需要在Docker端服务器登录Harbor,登录方式如下：</p>\n<p>​\tdocker login harbor的ip地址:harbor的端口</p>\n<p>然后输入harbor的登录用户和密码即可</p>\n</div>\n","env":{"base":"/","filePath":"C:/Users/kylinBachelor/Desktop/kylinBachelor.github.io/docs/notes/Docker/搭建Docker仓库私服/index.md","filePathRelative":"notes/Docker/搭建Docker仓库私服/index.md","frontmatter":{},"sfcBlocks":{"template":{"type":"template","content":"<template><h1 id=\"搭建docker仓库私服-harbor\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#搭建docker仓库私服-harbor\"><span>搭建Docker仓库私服（Harbor）</span></a></h1>\n<blockquote>\n<p>=== Docker私服使用Docker环境搭建的，首先需要有Docker环境</p>\n</blockquote>\n<p>很多时候，开发者本地是没有Docker的，但是可以使用远程的Docker服务来build镜像，通过远程Docker服务将本地镜像推送到 <strong>Harbor</strong> 仓库私服。</p>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705125934120.png\" alt=\"image-20240705125934120\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705125934120</figcaption></figure>\n<h2 id=\"_1-安装docker\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-安装docker\"><span>1. 安装Docker</span></a></h2>\n<blockquote>\n<p>=== 保证机器可以访问外网</p>\n</blockquote>\n<ol>\n<li>\n<p>安装gcc\nyum -y install gcc</p>\n</li>\n<li>\n<p>安装c++\nyum -y install gcc-c++</p>\n</li>\n<li>\n<p>安装包管理\nsudo yum install -y yum-utils</p>\n</li>\n<li>\n<p>设置仓库\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</p>\n</li>\n<li>\n<p>更新yum软件包索引\nyum makecache fast</p>\n</li>\n<li>\n<p>安装docker 引擎\nsudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</p>\n</li>\n<li>\n<p>启动Docker\nsystemctl start docker</p>\n</li>\n<li>\n<p>查看Docker版本\ndocker version</p>\n</li>\n<li>\n<p>校验Docker Engine 是否安装成功\ndocker run hello-world</p>\n</li>\n<li>\n<p>配置阿里云镜像加速器 https://cr.console.aliyun.com/cn-beijing/instances/mirrors\n阿里云中有容器镜像服务，创建一个个人版本的就可以,针对Docker客户端版本大于 1.10.0 的用户,您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705124456342.png\" alt=\"image-20240705124456342\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705124456342</figcaption></figure>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705124612056.png\" alt=\"image-20240705124612056\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705124612056</figcaption></figure>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705124631737.png\" alt=\"image-20240705124631737\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705124631737</figcaption></figure>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">sudo</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> mkdir</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -p</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /etc/docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">sudo</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> tee</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /etc/docker/daemon.json</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;-</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'EOF'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">  \"registry-mirrors\": [\"https://cfst52be.mirror.aliyuncs.com\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">EOF</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">sudo</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> daemon-reload</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">sudo</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> restart</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 感觉restart不管用，最好是stop之后再start</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ol>\n<h2 id=\"_2-开启docker-remote-api\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-开启docker-remote-api\"><span>2. 开启Docker Remote Api</span></a></h2>\n<blockquote>\n<p>=== Docker RemoteAPI是为了保证其它机器能够通过url访问到Docker提供的服务（例如：build、push）</p>\n</blockquote>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">vim</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /usr/lib/systemd/system/docker.service</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">#14 行 修改为</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">ExecStart</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">/usr/bin/dockerd</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> -H</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> tcp://0.0.0.0:2375</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -H</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> unix://var/run/docker.sock</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 重新加载配置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> daemon-reload</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 重启Docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> restart</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>初始化镜像（pigx官方给的，应该不初始化也行）</p>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> pull</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> java:8-jre</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> pull</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> pig4cloud/java:8-jre</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_3-安装docker-compose\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-安装docker-compose\"><span>3. 安装docker-compose</span></a></h2>\n<p>将提供的 <strong>docker-compose-Linux-x86_64</strong> 文件拷贝至相应位置即可</p>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">mv</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker-compose-Linux-x86_64</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /usr/local/bin/docker-compose</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">chmod</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> +x</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /usr/local/bin/docker-compose</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_4-安装harbor\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-安装harbor\"><span>4. 安装Harbor</span></a></h2>\n<blockquote>\n<p>=== 前提：已经安装完成docker-compose</p>\n</blockquote>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 前提条件 已安装docker-compose</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 解压harbor 离线包</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> tar</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -zxvf</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> harbor-offline-installer-v1.9.3.tgz</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 修改 harbor.yml hostname配置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> vim</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> harbor.yml</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 执行安装</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> sh</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> install.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 重启 docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> restart</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 重启 harbor 建议先关闭再重启</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> docker-compose</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> stop</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> docker-compose</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> start</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>hostname配置不能是 localhost 或者 127.0.0.1 必须是具体的ip地址或者域名</p>\n<p><strong>harbor.yml</strong> 也可配置端口（默认80），登录密码等信息，可自行调整</p>\n</div>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p>sh install.sh 其实是安装了harbor所需的docker镜像</p>\n</div>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p><strong>建议重启时使用docker-compose命令</strong></p>\n</div>\n<h2 id=\"_5-配置docker连接私服\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-配置docker连接私服\"><span>5. 配置Docker连接私服</span></a></h2>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">vim</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /etc/docker/daemon.json</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 修改insecure-registries 的IP, insecure-registries 即为 harbor的地址，如果安装时更改了端口则是:  ip:端口</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">\"registry-mirrors\"</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">:</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">[</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">\"https://3wzyb32e.mirror.aliyuncs.com\"</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">],</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">\"insecure-registries\"</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">:</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">[</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">\"192.168.1.100\"</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">]}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 更新配置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> daemon-reload</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 重启docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> restart</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 重启harbor</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker-compose</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> stop</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker-compose</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> start</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p>正常来说，Docker服务 和 Harbor仓库 可以不在一个服务器，通过该配置将Docker连接到Harbor私服，为了可以push到Harbor仓库</p>\n</div>\n<h2 id=\"_6-具体操作生成镜像-推送私服-仅对于pigx这个框架来说\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-具体操作生成镜像-推送私服-仅对于pigx这个框架来说\"><span>6. 具体操作生成镜像，推送私服（仅对于pigx这个框架来说）</span></a></h2>\n<blockquote>\n<p>=== 首先得配置好 <strong>Dockerfile</strong> , 这里不作阐述，我也没研究过</p>\n</blockquote>\n<p>配置 Docker 服务地址 和 Harbor地址</p>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705135534009.png\" alt=\"image-20240705135534009\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705135534009</figcaption></figure>\n<h3 id=\"_6-1-idea方式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-1-idea方式\"><span>6.1 IDEA方式</span></a></h3>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705135633621.png\" alt=\"image-20240705135633621\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705135633621</figcaption></figure>\n<h3 id=\"_6-2-maven-fabric8-docker-构建插件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-2-maven-fabric8-docker-构建插件\"><span>6.2 maven fabric8 docker 构建插件</span></a></h3>\n<blockquote>\n<p>=== 即命令行的方式，需要构建哪个模块，相应的目录就是对应模块的pom.xml同一个目录（biz）</p>\n</blockquote>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">cd</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> pigx-upms/pigx-upms-biz/</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">mvn</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> install</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker:build</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">mvn</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker:push</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>使用远程服务的前提是远程Docker服务必须登录至Harbor才能进行push操作</p>\n<p>需要在Docker端服务器登录Harbor,登录方式如下：</p>\n<p>​\tdocker login harbor的ip地址:harbor的端口</p>\n<p>然后输入harbor的登录用户和密码即可</p>\n</div>\n</template>","contentStripped":"<h1 id=\"搭建docker仓库私服-harbor\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#搭建docker仓库私服-harbor\"><span>搭建Docker仓库私服（Harbor）</span></a></h1>\n<blockquote>\n<p>=== Docker私服使用Docker环境搭建的，首先需要有Docker环境</p>\n</blockquote>\n<p>很多时候，开发者本地是没有Docker的，但是可以使用远程的Docker服务来build镜像，通过远程Docker服务将本地镜像推送到 <strong>Harbor</strong> 仓库私服。</p>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705125934120.png\" alt=\"image-20240705125934120\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705125934120</figcaption></figure>\n<h2 id=\"_1-安装docker\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-安装docker\"><span>1. 安装Docker</span></a></h2>\n<blockquote>\n<p>=== 保证机器可以访问外网</p>\n</blockquote>\n<ol>\n<li>\n<p>安装gcc\nyum -y install gcc</p>\n</li>\n<li>\n<p>安装c++\nyum -y install gcc-c++</p>\n</li>\n<li>\n<p>安装包管理\nsudo yum install -y yum-utils</p>\n</li>\n<li>\n<p>设置仓库\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</p>\n</li>\n<li>\n<p>更新yum软件包索引\nyum makecache fast</p>\n</li>\n<li>\n<p>安装docker 引擎\nsudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</p>\n</li>\n<li>\n<p>启动Docker\nsystemctl start docker</p>\n</li>\n<li>\n<p>查看Docker版本\ndocker version</p>\n</li>\n<li>\n<p>校验Docker Engine 是否安装成功\ndocker run hello-world</p>\n</li>\n<li>\n<p>配置阿里云镜像加速器 https://cr.console.aliyun.com/cn-beijing/instances/mirrors\n阿里云中有容器镜像服务，创建一个个人版本的就可以,针对Docker客户端版本大于 1.10.0 的用户,您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705124456342.png\" alt=\"image-20240705124456342\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705124456342</figcaption></figure>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705124612056.png\" alt=\"image-20240705124612056\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705124612056</figcaption></figure>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705124631737.png\" alt=\"image-20240705124631737\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705124631737</figcaption></figure>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">sudo</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> mkdir</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -p</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /etc/docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">sudo</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> tee</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /etc/docker/daemon.json</span><span style=\"--shiki-light:#AB5959;--shiki-dark:#CB7676\"> &#x3C;&#x3C;-</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'EOF'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">  \"registry-mirrors\": [\"https://cfst52be.mirror.aliyuncs.com\"]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">EOF</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">sudo</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> daemon-reload</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">sudo</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> restart</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker</span><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 感觉restart不管用，最好是stop之后再start</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ol>\n<h2 id=\"_2-开启docker-remote-api\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-开启docker-remote-api\"><span>2. 开启Docker Remote Api</span></a></h2>\n<blockquote>\n<p>=== Docker RemoteAPI是为了保证其它机器能够通过url访问到Docker提供的服务（例如：build、push）</p>\n</blockquote>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">vim</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /usr/lib/systemd/system/docker.service</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\">#14 行 修改为</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\">ExecStart</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">/usr/bin/dockerd</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> -H</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> tcp://0.0.0.0:2375</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -H</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> unix://var/run/docker.sock</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 重新加载配置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> daemon-reload</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 重启Docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> restart</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>初始化镜像（pigx官方给的，应该不初始化也行）</p>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> pull</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> java:8-jre</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> pull</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> pig4cloud/java:8-jre</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_3-安装docker-compose\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-安装docker-compose\"><span>3. 安装docker-compose</span></a></h2>\n<p>将提供的 <strong>docker-compose-Linux-x86_64</strong> 文件拷贝至相应位置即可</p>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">mv</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker-compose-Linux-x86_64</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /usr/local/bin/docker-compose</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">chmod</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> +x</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /usr/local/bin/docker-compose</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"_4-安装harbor\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-安装harbor\"><span>4. 安装Harbor</span></a></h2>\n<blockquote>\n<p>=== 前提：已经安装完成docker-compose</p>\n</blockquote>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 前提条件 已安装docker-compose</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 解压harbor 离线包</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> tar</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -zxvf</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> harbor-offline-installer-v1.9.3.tgz</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 修改 harbor.yml hostname配置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> vim</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> harbor.yml</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 执行安装</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> sh</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> install.sh</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 重启 docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> restart</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"> # 重启 harbor 建议先关闭再重启</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> docker-compose</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> stop</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\"> docker-compose</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> start</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>hostname配置不能是 localhost 或者 127.0.0.1 必须是具体的ip地址或者域名</p>\n<p><strong>harbor.yml</strong> 也可配置端口（默认80），登录密码等信息，可自行调整</p>\n</div>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p>sh install.sh 其实是安装了harbor所需的docker镜像</p>\n</div>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p><strong>建议重启时使用docker-compose命令</strong></p>\n</div>\n<h2 id=\"_5-配置docker连接私服\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-配置docker连接私服\"><span>5. 配置Docker连接私服</span></a></h2>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">vim</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /etc/docker/daemon.json</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 修改insecure-registries 的IP, insecure-registries 即为 harbor的地址，如果安装时更改了端口则是:  ip:端口</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">{</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">\"registry-mirrors\"</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">:</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">[</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">\"https://3wzyb32e.mirror.aliyuncs.com\"</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">],</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">\"insecure-registries\"</span><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">:</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">[</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">\"192.168.1.100\"</span><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">]}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 更新配置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> daemon-reload</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 重启docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">systemctl</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> restart</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0ADA0;--shiki-dark:#758575DD\"># 重启harbor</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker-compose</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> stop</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">docker-compose</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> start</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p>正常来说，Docker服务 和 Harbor仓库 可以不在一个服务器，通过该配置将Docker连接到Harbor私服，为了可以push到Harbor仓库</p>\n</div>\n<h2 id=\"_6-具体操作生成镜像-推送私服-仅对于pigx这个框架来说\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-具体操作生成镜像-推送私服-仅对于pigx这个框架来说\"><span>6. 具体操作生成镜像，推送私服（仅对于pigx这个框架来说）</span></a></h2>\n<blockquote>\n<p>=== 首先得配置好 <strong>Dockerfile</strong> , 这里不作阐述，我也没研究过</p>\n</blockquote>\n<p>配置 Docker 服务地址 和 Harbor地址</p>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705135534009.png\" alt=\"image-20240705135534009\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705135534009</figcaption></figure>\n<h3 id=\"_6-1-idea方式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-1-idea方式\"><span>6.1 IDEA方式</span></a></h3>\n<figure><img src=\"@source/notes/Docker/搭建Docker仓库私服/assets/image-20240705135633621.png\" alt=\"image-20240705135633621\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240705135633621</figcaption></figure>\n<h3 id=\"_6-2-maven-fabric8-docker-构建插件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_6-2-maven-fabric8-docker-构建插件\"><span>6.2 maven fabric8 docker 构建插件</span></a></h3>\n<blockquote>\n<p>=== 即命令行的方式，需要构建哪个模块，相应的目录就是对应模块的pom.xml同一个目录（biz）</p>\n</blockquote>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#998418;--shiki-dark:#B8A965\">cd</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> pigx-upms/pigx-upms-biz/</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">mvn</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> install</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker:build</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">mvn</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> docker:push</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>使用远程服务的前提是远程Docker服务必须登录至Harbor才能进行push操作</p>\n<p>需要在Docker端服务器登录Harbor,登录方式如下：</p>\n<p>​\tdocker login harbor的ip地址:harbor的端口</p>\n<p>然后输入harbor的登录用户和密码即可</p>\n</div>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n# 搭建Docker仓库私服（Harbor）\r\n\r\n> === Docker私服使用Docker环境搭建的，首先需要有Docker环境\r\n\r\n很多时候，开发者本地是没有Docker的，但是可以使用远程的Docker服务来build镜像，通过远程Docker服务将本地镜像推送到 **Harbor** 仓库私服。\r\n\r\n![image-20240705125934120](./assets/image-20240705125934120.png)\r\n\r\n## 1. 安装Docker\r\n\r\n> === 保证机器可以访问外网\r\n\r\n1. 安装gcc\r\n    yum -y install gcc\r\n\r\n2. 安装c++\r\n    yum -y install gcc-c++\r\n\r\n3. 安装包管理\r\n    sudo yum install -y yum-utils\r\n\r\n4. 设置仓库\r\n    yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\r\n\r\n5. 更新yum软件包索引\r\n    yum makecache fast\r\n\r\n6. 安装docker 引擎\r\n    sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\r\n\r\n7. 启动Docker\r\n    systemctl start docker\r\n\r\n8. 查看Docker版本\r\n    docker version\r\n\r\n9. 校验Docker Engine 是否安装成功\r\n    docker run hello-world\r\n\r\n10. 配置阿里云镜像加速器 https://cr.console.aliyun.com/cn-beijing/instances/mirrors\r\n    阿里云中有容器镜像服务，创建一个个人版本的就可以,针对Docker客户端版本大于 1.10.0 的用户,您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器\r\n\r\n    ![image-20240705124456342](./assets/image-20240705124456342.png)\r\n\r\n    ![image-20240705124612056](./assets/image-20240705124612056.png)\r\n\r\n    ![image-20240705124631737](./assets/image-20240705124631737.png)\r\n\r\n    ```sh\r\n    sudo mkdir -p /etc/docker\r\n    sudo tee /etc/docker/daemon.json <<-'EOF'\r\n    {\r\n      \"registry-mirrors\": [\"https://cfst52be.mirror.aliyuncs.com\"]\r\n    }\r\n    EOF\r\n    sudo systemctl daemon-reload\r\n    sudo systemctl restart docker # 感觉restart不管用，最好是stop之后再start\r\n    ```\r\n\r\n\r\n## 2. 开启Docker Remote Api\r\n\r\n> === Docker RemoteAPI是为了保证其它机器能够通过url访问到Docker提供的服务（例如：build、push）\r\n\r\n```sh\r\nvim /usr/lib/systemd/system/docker.service\r\n\r\n#14 行 修改为\r\n\r\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock\r\n\r\n# 重新加载配置\r\nsystemctl daemon-reload\r\n\r\n# 重启Docker\r\nsystemctl restart docker\r\n```\r\n\r\n初始化镜像（pigx官方给的，应该不初始化也行）\r\n\r\n```sh\r\ndocker pull java:8-jre\r\ndocker pull pig4cloud/java:8-jre\r\n```\r\n\r\n\r\n\r\n## 3. 安装docker-compose\r\n\r\n将提供的 **docker-compose-Linux-x86_64** 文件拷贝至相应位置即可\r\n\r\n```sh\r\nmv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose\r\nchmod +x /usr/local/bin/docker-compose\r\n```\r\n\r\n## 4. 安装Harbor\r\n\r\n> === 前提：已经安装完成docker-compose\r\n\r\n```sh\r\n# 前提条件 已安装docker-compose\r\n\r\n # 解压harbor 离线包\r\n tar -zxvf harbor-offline-installer-v1.9.3.tgz\r\n\r\n # 修改 harbor.yml hostname配置\r\n vim harbor.yml\r\n\r\n # 执行安装\r\n sh install.sh\r\n \r\n # 重启 docker\r\n systemctl restart docker\r\n # 重启 harbor 建议先关闭再重启\r\n docker-compose stop\r\n docker-compose start\r\n \r\n```\r\n\r\n> [!warning]\r\n>\r\n> hostname配置不能是 localhost 或者 127.0.0.1 必须是具体的ip地址或者域名\r\n>\r\n> **harbor.yml** 也可配置端口（默认80），登录密码等信息，可自行调整\r\n\r\n> [!note]\r\n>\r\n> sh install.sh 其实是安装了harbor所需的docker镜像\r\n\r\n> [!note]\r\n>\r\n> **建议重启时使用docker-compose命令**\r\n\r\n## 5. 配置Docker连接私服\r\n\r\n```sh\r\nvim /etc/docker/daemon.json\r\n\r\n# 修改insecure-registries 的IP, insecure-registries 即为 harbor的地址，如果安装时更改了端口则是:  ip:端口\r\n\r\n{\"registry-mirrors\":[\"https://3wzyb32e.mirror.aliyuncs.com\"],\"insecure-registries\":[\"192.168.1.100\"]}\r\n\r\n# 更新配置\r\nsystemctl daemon-reload\r\n# 重启docker\r\nsystemctl restart docker\r\n# 重启harbor\r\ndocker-compose stop\r\ndocker-compose start\r\n```\r\n\r\n\r\n\r\n> [!note]\r\n>\r\n> 正常来说，Docker服务 和 Harbor仓库 可以不在一个服务器，通过该配置将Docker连接到Harbor私服，为了可以push到Harbor仓库\r\n\r\n\r\n\r\n## 6. 具体操作生成镜像，推送私服（仅对于pigx这个框架来说）\r\n\r\n> === 首先得配置好 **Dockerfile** , 这里不作阐述，我也没研究过\r\n\r\n配置 Docker 服务地址 和 Harbor地址\r\n\r\n![image-20240705135534009](./assets/image-20240705135534009.png)\r\n\r\n### 6.1 IDEA方式\r\n\r\n![image-20240705135633621](./assets/image-20240705135633621.png)\r\n\r\n### 6.2 maven fabric8 docker 构建插件\r\n\r\n> === 即命令行的方式，需要构建哪个模块，相应的目录就是对应模块的pom.xml同一个目录（biz）\r\n\r\n```sh\r\ncd pigx-upms/pigx-upms-biz/\r\n\r\nmvn install docker:build\r\nmvn docker:push\r\n```\r\n\r\n> [!warning]\r\n>\r\n> 使用远程服务的前提是远程Docker服务必须登录至Harbor才能进行push操作\r\n>\r\n> 需要在Docker端服务器登录Harbor,登录方式如下：\r\n>\r\n> ​\tdocker login harbor的ip地址:harbor的端口\r\n>\r\n> 然后输入harbor的登录用户和密码即可","excerpt":"","includedFiles":[],"tasklists":0,"title":"搭建Docker仓库私服（Harbor）","headers":[{"level":2,"title":"1. 安装Docker","slug":"_1-安装docker","link":"#_1-安装docker","children":[]},{"level":2,"title":"2. 开启Docker Remote Api","slug":"_2-开启docker-remote-api","link":"#_2-开启docker-remote-api","children":[]},{"level":2,"title":"3. 安装docker-compose","slug":"_3-安装docker-compose","link":"#_3-安装docker-compose","children":[]},{"level":2,"title":"4. 安装Harbor","slug":"_4-安装harbor","link":"#_4-安装harbor","children":[]},{"level":2,"title":"5. 配置Docker连接私服","slug":"_5-配置docker连接私服","link":"#_5-配置docker连接私服","children":[]},{"level":2,"title":"6. 具体操作生成镜像，推送私服（仅对于pigx这个框架来说）","slug":"_6-具体操作生成镜像-推送私服-仅对于pigx这个框架来说","link":"#_6-具体操作生成镜像-推送私服-仅对于pigx这个框架来说","children":[{"level":3,"title":"6.1 IDEA方式","slug":"_6-1-idea方式","link":"#_6-1-idea方式","children":[]},{"level":3,"title":"6.2 maven fabric8 docker 构建插件","slug":"_6-2-maven-fabric8-docker-构建插件","link":"#_6-2-maven-fabric8-docker-构建插件","children":[]}]}]}}
