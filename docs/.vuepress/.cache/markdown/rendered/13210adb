{"content":"<h1 id=\"dockerfile\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#dockerfile\"><span>Dockerfile</span></a></h1>\n<p>官网（需要翻墙）：https://docs.docker.com/reference/dockerfile/</p>\n<p>中文网： http://www.dockerinfo.net/dockerfile%e4%bb%8b%e7%bb%8d</p>\n<h2 id=\"_1-概述\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-概述\"><span>1. 概述</span></a></h2>\n<blockquote>\n<p>=== Dockerfile 是用来构建 Docker 镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本</p>\n</blockquote>\n<figure><img src=\"@source/notes/Docker/Dockerfile/assets/image-20240709130302870.png\" alt=\"image-20240709130302870\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240709130302870</figcaption></figure>\n<p>示例</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>FROM centos:7</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 配置Java17环境变量</span></span>\n<span class=\"line\"><span>ADD jdk-17_linux-x64_bin.tar /usr/lib/</span></span>\n<span class=\"line\"><span>ENV JAVA_HOME /usr/lib/jdk-17.0.11</span></span>\n<span class=\"line\"><span>ENV CLASSPATH .:${JAVA_HOME}/jre/lib/rt.jar:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar</span></span>\n<span class=\"line\"><span>ENV PATH $PATH:${JAVA_HOME}/bin</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>CMD /bin/bash</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>FROM centos</span></span>\n<span class=\"line\"><span>  </span></span>\n<span class=\"line\"><span>MAINTAINER Linkaiqiang</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>COPY readme.txt /usr/local/readme.txt</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>ADD jdk1.8.0_291.tar.gz /usr/local/</span></span>\n<span class=\"line\"><span>ADD tomcat.tar.gz /usr/local/</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>RUN cd /etc/yum.repos.d/</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>RUN sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*</span></span>\n<span class=\"line\"><span>RUN sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>RUN yum -y install vim wget</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>VOLUME [\"/data1\",\"/data2\"]</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>ENV MYPATH /usr/local</span></span>\n<span class=\"line\"><span>WORKDIR $MYPATH</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>ENV JAVA_HOME /usr/local/jdk1.8.0_291</span></span>\n<span class=\"line\"><span>ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span></span>\n<span class=\"line\"><span>ENV CATALINA_HOME /usr/local/tomcat</span></span>\n<span class=\"line\"><span>ENV CATALINA_BASE /usr/local/tomcat</span></span>\n<span class=\"line\"><span>ENV PATH $PATH:$JAVA_HOME/bin:$CLASSPATH:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>EXPOSE 8080</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>CMD /usr/local/tomcat/bin/startup.sh &#x26;&#x26; tail -f /usr/local/tomcat/logs/catalina.out</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_1-2-构建格式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-2-构建格式\"><span>1.2 构建格式</span></a></h3>\n<ol>\n<li>\n<p>格式</p>\n<p>docker build [选项] PATH | URL | -</p>\n</li>\n<li>\n<p>选项</p>\n<p>-t: 打标签</p>\n<p>-c: -cpu-shares int: cpu份额（相对权重）</p>\n<p>-m: -memory bytes: 内存限制</p>\n<p>--build-arg: 设置构建时的变量，就是构建时候修改ARG指令的参数</p>\n</li>\n</ol>\n<h2 id=\"_2-常用的指令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-常用的指令\"><span>2. 常用的指令</span></a></h2>\n<blockquote>\n<p>=== 必须大写</p>\n</blockquote>\n<h3 id=\"_2-1-from\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-1-from\"><span>2.1 FROM</span></a></h3>\n<p>Dockerfile文件的第一个非注释的指令。</p>\n<p>基础镜像，当前新镜像是基于哪个镜像来生成新镜像的，指定一个已经存在的镜像作为模板。</p>\n<p>默认情况下，当执行 <strong>docker build</strong> 命令时会在docker主机上查找镜像，如果镜像不存在，则会自动从Docker仓库pull下来，当然了，再找不到镜像就会报错了。</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>FROM 镜像名:镜像标签</span></span>\n<span class=\"line\"><span># 默认镜像标签为 latest, 即最新的镜像</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_2-2-maintainer\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-2-maintainer\"><span>2.2 MAINTAINER</span></a></h3>\n<p>用于提供镜像维护者的姓名和邮箱地址</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>MAINTAINER 'zhangsan&#x3C;zhangsan@163.com>'</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><h3 id=\"_2-3-run\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-3-run\"><span>2.3 RUN</span></a></h3>\n<p>容器构建时需要运行的命令（build）</p>\n<h4 id=\"_2-3-1-两种格式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-3-1-两种格式\"><span>2.3.1 两种格式</span></a></h4>\n<h5 id=\"_2-3-1-1-shell格式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-3-1-1-shell格式\"><span>2.3.1.1 shell格式</span></a></h5>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">RUN</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> yum</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -y</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> install</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> vim</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><h5 id=\"_2-3-1-2-exec格式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-3-1-2-exec格式\"><span>2.3.1.2 exec格式</span></a></h5>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">RUN</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> [</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">可执行文件</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">,</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">参数1</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">,</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">参数2</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">]</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><blockquote>\n<p>=== RUN 命令时build构建镜像时执行的。</p>\n</blockquote>\n<h3 id=\"_2-4-expose\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-4-expose\"><span>2.4 EXPOSE</span></a></h3>\n<p>当前容器对外暴露出的端口</p>\n<h3 id=\"_2-5-workdir\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-5-workdir\"><span>2.5 WORKDIR</span></a></h3>\n<p>指定在容器创建以后，终端默认登录进来的目录，一个落脚点</p>\n<h3 id=\"_2-6-user\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-6-user\"><span>2.6 USER</span></a></h3>\n<p>指定该镜像以什么样的的用户去执行它，如果没有指定默认为root</p>\n<h3 id=\"_2-7-env\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-7-env\"><span>2.7 ENV</span></a></h3>\n<p>用于在构建镜像过程中设置环境变量</p>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">ENV</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> MY_PATH</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /usr/mytest</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">这个环境变量可以在后续的任何</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> RUN</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> 指令中使用，这就如同在命令前面环境变量前缀一样；</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">它可以在其它指令中直接使用这些环境变量；</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">比如：</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> WORKDIR</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> $MY_PATH</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_2-8-copy\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-8-copy\"><span>2.8 COPY</span></a></h3>\n<p>用于从docker主机赋值文件或目录至创建的新镜像指定的路径中</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>COPY [源] [目标]</span></span>\n<span class=\"line\"><span>COPY [\"源\", \"目标\"]</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>文件复制准则</p>\n<ul>\n<li>必须是build上下文中的路径，即当前工作目录中的路径，不能是其父目录中的文件；</li>\n<li>如果是目录，则其内部文件或子目录会被递归复制，但目录自身不会被复制；</li>\n<li>如果指定了多个，或在中使用了通配符，则必须是一个目录，且必须以/结尾；</li>\n<li>如果事先不存在，他将会被自动创建，这包括父目录路径</li>\n</ul>\n<p>示例</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span># copy 文件</span></span>\n<span class=\"line\"><span>COPY index.html /data/web/html/      //要确保Dockerfile同级路径下有index.html文件</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># copy 目录  如果是复制目录，则其内部文件或子目录会被递归复制，但目录自身不会被复制；需要把复制目录名字也写在容器中要复制的路径下！</span></span>\n<span class=\"line\"><span>COPY yum.repos.d /etc/yum.repos.d/</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_2-9-add\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-9-add\"><span>2.9 ADD</span></a></h3>\n<p>同 copy 只是提供了URL 和 解压压缩包的功能</p>\n<p>将宿主机目录下的文件拷贝至镜像且会自动处理URL和解压tar压缩包</p>\n<h3 id=\"_2-10-volume\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-10-volume\"><span>2.10 VOLUME</span></a></h3>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p>容器数据卷，用于数据保存和持久化工作</p>\n</div>\n<p>使用方式：</p>\n<p>​    VOLUME /home/data /home2/data</p>\n<p>​    VOLUMN [&quot;/home/data&quot;,&quot;/home2/data&quot;]</p>\n<p>如果使用 docker run xx  命令启动容器时若没有使用 -v 挂载 VOLUME指定的目录，则会在创建容器时自动在Docker安装目录生成从一个匿名目录用以存储VOLUME声明的文件夹内的内容。一般是在 <strong>/var/lib/docker/volumes/</strong> 下</p>\n<figure><img src=\"@source/notes/Docker/Dockerfile/assets/image-20240710101007424.png\" alt=\"image-20240710101007424\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240710101007424</figcaption></figure>\n<p>一个目录会生成一个文件夹，例如 VOLUME /home/data /home2/data 则会生成两个文件夹。</p>\n<p>如果使用 -v 声明了，则会被 -v 声明的覆盖。</p>\n<h3 id=\"_2-11-cmd\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-11-cmd\"><span>2.11 CMD</span></a></h3>\n<p>类似于RUN命令，只不过运行时机不同，指定容器启动后要做的事情</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换。</p>\n</div>\n<h3 id=\"_2-12-entrypoint\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-12-entrypoint\"><span>2.12 ENTRYPOINT</span></a></h3>\n<p>ENTRYPOINT可以和CMD一起使用，一般是变参时才会使用CMD,这里的CMD等于是在给ENTRYPOINT传参。</p>\n<p>当指定了ENTRYPOINT之后，CMD的含义就发生了变化，不再是直接运行其命令而是将CMD的内容作为参数传递给ENTRYPOINT指令，两个组合之后就会变成 <code v-pre>&lt;ENTIRYPOINT&gt;&lt;CMD&gt;</code></p>\n<p><code v-pre>ENTRYPOINT &lt;command&gt;</code></p>\n<p><code v-pre>ENTRYPOINT [&quot;&lt;executable&gt;&quot;, &quot;&lt;param1&gt;&quot;, &quot;&lt;param2&gt;&quot;]</code></p>\n<p>案例：假设有一个nginx:test镜像</p>\n<p>Dockerfile:</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>FROM nginx</span></span>\n<span class=\"line\"><span>ENTRYPOINT ['nginx','-c'] #定参</span></span>\n<span class=\"line\"><span>CMD [\"/etc/nginx/nginx.conf\"] #变参</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>是否传参</th>\n<th>按照Dockerfile执行编写</th>\n<th>传参运行</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Docker命令</td>\n<td>docker run nginx:test</td>\n<td>docker run nginx:test -c /etc/nginx/new.conf</td>\n</tr>\n<tr>\n<td>衍生出的实际命令</td>\n<td>nginx -c /etc/nginx/nginx.conf</td>\n<td>nginx -c /etc/nginx/new.conf</td>\n</tr>\n</tbody>\n</table>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<ul>\n<li>docker run命令传入的命令参数会覆盖CMD指令的内容并且附加到ENTRYPOINT命令最后做为其参数使用</li>\n<li>Dockerfile文件中也可以存在多个ENTRYPOINT指令，但仅有最后一个会生效</li>\n</ul>\n</div>\n<ul>\n<li>类似CMD指令的功能，用于为容器指定默认运行程序，从而使容器像是一个单独的可执行程序</li>\n<li>与CMD不同的是，由ENTRYPOINT启动的程序不会被docker run命令行指定的参数所覆盖，而且，这些命令行参数会被当作参数传递给ENTRYPOINT指定指定的程序</li>\n</ul>\n","env":{"base":"/","filePath":"F:/my_source_code/kylinBachelor.github.io/docs/notes/Docker/Dockerfile/index.md","filePathRelative":"notes/Docker/Dockerfile/index.md","frontmatter":{},"sfcBlocks":{"template":{"type":"template","content":"<template><h1 id=\"dockerfile\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#dockerfile\"><span>Dockerfile</span></a></h1>\n<p>官网（需要翻墙）：https://docs.docker.com/reference/dockerfile/</p>\n<p>中文网： http://www.dockerinfo.net/dockerfile%e4%bb%8b%e7%bb%8d</p>\n<h2 id=\"_1-概述\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-概述\"><span>1. 概述</span></a></h2>\n<blockquote>\n<p>=== Dockerfile 是用来构建 Docker 镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本</p>\n</blockquote>\n<figure><img src=\"@source/notes/Docker/Dockerfile/assets/image-20240709130302870.png\" alt=\"image-20240709130302870\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240709130302870</figcaption></figure>\n<p>示例</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>FROM centos:7</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 配置Java17环境变量</span></span>\n<span class=\"line\"><span>ADD jdk-17_linux-x64_bin.tar /usr/lib/</span></span>\n<span class=\"line\"><span>ENV JAVA_HOME /usr/lib/jdk-17.0.11</span></span>\n<span class=\"line\"><span>ENV CLASSPATH .:${JAVA_HOME}/jre/lib/rt.jar:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar</span></span>\n<span class=\"line\"><span>ENV PATH $PATH:${JAVA_HOME}/bin</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>CMD /bin/bash</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>FROM centos</span></span>\n<span class=\"line\"><span>  </span></span>\n<span class=\"line\"><span>MAINTAINER Linkaiqiang</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>COPY readme.txt /usr/local/readme.txt</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>ADD jdk1.8.0_291.tar.gz /usr/local/</span></span>\n<span class=\"line\"><span>ADD tomcat.tar.gz /usr/local/</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>RUN cd /etc/yum.repos.d/</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>RUN sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*</span></span>\n<span class=\"line\"><span>RUN sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>RUN yum -y install vim wget</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>VOLUME [\"/data1\",\"/data2\"]</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>ENV MYPATH /usr/local</span></span>\n<span class=\"line\"><span>WORKDIR $MYPATH</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>ENV JAVA_HOME /usr/local/jdk1.8.0_291</span></span>\n<span class=\"line\"><span>ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span></span>\n<span class=\"line\"><span>ENV CATALINA_HOME /usr/local/tomcat</span></span>\n<span class=\"line\"><span>ENV CATALINA_BASE /usr/local/tomcat</span></span>\n<span class=\"line\"><span>ENV PATH $PATH:$JAVA_HOME/bin:$CLASSPATH:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>EXPOSE 8080</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>CMD /usr/local/tomcat/bin/startup.sh &#x26;&#x26; tail -f /usr/local/tomcat/logs/catalina.out</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_1-2-构建格式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-2-构建格式\"><span>1.2 构建格式</span></a></h3>\n<ol>\n<li>\n<p>格式</p>\n<p>docker build [选项] PATH | URL | -</p>\n</li>\n<li>\n<p>选项</p>\n<p>-t: 打标签</p>\n<p>-c: -cpu-shares int: cpu份额（相对权重）</p>\n<p>-m: -memory bytes: 内存限制</p>\n<p>--build-arg: 设置构建时的变量，就是构建时候修改ARG指令的参数</p>\n</li>\n</ol>\n<h2 id=\"_2-常用的指令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-常用的指令\"><span>2. 常用的指令</span></a></h2>\n<blockquote>\n<p>=== 必须大写</p>\n</blockquote>\n<h3 id=\"_2-1-from\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-1-from\"><span>2.1 FROM</span></a></h3>\n<p>Dockerfile文件的第一个非注释的指令。</p>\n<p>基础镜像，当前新镜像是基于哪个镜像来生成新镜像的，指定一个已经存在的镜像作为模板。</p>\n<p>默认情况下，当执行 <strong>docker build</strong> 命令时会在docker主机上查找镜像，如果镜像不存在，则会自动从Docker仓库pull下来，当然了，再找不到镜像就会报错了。</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>FROM 镜像名:镜像标签</span></span>\n<span class=\"line\"><span># 默认镜像标签为 latest, 即最新的镜像</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_2-2-maintainer\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-2-maintainer\"><span>2.2 MAINTAINER</span></a></h3>\n<p>用于提供镜像维护者的姓名和邮箱地址</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>MAINTAINER 'zhangsan&#x3C;zhangsan@163.com>'</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><h3 id=\"_2-3-run\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-3-run\"><span>2.3 RUN</span></a></h3>\n<p>容器构建时需要运行的命令（build）</p>\n<h4 id=\"_2-3-1-两种格式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-3-1-两种格式\"><span>2.3.1 两种格式</span></a></h4>\n<h5 id=\"_2-3-1-1-shell格式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-3-1-1-shell格式\"><span>2.3.1.1 shell格式</span></a></h5>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">RUN</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> yum</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -y</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> install</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> vim</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><h5 id=\"_2-3-1-2-exec格式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-3-1-2-exec格式\"><span>2.3.1.2 exec格式</span></a></h5>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">RUN</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> [</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">可执行文件</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">,</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">参数1</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">,</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">参数2</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">]</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><blockquote>\n<p>=== RUN 命令时build构建镜像时执行的。</p>\n</blockquote>\n<h3 id=\"_2-4-expose\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-4-expose\"><span>2.4 EXPOSE</span></a></h3>\n<p>当前容器对外暴露出的端口</p>\n<h3 id=\"_2-5-workdir\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-5-workdir\"><span>2.5 WORKDIR</span></a></h3>\n<p>指定在容器创建以后，终端默认登录进来的目录，一个落脚点</p>\n<h3 id=\"_2-6-user\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-6-user\"><span>2.6 USER</span></a></h3>\n<p>指定该镜像以什么样的的用户去执行它，如果没有指定默认为root</p>\n<h3 id=\"_2-7-env\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-7-env\"><span>2.7 ENV</span></a></h3>\n<p>用于在构建镜像过程中设置环境变量</p>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">ENV</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> MY_PATH</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /usr/mytest</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">这个环境变量可以在后续的任何</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> RUN</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> 指令中使用，这就如同在命令前面环境变量前缀一样；</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">它可以在其它指令中直接使用这些环境变量；</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">比如：</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> WORKDIR</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> $MY_PATH</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_2-8-copy\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-8-copy\"><span>2.8 COPY</span></a></h3>\n<p>用于从docker主机赋值文件或目录至创建的新镜像指定的路径中</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>COPY [源] [目标]</span></span>\n<span class=\"line\"><span>COPY [\"源\", \"目标\"]</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>文件复制准则</p>\n<ul>\n<li>必须是build上下文中的路径，即当前工作目录中的路径，不能是其父目录中的文件；</li>\n<li>如果是目录，则其内部文件或子目录会被递归复制，但目录自身不会被复制；</li>\n<li>如果指定了多个，或在中使用了通配符，则必须是一个目录，且必须以/结尾；</li>\n<li>如果事先不存在，他将会被自动创建，这包括父目录路径</li>\n</ul>\n<p>示例</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span># copy 文件</span></span>\n<span class=\"line\"><span>COPY index.html /data/web/html/      //要确保Dockerfile同级路径下有index.html文件</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># copy 目录  如果是复制目录，则其内部文件或子目录会被递归复制，但目录自身不会被复制；需要把复制目录名字也写在容器中要复制的路径下！</span></span>\n<span class=\"line\"><span>COPY yum.repos.d /etc/yum.repos.d/</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_2-9-add\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-9-add\"><span>2.9 ADD</span></a></h3>\n<p>同 copy 只是提供了URL 和 解压压缩包的功能</p>\n<p>将宿主机目录下的文件拷贝至镜像且会自动处理URL和解压tar压缩包</p>\n<h3 id=\"_2-10-volume\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-10-volume\"><span>2.10 VOLUME</span></a></h3>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p>容器数据卷，用于数据保存和持久化工作</p>\n</div>\n<p>使用方式：</p>\n<p>​    VOLUME /home/data /home2/data</p>\n<p>​    VOLUMN [&quot;/home/data&quot;,&quot;/home2/data&quot;]</p>\n<p>如果使用 docker run xx  命令启动容器时若没有使用 -v 挂载 VOLUME指定的目录，则会在创建容器时自动在Docker安装目录生成从一个匿名目录用以存储VOLUME声明的文件夹内的内容。一般是在 <strong>/var/lib/docker/volumes/</strong> 下</p>\n<figure><img src=\"@source/notes/Docker/Dockerfile/assets/image-20240710101007424.png\" alt=\"image-20240710101007424\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240710101007424</figcaption></figure>\n<p>一个目录会生成一个文件夹，例如 VOLUME /home/data /home2/data 则会生成两个文件夹。</p>\n<p>如果使用 -v 声明了，则会被 -v 声明的覆盖。</p>\n<h3 id=\"_2-11-cmd\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-11-cmd\"><span>2.11 CMD</span></a></h3>\n<p>类似于RUN命令，只不过运行时机不同，指定容器启动后要做的事情</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换。</p>\n</div>\n<h3 id=\"_2-12-entrypoint\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-12-entrypoint\"><span>2.12 ENTRYPOINT</span></a></h3>\n<p>ENTRYPOINT可以和CMD一起使用，一般是变参时才会使用CMD,这里的CMD等于是在给ENTRYPOINT传参。</p>\n<p>当指定了ENTRYPOINT之后，CMD的含义就发生了变化，不再是直接运行其命令而是将CMD的内容作为参数传递给ENTRYPOINT指令，两个组合之后就会变成 <code v-pre>&lt;ENTIRYPOINT&gt;&lt;CMD&gt;</code></p>\n<p><code v-pre>ENTRYPOINT &lt;command&gt;</code></p>\n<p><code v-pre>ENTRYPOINT [&quot;&lt;executable&gt;&quot;, &quot;&lt;param1&gt;&quot;, &quot;&lt;param2&gt;&quot;]</code></p>\n<p>案例：假设有一个nginx:test镜像</p>\n<p>Dockerfile:</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>FROM nginx</span></span>\n<span class=\"line\"><span>ENTRYPOINT ['nginx','-c'] #定参</span></span>\n<span class=\"line\"><span>CMD [\"/etc/nginx/nginx.conf\"] #变参</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>是否传参</th>\n<th>按照Dockerfile执行编写</th>\n<th>传参运行</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Docker命令</td>\n<td>docker run nginx:test</td>\n<td>docker run nginx:test -c /etc/nginx/new.conf</td>\n</tr>\n<tr>\n<td>衍生出的实际命令</td>\n<td>nginx -c /etc/nginx/nginx.conf</td>\n<td>nginx -c /etc/nginx/new.conf</td>\n</tr>\n</tbody>\n</table>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<ul>\n<li>docker run命令传入的命令参数会覆盖CMD指令的内容并且附加到ENTRYPOINT命令最后做为其参数使用</li>\n<li>Dockerfile文件中也可以存在多个ENTRYPOINT指令，但仅有最后一个会生效</li>\n</ul>\n</div>\n<ul>\n<li>类似CMD指令的功能，用于为容器指定默认运行程序，从而使容器像是一个单独的可执行程序</li>\n<li>与CMD不同的是，由ENTRYPOINT启动的程序不会被docker run命令行指定的参数所覆盖，而且，这些命令行参数会被当作参数传递给ENTRYPOINT指定指定的程序</li>\n</ul>\n</template>","contentStripped":"<h1 id=\"dockerfile\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#dockerfile\"><span>Dockerfile</span></a></h1>\n<p>官网（需要翻墙）：https://docs.docker.com/reference/dockerfile/</p>\n<p>中文网： http://www.dockerinfo.net/dockerfile%e4%bb%8b%e7%bb%8d</p>\n<h2 id=\"_1-概述\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-概述\"><span>1. 概述</span></a></h2>\n<blockquote>\n<p>=== Dockerfile 是用来构建 Docker 镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本</p>\n</blockquote>\n<figure><img src=\"@source/notes/Docker/Dockerfile/assets/image-20240709130302870.png\" alt=\"image-20240709130302870\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240709130302870</figcaption></figure>\n<p>示例</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>FROM centos:7</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># 配置Java17环境变量</span></span>\n<span class=\"line\"><span>ADD jdk-17_linux-x64_bin.tar /usr/lib/</span></span>\n<span class=\"line\"><span>ENV JAVA_HOME /usr/lib/jdk-17.0.11</span></span>\n<span class=\"line\"><span>ENV CLASSPATH .:${JAVA_HOME}/jre/lib/rt.jar:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar</span></span>\n<span class=\"line\"><span>ENV PATH $PATH:${JAVA_HOME}/bin</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>CMD /bin/bash</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>FROM centos</span></span>\n<span class=\"line\"><span>  </span></span>\n<span class=\"line\"><span>MAINTAINER Linkaiqiang</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>COPY readme.txt /usr/local/readme.txt</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>ADD jdk1.8.0_291.tar.gz /usr/local/</span></span>\n<span class=\"line\"><span>ADD tomcat.tar.gz /usr/local/</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>RUN cd /etc/yum.repos.d/</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>RUN sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*</span></span>\n<span class=\"line\"><span>RUN sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>RUN yum -y install vim wget</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>VOLUME [\"/data1\",\"/data2\"]</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>ENV MYPATH /usr/local</span></span>\n<span class=\"line\"><span>WORKDIR $MYPATH</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>ENV JAVA_HOME /usr/local/jdk1.8.0_291</span></span>\n<span class=\"line\"><span>ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span></span>\n<span class=\"line\"><span>ENV CATALINA_HOME /usr/local/tomcat</span></span>\n<span class=\"line\"><span>ENV CATALINA_BASE /usr/local/tomcat</span></span>\n<span class=\"line\"><span>ENV PATH $PATH:$JAVA_HOME/bin:$CLASSPATH:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>EXPOSE 8080</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>CMD /usr/local/tomcat/bin/startup.sh &#x26;&#x26; tail -f /usr/local/tomcat/logs/catalina.out</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_1-2-构建格式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-2-构建格式\"><span>1.2 构建格式</span></a></h3>\n<ol>\n<li>\n<p>格式</p>\n<p>docker build [选项] PATH | URL | -</p>\n</li>\n<li>\n<p>选项</p>\n<p>-t: 打标签</p>\n<p>-c: -cpu-shares int: cpu份额（相对权重）</p>\n<p>-m: -memory bytes: 内存限制</p>\n<p>--build-arg: 设置构建时的变量，就是构建时候修改ARG指令的参数</p>\n</li>\n</ol>\n<h2 id=\"_2-常用的指令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-常用的指令\"><span>2. 常用的指令</span></a></h2>\n<blockquote>\n<p>=== 必须大写</p>\n</blockquote>\n<h3 id=\"_2-1-from\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-1-from\"><span>2.1 FROM</span></a></h3>\n<p>Dockerfile文件的第一个非注释的指令。</p>\n<p>基础镜像，当前新镜像是基于哪个镜像来生成新镜像的，指定一个已经存在的镜像作为模板。</p>\n<p>默认情况下，当执行 <strong>docker build</strong> 命令时会在docker主机上查找镜像，如果镜像不存在，则会自动从Docker仓库pull下来，当然了，再找不到镜像就会报错了。</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>FROM 镜像名:镜像标签</span></span>\n<span class=\"line\"><span># 默认镜像标签为 latest, 即最新的镜像</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_2-2-maintainer\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-2-maintainer\"><span>2.2 MAINTAINER</span></a></h3>\n<p>用于提供镜像维护者的姓名和邮箱地址</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>MAINTAINER 'zhangsan&#x3C;zhangsan@163.com>'</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><h3 id=\"_2-3-run\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-3-run\"><span>2.3 RUN</span></a></h3>\n<p>容器构建时需要运行的命令（build）</p>\n<h4 id=\"_2-3-1-两种格式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-3-1-两种格式\"><span>2.3.1 两种格式</span></a></h4>\n<h5 id=\"_2-3-1-1-shell格式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-3-1-1-shell格式\"><span>2.3.1.1 shell格式</span></a></h5>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">RUN</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> yum</span><span style=\"--shiki-light:#A65E2B;--shiki-dark:#C99076\"> -y</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> install</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> vim</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><h5 id=\"_2-3-1-2-exec格式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-3-1-2-exec格式\"><span>2.3.1.2 exec格式</span></a></h5>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">RUN</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\"> [</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">可执行文件</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">,</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">参数1</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">,</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">参数2</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">'</span><span style=\"--shiki-light:#393A34;--shiki-dark:#DBD7CAEE\">]</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><blockquote>\n<p>=== RUN 命令时build构建镜像时执行的。</p>\n</blockquote>\n<h3 id=\"_2-4-expose\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-4-expose\"><span>2.4 EXPOSE</span></a></h3>\n<p>当前容器对外暴露出的端口</p>\n<h3 id=\"_2-5-workdir\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-5-workdir\"><span>2.5 WORKDIR</span></a></h3>\n<p>指定在容器创建以后，终端默认登录进来的目录，一个落脚点</p>\n<h3 id=\"_2-6-user\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-6-user\"><span>2.6 USER</span></a></h3>\n<p>指定该镜像以什么样的的用户去执行它，如果没有指定默认为root</p>\n<h3 id=\"_2-7-env\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-7-env\"><span>2.7 ENV</span></a></h3>\n<p>用于在构建镜像过程中设置环境变量</p>\n<div class=\"language-sh line-numbers-mode\" data-ext=\"sh\" data-title=\"sh\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">ENV</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> MY_PATH</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> /usr/mytest</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">这个环境变量可以在后续的任何</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> RUN</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> 指令中使用，这就如同在命令前面环境变量前缀一样；</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">它可以在其它指令中直接使用这些环境变量；</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#59873A;--shiki-dark:#80A665\">比如：</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\"> WORKDIR</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> $MY_PATH</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_2-8-copy\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-8-copy\"><span>2.8 COPY</span></a></h3>\n<p>用于从docker主机赋值文件或目录至创建的新镜像指定的路径中</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>COPY [源] [目标]</span></span>\n<span class=\"line\"><span>COPY [\"源\", \"目标\"]</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>文件复制准则</p>\n<ul>\n<li>必须是build上下文中的路径，即当前工作目录中的路径，不能是其父目录中的文件；</li>\n<li>如果是目录，则其内部文件或子目录会被递归复制，但目录自身不会被复制；</li>\n<li>如果指定了多个，或在中使用了通配符，则必须是一个目录，且必须以/结尾；</li>\n<li>如果事先不存在，他将会被自动创建，这包括父目录路径</li>\n</ul>\n<p>示例</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span># copy 文件</span></span>\n<span class=\"line\"><span>COPY index.html /data/web/html/      //要确保Dockerfile同级路径下有index.html文件</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span># copy 目录  如果是复制目录，则其内部文件或子目录会被递归复制，但目录自身不会被复制；需要把复制目录名字也写在容器中要复制的路径下！</span></span>\n<span class=\"line\"><span>COPY yum.repos.d /etc/yum.repos.d/</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"_2-9-add\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-9-add\"><span>2.9 ADD</span></a></h3>\n<p>同 copy 只是提供了URL 和 解压压缩包的功能</p>\n<p>将宿主机目录下的文件拷贝至镜像且会自动处理URL和解压tar压缩包</p>\n<h3 id=\"_2-10-volume\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-10-volume\"><span>2.10 VOLUME</span></a></h3>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p>容器数据卷，用于数据保存和持久化工作</p>\n</div>\n<p>使用方式：</p>\n<p>​    VOLUME /home/data /home2/data</p>\n<p>​    VOLUMN [&quot;/home/data&quot;,&quot;/home2/data&quot;]</p>\n<p>如果使用 docker run xx  命令启动容器时若没有使用 -v 挂载 VOLUME指定的目录，则会在创建容器时自动在Docker安装目录生成从一个匿名目录用以存储VOLUME声明的文件夹内的内容。一般是在 <strong>/var/lib/docker/volumes/</strong> 下</p>\n<figure><img src=\"@source/notes/Docker/Dockerfile/assets/image-20240710101007424.png\" alt=\"image-20240710101007424\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20240710101007424</figcaption></figure>\n<p>一个目录会生成一个文件夹，例如 VOLUME /home/data /home2/data 则会生成两个文件夹。</p>\n<p>如果使用 -v 声明了，则会被 -v 声明的覆盖。</p>\n<h3 id=\"_2-11-cmd\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-11-cmd\"><span>2.11 CMD</span></a></h3>\n<p>类似于RUN命令，只不过运行时机不同，指定容器启动后要做的事情</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换。</p>\n</div>\n<h3 id=\"_2-12-entrypoint\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-12-entrypoint\"><span>2.12 ENTRYPOINT</span></a></h3>\n<p>ENTRYPOINT可以和CMD一起使用，一般是变参时才会使用CMD,这里的CMD等于是在给ENTRYPOINT传参。</p>\n<p>当指定了ENTRYPOINT之后，CMD的含义就发生了变化，不再是直接运行其命令而是将CMD的内容作为参数传递给ENTRYPOINT指令，两个组合之后就会变成 <code v-pre>&lt;ENTIRYPOINT&gt;&lt;CMD&gt;</code></p>\n<p><code v-pre>ENTRYPOINT &lt;command&gt;</code></p>\n<p><code v-pre>ENTRYPOINT [&quot;&lt;executable&gt;&quot;, &quot;&lt;param1&gt;&quot;, &quot;&lt;param2&gt;&quot;]</code></p>\n<p>案例：假设有一个nginx:test镜像</p>\n<p>Dockerfile:</p>\n<div class=\"language-dockerfile line-numbers-mode\" data-ext=\"dockerfile\" data-title=\"dockerfile\"><button class=\"copy\" title=\"复制代码\" data-copied=\"已复制\"></button><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code><span class=\"line\"><span>FROM nginx</span></span>\n<span class=\"line\"><span>ENTRYPOINT ['nginx','-c'] #定参</span></span>\n<span class=\"line\"><span>CMD [\"/etc/nginx/nginx.conf\"] #变参</span></span></code></pre>\n\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><table>\n<thead>\n<tr>\n<th>是否传参</th>\n<th>按照Dockerfile执行编写</th>\n<th>传参运行</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Docker命令</td>\n<td>docker run nginx:test</td>\n<td>docker run nginx:test -c /etc/nginx/new.conf</td>\n</tr>\n<tr>\n<td>衍生出的实际命令</td>\n<td>nginx -c /etc/nginx/nginx.conf</td>\n<td>nginx -c /etc/nginx/new.conf</td>\n</tr>\n</tbody>\n</table>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<ul>\n<li>docker run命令传入的命令参数会覆盖CMD指令的内容并且附加到ENTRYPOINT命令最后做为其参数使用</li>\n<li>Dockerfile文件中也可以存在多个ENTRYPOINT指令，但仅有最后一个会生效</li>\n</ul>\n</div>\n<ul>\n<li>类似CMD指令的功能，用于为容器指定默认运行程序，从而使容器像是一个单独的可执行程序</li>\n<li>与CMD不同的是，由ENTRYPOINT启动的程序不会被docker run命令行指定的参数所覆盖，而且，这些命令行参数会被当作参数传递给ENTRYPOINT指定指定的程序</li>\n</ul>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n# Dockerfile\r\n\r\n官网（需要翻墙）：https://docs.docker.com/reference/dockerfile/\r\n\r\n中文网： http://www.dockerinfo.net/dockerfile%e4%bb%8b%e7%bb%8d\r\n\r\n## 1. 概述\r\n\r\n> === Dockerfile 是用来构建 Docker 镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本\r\n\r\n![image-20240709130302870](./assets/image-20240709130302870.png)\r\n\r\n示例\r\n\r\n```dockerfile\r\nFROM centos:7\r\n\r\n# 配置Java17环境变量\r\nADD jdk-17_linux-x64_bin.tar /usr/lib/\r\nENV JAVA_HOME /usr/lib/jdk-17.0.11\r\nENV CLASSPATH .:${JAVA_HOME}/jre/lib/rt.jar:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar\r\nENV PATH $PATH:${JAVA_HOME}/bin\r\n\r\nCMD /bin/bash\r\n\r\n\r\n\r\nFROM centos\r\n  \r\nMAINTAINER Linkaiqiang\r\n\r\nCOPY readme.txt /usr/local/readme.txt\r\n\r\nADD jdk1.8.0_291.tar.gz /usr/local/\r\nADD tomcat.tar.gz /usr/local/\r\n\r\nRUN cd /etc/yum.repos.d/\r\n\r\nRUN sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*\r\nRUN sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*\r\n\r\nRUN yum -y install vim wget\r\n\r\nVOLUME [\"/data1\",\"/data2\"]\r\n\r\n\r\nENV MYPATH /usr/local\r\nWORKDIR $MYPATH\r\n\r\nENV JAVA_HOME /usr/local/jdk1.8.0_291\r\nENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\r\nENV CATALINA_HOME /usr/local/tomcat\r\nENV CATALINA_BASE /usr/local/tomcat\r\nENV PATH $PATH:$JAVA_HOME/bin:$CLASSPATH:$CATALINA_HOME/lib:$CATALINA_HOME/bin\r\n\r\nEXPOSE 8080\r\n\r\nCMD /usr/local/tomcat/bin/startup.sh && tail -f /usr/local/tomcat/logs/catalina.out\r\n```\r\n\r\n### 1.2 构建格式\r\n\r\n1. 格式\r\n\r\n    docker build [选项] PATH | URL | -\r\n\r\n2. 选项\r\n\r\n    -t: 打标签\r\n\r\n    -c: -cpu-shares int: cpu份额（相对权重）\r\n\r\n    -m: -memory bytes: 内存限制\r\n\r\n    --build-arg: 设置构建时的变量，就是构建时候修改ARG指令的参数\r\n\r\n\r\n\r\n## 2. 常用的指令\r\n\r\n> === 必须大写\r\n\r\n### 2.1 FROM\r\n\r\nDockerfile文件的第一个非注释的指令。\r\n\r\n基础镜像，当前新镜像是基于哪个镜像来生成新镜像的，指定一个已经存在的镜像作为模板。\r\n\r\n默认情况下，当执行 **docker build** 命令时会在docker主机上查找镜像，如果镜像不存在，则会自动从Docker仓库pull下来，当然了，再找不到镜像就会报错了。\r\n\r\n```dockerfile\r\nFROM 镜像名:镜像标签\r\n# 默认镜像标签为 latest, 即最新的镜像\r\n```\r\n\r\n\r\n\r\n### 2.2 MAINTAINER\r\n\r\n用于提供镜像维护者的姓名和邮箱地址\r\n\r\n```dockerfile\r\nMAINTAINER 'zhangsan<zhangsan@163.com>'\r\n```\r\n\r\n### 2.3 RUN\r\n\r\n容器构建时需要运行的命令（build）\r\n\r\n#### 2.3.1 两种格式\r\n\r\n##### 2.3.1.1 shell格式\r\n\r\n```sh\r\nRUN yum -y install vim\r\n```\r\n\r\n##### 2.3.1.2 exec格式\r\n\r\n```sh\r\nRUN ['可执行文件','参数1','参数2']\r\n```\r\n\r\n> === RUN 命令时build构建镜像时执行的。\r\n\r\n### 2.4 EXPOSE\r\n\r\n当前容器对外暴露出的端口\r\n\r\n### 2.5 WORKDIR\r\n\r\n指定在容器创建以后，终端默认登录进来的目录，一个落脚点\r\n\r\n### 2.6 USER\r\n\r\n指定该镜像以什么样的的用户去执行它，如果没有指定默认为root\r\n\r\n### 2.7 ENV\r\n\r\n用于在构建镜像过程中设置环境变量\r\n\r\n```sh\r\nENV MY_PATH /usr/mytest\r\n\r\n这个环境变量可以在后续的任何 RUN 指令中使用，这就如同在命令前面环境变量前缀一样；\r\n它可以在其它指令中直接使用这些环境变量；\r\n\r\n比如： WORKDIR $MY_PATH\r\n```\r\n\r\n\r\n\r\n### 2.8 COPY\r\n\r\n用于从docker主机赋值文件或目录至创建的新镜像指定的路径中\r\n\r\n```dockerfile\r\nCOPY [源] [目标]\r\nCOPY [\"源\", \"目标\"]\r\n```\r\n\r\n文件复制准则\r\n\r\n+ 必须是build上下文中的路径，即当前工作目录中的路径，不能是其父目录中的文件；\r\n+ 如果是目录，则其内部文件或子目录会被递归复制，但目录自身不会被复制；\r\n+ 如果指定了多个，或在中使用了通配符，则必须是一个目录，且必须以/结尾；\r\n+ 如果事先不存在，他将会被自动创建，这包括父目录路径\r\n\r\n示例\r\n\r\n```dockerfile\r\n# copy 文件\r\nCOPY index.html /data/web/html/      //要确保Dockerfile同级路径下有index.html文件\r\n\r\n# copy 目录  如果是复制目录，则其内部文件或子目录会被递归复制，但目录自身不会被复制；需要把复制目录名字也写在容器中要复制的路径下！\r\nCOPY yum.repos.d /etc/yum.repos.d/\r\n```\r\n\r\n\r\n\r\n### 2.9 ADD\r\n\r\n同 copy 只是提供了URL 和 解压压缩包的功能\r\n\r\n将宿主机目录下的文件拷贝至镜像且会自动处理URL和解压tar压缩包\r\n\r\n### 2.10 VOLUME\r\n\r\n> [!note]\r\n>\r\n> 容器数据卷，用于数据保存和持久化工作\r\n\r\n使用方式：\r\n\r\n​    VOLUME /home/data /home2/data\r\n\r\n​    VOLUMN [\"/home/data\",\"/home2/data\"]\r\n\r\n如果使用 docker run xx  命令启动容器时若没有使用 -v 挂载 VOLUME指定的目录，则会在创建容器时自动在Docker安装目录生成从一个匿名目录用以存储VOLUME声明的文件夹内的内容。一般是在 **/var/lib/docker/volumes/** 下\r\n\r\n![image-20240710101007424](./assets/image-20240710101007424.png)\r\n\r\n一个目录会生成一个文件夹，例如 VOLUME /home/data /home2/data 则会生成两个文件夹。\r\n\r\n如果使用 -v 声明了，则会被 -v 声明的覆盖。\r\n\r\n### 2.11 CMD\r\n\r\n类似于RUN命令，只不过运行时机不同，指定容器启动后要做的事情\r\n\r\n> [!warning]\r\n>\r\n> Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换。\r\n\r\n### 2.12 ENTRYPOINT\r\n\r\nENTRYPOINT可以和CMD一起使用，一般是变参时才会使用CMD,这里的CMD等于是在给ENTRYPOINT传参。\r\n\r\n当指定了ENTRYPOINT之后，CMD的含义就发生了变化，不再是直接运行其命令而是将CMD的内容作为参数传递给ENTRYPOINT指令，两个组合之后就会变成 `<ENTIRYPOINT><CMD>`\r\n\r\n`ENTRYPOINT <command>`\r\n\r\n`ENTRYPOINT [\"<executable>\", \"<param1>\", \"<param2>\"]`\r\n\r\n案例：假设有一个nginx:test镜像\r\n\r\nDockerfile:\r\n\r\n```dockerfile\r\nFROM nginx\r\nENTRYPOINT ['nginx','-c'] #定参\r\nCMD [\"/etc/nginx/nginx.conf\"] #变参\r\n```\r\n\r\n| 是否传参         | 按照Dockerfile执行编写         | 传参运行                                     |\r\n| ---------------- | ------------------------------ | -------------------------------------------- |\r\n| Docker命令       | docker run nginx:test          | docker run nginx:test -c /etc/nginx/new.conf |\r\n| 衍生出的实际命令 | nginx -c /etc/nginx/nginx.conf | nginx -c /etc/nginx/new.conf                 |\r\n\r\n\r\n\r\n> [!note]\r\n>\r\n> + docker run命令传入的命令参数会覆盖CMD指令的内容并且附加到ENTRYPOINT命令最后做为其参数使用\r\n> + Dockerfile文件中也可以存在多个ENTRYPOINT指令，但仅有最后一个会生效\r\n\r\n\r\n\r\n+ 类似CMD指令的功能，用于为容器指定默认运行程序，从而使容器像是一个单独的可执行程序\r\n+ 与CMD不同的是，由ENTRYPOINT启动的程序不会被docker run命令行指定的参数所覆盖，而且，这些命令行参数会被当作参数传递给ENTRYPOINT指定指定的程序","excerpt":"","includedFiles":[],"tasklists":0,"title":"Dockerfile","headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[{"level":3,"title":"1.2 构建格式","slug":"_1-2-构建格式","link":"#_1-2-构建格式","children":[]}]},{"level":2,"title":"2. 常用的指令","slug":"_2-常用的指令","link":"#_2-常用的指令","children":[{"level":3,"title":"2.1 FROM","slug":"_2-1-from","link":"#_2-1-from","children":[]},{"level":3,"title":"2.2 MAINTAINER","slug":"_2-2-maintainer","link":"#_2-2-maintainer","children":[]},{"level":3,"title":"2.3 RUN","slug":"_2-3-run","link":"#_2-3-run","children":[]},{"level":3,"title":"2.4 EXPOSE","slug":"_2-4-expose","link":"#_2-4-expose","children":[]},{"level":3,"title":"2.5 WORKDIR","slug":"_2-5-workdir","link":"#_2-5-workdir","children":[]},{"level":3,"title":"2.6 USER","slug":"_2-6-user","link":"#_2-6-user","children":[]},{"level":3,"title":"2.7 ENV","slug":"_2-7-env","link":"#_2-7-env","children":[]},{"level":3,"title":"2.8 COPY","slug":"_2-8-copy","link":"#_2-8-copy","children":[]},{"level":3,"title":"2.9 ADD","slug":"_2-9-add","link":"#_2-9-add","children":[]},{"level":3,"title":"2.10 VOLUME","slug":"_2-10-volume","link":"#_2-10-volume","children":[]},{"level":3,"title":"2.11 CMD","slug":"_2-11-cmd","link":"#_2-11-cmd","children":[]},{"level":3,"title":"2.12 ENTRYPOINT","slug":"_2-12-entrypoint","link":"#_2-12-entrypoint","children":[]}]}]}}
