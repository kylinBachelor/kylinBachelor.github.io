{"content":"<p>Docker是开源的容器技术，采用的是容器虚拟化技术，是容器运行的载体。</p>\n<h2 id=\"官网\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#官网\"><span>官网</span></a></h2>\n<ol>\n<li>Docker官网: http://www.docker.cn</li>\n<li>Docker Hub官网: https://hub.docker.com/</li>\n</ol>\n<h2 id=\"docker三要素\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#docker三要素\"><span>Docker三要素</span></a></h2>\n<ol>\n<li>镜像（image）: 相当于Java中的类</li>\n<li>容器（container）: 相当于Java中的new出来的一个一个实例</li>\n<li>仓库（repository）: 存放镜像的地方</li>\n</ol>\n<h2 id=\"docker帮助启动类命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#docker帮助启动类命令\"><span>Docker帮助启动类命令</span></a></h2>\n<ul>\n<li>systemctl start docker : 启动docker</li>\n<li>systemctl stop docker : 停止docker</li>\n<li>systemctl restart docker : 重启docker</li>\n<li>systemctl status docker : 查看docker状态</li>\n<li>systemctl enable docker : 开机启动</li>\n<li>docker info : 查看docker概要信息</li>\n<li>docker --help : 查看docker总体帮助文档</li>\n<li>docker 具体命令 --help : 查看docker命令帮助文档</li>\n</ul>\n<h2 id=\"镜像命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#镜像命令\"><span>镜像命令</span></a></h2>\n<ol>\n<li>docker images : 查看docker上安装的镜像\n<ul>\n<li>-a:列出本地所有的镜像（含历史镜像）</li>\n<li>-q:只显示镜像ID</li>\n</ul>\n</li>\n<li>docker search [options] [xxx镜像的名字] : 查看docker镜像库中的镜像\n<ul>\n<li>--limit:只列出N个镜像，默认25个</li>\n<li>docker search --limit 5 redis</li>\n</ul>\n</li>\n<li>docker pull 镜像名字[:TAG] : 从官方镜像库中拉取镜像 tag标签为版本号，不写默认最新版</li>\n<li>docker system df : 查看镜像/容器/数据卷所占的空间</li>\n<li>docker rmi [-f] 镜像名字/镜像ID : 删除xxx镜像名字/镜像ID   -f表示强制删除</li>\n<li>docker rmi [-f] $(docker ps -qa)：删除所有</li>\n</ol>\n<h2 id=\"容器命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#容器命令\"><span>容器命令</span></a></h2>\n<ul>\n<li>\n<p>docker ps [options]: 查看容器</p>\n<ol>\n<li>-a:列出当前所有正在运行的容器+历史上运行过的</li>\n<li>-l:显示最近创建的容器</li>\n<li>-n:显示最近n个创建的容器</li>\n<li>-q:静默模式，只显示容器编号</li>\n</ol>\n</li>\n<li>\n<p>docker run [OPTIONS] image [COMMAND] [ARG...]</p>\n<ol>\n<li>options说明\n<ul>\n<li>--name=容器新名字 :  为容器指定一个名称</li>\n<li>-d:后台运行容器并返回容器ID,即为启动守护式容器</li>\n<li>-i:以交互模式运行容器，通常与-t同时使用</li>\n<li>-t:为容器重新分配一个伪输入终端，通常与-i同时使用，也即启动交互式容器</li>\n<li>-P:随机端口映射，大写P</li>\n<li>-p:指定端口映射，小写p</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>退出容器：</p>\n<ol>\n<li>run进去容器，exit退出，容器停止</li>\n<li>run进去容器，ctrl+p+q退出，容器不停止</li>\n</ol>\n</li>\n<li>\n<p>启动已停止运行的容器</p>\n<ol>\n<li>docker start 容器ID/容器名称 ： 启动已停止运行的容器</li>\n</ol>\n</li>\n<li>\n<p>重启容器</p>\n<ol>\n<li>docker restart 容器ID或容器名</li>\n</ol>\n</li>\n<li>\n<p>停止容器</p>\n<ol>\n<li>docker stop 容器ID/容器名称 ： 停止容器</li>\n<li>docker kill 容器ID/容器名称 ： 强制停止容器</li>\n</ol>\n</li>\n<li>\n<p>删除已停止的容器</p>\n<ol>\n<li>docker rm 容器ID : 删除已停止的容器</li>\n</ol>\n</li>\n<li>\n<p>查看容器内部</p>\n<ol>\n<li>docker top 容器ID/name  : 查看容器内运行的进程</li>\n<li>docker inspect 容器ID/name : 查看容器内部细节</li>\n<li>docker logs -f 容器ID : 查看容器日志</li>\n</ol>\n</li>\n<li>\n<p>重新进入已启动的容器内部交互</p>\n<ol>\n<li>docker exec -it 容器ID /bin/bash  ：  在容器中打开新的终端，并且可以启动新的进程，用exit退出不会导致容器的停止</li>\n<li>docker attach 容器ID  : 直接进入容器启动命令的终端，不会启动新的进程，用exit退出，会导致容器的停止</li>\n</ol>\n</li>\n<li>\n<p>从容器内拷贝文件到宿主机上</p>\n<ol>\n<li>docker cp 容器ID:容器内路径  目的主机路径</li>\n</ol>\n</li>\n<li>\n<p>导入导出容器</p>\n<ol>\n<li>导出： docker export 容器ID &gt; /XX/XX/XX/文件名.tar</li>\n<li>导入： cat 文件名.tar | docker import - 镜像用户/镜像名：镜像版本号</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"docker启动示例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#docker启动示例\"><span>Docker启动示例</span></a></h2>\n<p>docker run --name nginx-test -p 8080:80 -d nginx</p>\n<ul>\n<li>--name nginx-test：容器名称。</li>\n<li>-p 8080:80： 端口进行映射，将本地 8080 端口映射到容器内部的 80 端口。</li>\n<li>-d nginx： 设置容器在在后台一直运行。</li>\n</ul>\n<h2 id=\"example\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#example\"><span>Example</span></a></h2>\n<ol>\n<li>获取最新版本的node镜像：docker pull node:latest</li>\n<li>查看本地镜像，是否已安装了node: docker images</li>\n<li>运行容器：docker run -itd --name node-test node</li>\n<li>进入容器：docker exec -it node-test /bin/bash</li>\n<li>进入容器之后查看node版本：node -v</li>\n</ol>\n","env":{"base":"/","filePath":"C:/Users/kylinBachelor/Desktop/kylinBachelor.github.io/docs/notes/Docker/Docker命令/index.md","filePathRelative":"notes/Docker/Docker命令/index.md","frontmatter":{"title":"Docker初识","aliases":null,"tags":["Docker"],"description":"描述","createTime":"2024/11/30 14:15:41","draft":false},"sfcBlocks":{"template":{"type":"template","content":"<template><p>Docker是开源的容器技术，采用的是容器虚拟化技术，是容器运行的载体。</p>\n<h2 id=\"官网\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#官网\"><span>官网</span></a></h2>\n<ol>\n<li>Docker官网: http://www.docker.cn</li>\n<li>Docker Hub官网: https://hub.docker.com/</li>\n</ol>\n<h2 id=\"docker三要素\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#docker三要素\"><span>Docker三要素</span></a></h2>\n<ol>\n<li>镜像（image）: 相当于Java中的类</li>\n<li>容器（container）: 相当于Java中的new出来的一个一个实例</li>\n<li>仓库（repository）: 存放镜像的地方</li>\n</ol>\n<h2 id=\"docker帮助启动类命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#docker帮助启动类命令\"><span>Docker帮助启动类命令</span></a></h2>\n<ul>\n<li>systemctl start docker : 启动docker</li>\n<li>systemctl stop docker : 停止docker</li>\n<li>systemctl restart docker : 重启docker</li>\n<li>systemctl status docker : 查看docker状态</li>\n<li>systemctl enable docker : 开机启动</li>\n<li>docker info : 查看docker概要信息</li>\n<li>docker --help : 查看docker总体帮助文档</li>\n<li>docker 具体命令 --help : 查看docker命令帮助文档</li>\n</ul>\n<h2 id=\"镜像命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#镜像命令\"><span>镜像命令</span></a></h2>\n<ol>\n<li>docker images : 查看docker上安装的镜像\n<ul>\n<li>-a:列出本地所有的镜像（含历史镜像）</li>\n<li>-q:只显示镜像ID</li>\n</ul>\n</li>\n<li>docker search [options] [xxx镜像的名字] : 查看docker镜像库中的镜像\n<ul>\n<li>--limit:只列出N个镜像，默认25个</li>\n<li>docker search --limit 5 redis</li>\n</ul>\n</li>\n<li>docker pull 镜像名字[:TAG] : 从官方镜像库中拉取镜像 tag标签为版本号，不写默认最新版</li>\n<li>docker system df : 查看镜像/容器/数据卷所占的空间</li>\n<li>docker rmi [-f] 镜像名字/镜像ID : 删除xxx镜像名字/镜像ID   -f表示强制删除</li>\n<li>docker rmi [-f] $(docker ps -qa)：删除所有</li>\n</ol>\n<h2 id=\"容器命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#容器命令\"><span>容器命令</span></a></h2>\n<ul>\n<li>\n<p>docker ps [options]: 查看容器</p>\n<ol>\n<li>-a:列出当前所有正在运行的容器+历史上运行过的</li>\n<li>-l:显示最近创建的容器</li>\n<li>-n:显示最近n个创建的容器</li>\n<li>-q:静默模式，只显示容器编号</li>\n</ol>\n</li>\n<li>\n<p>docker run [OPTIONS] image [COMMAND] [ARG...]</p>\n<ol>\n<li>options说明\n<ul>\n<li>--name=容器新名字 :  为容器指定一个名称</li>\n<li>-d:后台运行容器并返回容器ID,即为启动守护式容器</li>\n<li>-i:以交互模式运行容器，通常与-t同时使用</li>\n<li>-t:为容器重新分配一个伪输入终端，通常与-i同时使用，也即启动交互式容器</li>\n<li>-P:随机端口映射，大写P</li>\n<li>-p:指定端口映射，小写p</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>退出容器：</p>\n<ol>\n<li>run进去容器，exit退出，容器停止</li>\n<li>run进去容器，ctrl+p+q退出，容器不停止</li>\n</ol>\n</li>\n<li>\n<p>启动已停止运行的容器</p>\n<ol>\n<li>docker start 容器ID/容器名称 ： 启动已停止运行的容器</li>\n</ol>\n</li>\n<li>\n<p>重启容器</p>\n<ol>\n<li>docker restart 容器ID或容器名</li>\n</ol>\n</li>\n<li>\n<p>停止容器</p>\n<ol>\n<li>docker stop 容器ID/容器名称 ： 停止容器</li>\n<li>docker kill 容器ID/容器名称 ： 强制停止容器</li>\n</ol>\n</li>\n<li>\n<p>删除已停止的容器</p>\n<ol>\n<li>docker rm 容器ID : 删除已停止的容器</li>\n</ol>\n</li>\n<li>\n<p>查看容器内部</p>\n<ol>\n<li>docker top 容器ID/name  : 查看容器内运行的进程</li>\n<li>docker inspect 容器ID/name : 查看容器内部细节</li>\n<li>docker logs -f 容器ID : 查看容器日志</li>\n</ol>\n</li>\n<li>\n<p>重新进入已启动的容器内部交互</p>\n<ol>\n<li>docker exec -it 容器ID /bin/bash  ：  在容器中打开新的终端，并且可以启动新的进程，用exit退出不会导致容器的停止</li>\n<li>docker attach 容器ID  : 直接进入容器启动命令的终端，不会启动新的进程，用exit退出，会导致容器的停止</li>\n</ol>\n</li>\n<li>\n<p>从容器内拷贝文件到宿主机上</p>\n<ol>\n<li>docker cp 容器ID:容器内路径  目的主机路径</li>\n</ol>\n</li>\n<li>\n<p>导入导出容器</p>\n<ol>\n<li>导出： docker export 容器ID &gt; /XX/XX/XX/文件名.tar</li>\n<li>导入： cat 文件名.tar | docker import - 镜像用户/镜像名：镜像版本号</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"docker启动示例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#docker启动示例\"><span>Docker启动示例</span></a></h2>\n<p>docker run --name nginx-test -p 8080:80 -d nginx</p>\n<ul>\n<li>--name nginx-test：容器名称。</li>\n<li>-p 8080:80： 端口进行映射，将本地 8080 端口映射到容器内部的 80 端口。</li>\n<li>-d nginx： 设置容器在在后台一直运行。</li>\n</ul>\n<h2 id=\"example\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#example\"><span>Example</span></a></h2>\n<ol>\n<li>获取最新版本的node镜像：docker pull node:latest</li>\n<li>查看本地镜像，是否已安装了node: docker images</li>\n<li>运行容器：docker run -itd --name node-test node</li>\n<li>进入容器：docker exec -it node-test /bin/bash</li>\n<li>进入容器之后查看node版本：node -v</li>\n</ol>\n</template>","contentStripped":"<p>Docker是开源的容器技术，采用的是容器虚拟化技术，是容器运行的载体。</p>\n<h2 id=\"官网\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#官网\"><span>官网</span></a></h2>\n<ol>\n<li>Docker官网: http://www.docker.cn</li>\n<li>Docker Hub官网: https://hub.docker.com/</li>\n</ol>\n<h2 id=\"docker三要素\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#docker三要素\"><span>Docker三要素</span></a></h2>\n<ol>\n<li>镜像（image）: 相当于Java中的类</li>\n<li>容器（container）: 相当于Java中的new出来的一个一个实例</li>\n<li>仓库（repository）: 存放镜像的地方</li>\n</ol>\n<h2 id=\"docker帮助启动类命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#docker帮助启动类命令\"><span>Docker帮助启动类命令</span></a></h2>\n<ul>\n<li>systemctl start docker : 启动docker</li>\n<li>systemctl stop docker : 停止docker</li>\n<li>systemctl restart docker : 重启docker</li>\n<li>systemctl status docker : 查看docker状态</li>\n<li>systemctl enable docker : 开机启动</li>\n<li>docker info : 查看docker概要信息</li>\n<li>docker --help : 查看docker总体帮助文档</li>\n<li>docker 具体命令 --help : 查看docker命令帮助文档</li>\n</ul>\n<h2 id=\"镜像命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#镜像命令\"><span>镜像命令</span></a></h2>\n<ol>\n<li>docker images : 查看docker上安装的镜像\n<ul>\n<li>-a:列出本地所有的镜像（含历史镜像）</li>\n<li>-q:只显示镜像ID</li>\n</ul>\n</li>\n<li>docker search [options] [xxx镜像的名字] : 查看docker镜像库中的镜像\n<ul>\n<li>--limit:只列出N个镜像，默认25个</li>\n<li>docker search --limit 5 redis</li>\n</ul>\n</li>\n<li>docker pull 镜像名字[:TAG] : 从官方镜像库中拉取镜像 tag标签为版本号，不写默认最新版</li>\n<li>docker system df : 查看镜像/容器/数据卷所占的空间</li>\n<li>docker rmi [-f] 镜像名字/镜像ID : 删除xxx镜像名字/镜像ID   -f表示强制删除</li>\n<li>docker rmi [-f] $(docker ps -qa)：删除所有</li>\n</ol>\n<h2 id=\"容器命令\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#容器命令\"><span>容器命令</span></a></h2>\n<ul>\n<li>\n<p>docker ps [options]: 查看容器</p>\n<ol>\n<li>-a:列出当前所有正在运行的容器+历史上运行过的</li>\n<li>-l:显示最近创建的容器</li>\n<li>-n:显示最近n个创建的容器</li>\n<li>-q:静默模式，只显示容器编号</li>\n</ol>\n</li>\n<li>\n<p>docker run [OPTIONS] image [COMMAND] [ARG...]</p>\n<ol>\n<li>options说明\n<ul>\n<li>--name=容器新名字 :  为容器指定一个名称</li>\n<li>-d:后台运行容器并返回容器ID,即为启动守护式容器</li>\n<li>-i:以交互模式运行容器，通常与-t同时使用</li>\n<li>-t:为容器重新分配一个伪输入终端，通常与-i同时使用，也即启动交互式容器</li>\n<li>-P:随机端口映射，大写P</li>\n<li>-p:指定端口映射，小写p</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>退出容器：</p>\n<ol>\n<li>run进去容器，exit退出，容器停止</li>\n<li>run进去容器，ctrl+p+q退出，容器不停止</li>\n</ol>\n</li>\n<li>\n<p>启动已停止运行的容器</p>\n<ol>\n<li>docker start 容器ID/容器名称 ： 启动已停止运行的容器</li>\n</ol>\n</li>\n<li>\n<p>重启容器</p>\n<ol>\n<li>docker restart 容器ID或容器名</li>\n</ol>\n</li>\n<li>\n<p>停止容器</p>\n<ol>\n<li>docker stop 容器ID/容器名称 ： 停止容器</li>\n<li>docker kill 容器ID/容器名称 ： 强制停止容器</li>\n</ol>\n</li>\n<li>\n<p>删除已停止的容器</p>\n<ol>\n<li>docker rm 容器ID : 删除已停止的容器</li>\n</ol>\n</li>\n<li>\n<p>查看容器内部</p>\n<ol>\n<li>docker top 容器ID/name  : 查看容器内运行的进程</li>\n<li>docker inspect 容器ID/name : 查看容器内部细节</li>\n<li>docker logs -f 容器ID : 查看容器日志</li>\n</ol>\n</li>\n<li>\n<p>重新进入已启动的容器内部交互</p>\n<ol>\n<li>docker exec -it 容器ID /bin/bash  ：  在容器中打开新的终端，并且可以启动新的进程，用exit退出不会导致容器的停止</li>\n<li>docker attach 容器ID  : 直接进入容器启动命令的终端，不会启动新的进程，用exit退出，会导致容器的停止</li>\n</ol>\n</li>\n<li>\n<p>从容器内拷贝文件到宿主机上</p>\n<ol>\n<li>docker cp 容器ID:容器内路径  目的主机路径</li>\n</ol>\n</li>\n<li>\n<p>导入导出容器</p>\n<ol>\n<li>导出： docker export 容器ID &gt; /XX/XX/XX/文件名.tar</li>\n<li>导入： cat 文件名.tar | docker import - 镜像用户/镜像名：镜像版本号</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"docker启动示例\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#docker启动示例\"><span>Docker启动示例</span></a></h2>\n<p>docker run --name nginx-test -p 8080:80 -d nginx</p>\n<ul>\n<li>--name nginx-test：容器名称。</li>\n<li>-p 8080:80： 端口进行映射，将本地 8080 端口映射到容器内部的 80 端口。</li>\n<li>-d nginx： 设置容器在在后台一直运行。</li>\n</ul>\n<h2 id=\"example\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#example\"><span>Example</span></a></h2>\n<ol>\n<li>获取最新版本的node镜像：docker pull node:latest</li>\n<li>查看本地镜像，是否已安装了node: docker images</li>\n<li>运行容器：docker run -itd --name node-test node</li>\n<li>进入容器：docker exec -it node-test /bin/bash</li>\n<li>进入容器之后查看node版本：node -v</li>\n</ol>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"Docker是开源的容器技术，采用的是容器虚拟化技术，是容器运行的载体。\r\n## 官网\r\n1. Docker官网: http://www.docker.cn\r\n2. Docker Hub官网: https://hub.docker.com/\r\n\r\n## Docker三要素\r\n1. 镜像（image）: 相当于Java中的类\r\n2. 容器（container）: 相当于Java中的new出来的一个一个实例\r\n3. 仓库（repository）: 存放镜像的地方\r\n\r\n\r\n## Docker帮助启动类命令\r\n+ systemctl start docker : 启动docker\r\n+ systemctl stop docker : 停止docker\r\n+ systemctl restart docker : 重启docker\r\n+ systemctl status docker : 查看docker状态\r\n+ systemctl enable docker : 开机启动\r\n+ docker info : 查看docker概要信息\r\n+ docker --help : 查看docker总体帮助文档\r\n+ docker 具体命令 --help : 查看docker命令帮助文档\r\n\r\n## 镜像命令\r\n1. docker images : 查看docker上安装的镜像\r\n    + -a:列出本地所有的镜像（含历史镜像）\r\n    + -q:只显示镜像ID\r\n2. docker search [options] [xxx镜像的名字] : 查看docker镜像库中的镜像\r\n    + --limit:只列出N个镜像，默认25个\r\n    + docker search --limit 5 redis\r\n3. docker pull 镜像名字[:TAG] : 从官方镜像库中拉取镜像 tag标签为版本号，不写默认最新版\r\n4. docker system df : 查看镜像/容器/数据卷所占的空间\r\n5. docker rmi [-f] 镜像名字/镜像ID : 删除xxx镜像名字/镜像ID   -f表示强制删除\r\n6. docker rmi [-f] $(docker ps -qa)：删除所有\r\n\r\n## 容器命令\r\n+ docker ps [options]: 查看容器 \r\n    1. -a:列出当前所有正在运行的容器+历史上运行过的\r\n    2. -l:显示最近创建的容器\r\n    3. -n:显示最近n个创建的容器\r\n    4. -q:静默模式，只显示容器编号\r\n+ docker run [OPTIONS] image [COMMAND] [ARG...]\r\n    1. options说明\r\n        + --name=容器新名字 :  为容器指定一个名称\r\n        + -d:后台运行容器并返回容器ID,即为启动守护式容器\r\n        + -i:以交互模式运行容器，通常与-t同时使用\r\n        + -t:为容器重新分配一个伪输入终端，通常与-i同时使用，也即启动交互式容器\r\n        + -P:随机端口映射，大写P\r\n        + -p:指定端口映射，小写p\r\n+ 退出容器：\r\n  1. run进去容器，exit退出，容器停止\r\n  2. run进去容器，ctrl+p+q退出，容器不停止\r\n+ 启动已停止运行的容器\r\n    1. docker start 容器ID/容器名称 ： 启动已停止运行的容器\r\n+ 重启容器\r\n    1. docker restart 容器ID或容器名\r\n+ 停止容器\r\n    1. docker stop 容器ID/容器名称 ： 停止容器\r\n    2. docker kill 容器ID/容器名称 ： 强制停止容器\r\n+ 删除已停止的容器\r\n  1. docker rm 容器ID : 删除已停止的容器\r\n+ 查看容器内部\r\n  1. docker top 容器ID/name  : 查看容器内运行的进程\r\n  2. docker inspect 容器ID/name : 查看容器内部细节\r\n  3. docker logs -f 容器ID : 查看容器日志\r\n\r\n+ 重新进入已启动的容器内部交互\r\n    1. docker exec -it 容器ID /bin/bash  ：  在容器中打开新的终端，并且可以启动新的进程，用exit退出不会导致容器的停止\r\n    2. docker attach 容器ID  : 直接进入容器启动命令的终端，不会启动新的进程，用exit退出，会导致容器的停止\r\n\r\n+ 从容器内拷贝文件到宿主机上\r\n    1. docker cp 容器ID:容器内路径  目的主机路径\r\n\r\n+ 导入导出容器\r\n    1. 导出： docker export 容器ID > /XX/XX/XX/文件名.tar\r\n    2. 导入： cat 文件名.tar | docker import - 镜像用户/镜像名：镜像版本号\r\n\r\n\r\n## Docker启动示例\r\n\r\ndocker run --name nginx-test -p 8080:80 -d nginx\r\n\r\n+ --name nginx-test：容器名称。\r\n+ -p 8080:80： 端口进行映射，将本地 8080 端口映射到容器内部的 80 端口。\r\n+   -d nginx： 设置容器在在后台一直运行。\r\n\r\n## Example\r\n\r\n1. 获取最新版本的node镜像：docker pull node:latest\r\n2. 查看本地镜像，是否已安装了node: docker images\r\n3. 运行容器：docker run -itd --name node-test node\r\n4. 进入容器：docker exec -it node-test /bin/bash\r\n5. 进入容器之后查看node版本：node -v","excerpt":"","includedFiles":[],"tasklists":0,"title":"","headers":[{"level":2,"title":"官网","slug":"官网","link":"#官网","children":[]},{"level":2,"title":"Docker三要素","slug":"docker三要素","link":"#docker三要素","children":[]},{"level":2,"title":"Docker帮助启动类命令","slug":"docker帮助启动类命令","link":"#docker帮助启动类命令","children":[]},{"level":2,"title":"镜像命令","slug":"镜像命令","link":"#镜像命令","children":[]},{"level":2,"title":"容器命令","slug":"容器命令","link":"#容器命令","children":[]},{"level":2,"title":"Docker启动示例","slug":"docker启动示例","link":"#docker启动示例","children":[]},{"level":2,"title":"Example","slug":"example","link":"#example","children":[]}]}}
