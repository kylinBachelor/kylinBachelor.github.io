{
  "version": 3,
  "sources": ["../../../../node_modules/@shikijs/engine-oniguruma/dist/index.mjs"],
  "sourcesContent": ["class ShikiError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'ShikiError';\n    }\n}\n\nfunction getHeapMax() {\n    return 2147483648;\n}\nfunction _emscripten_get_now() {\n    return typeof performance !== 'undefined' ? performance.now() : Date.now();\n}\nconst alignUp = (x, multiple) => x + ((multiple - (x % multiple)) % multiple);\nasync function main(init) {\n    let wasmMemory;\n    let buffer;\n    const binding = {};\n    function updateGlobalBufferAndViews(buf) {\n        buffer = buf;\n        binding.HEAPU8 = new Uint8Array(buf);\n        binding.HEAPU32 = new Uint32Array(buf);\n    }\n    function _emscripten_memcpy_big(dest, src, num) {\n        binding.HEAPU8.copyWithin(dest, src, src + num);\n    }\n    function emscripten_realloc_buffer(size) {\n        try {\n            wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16);\n            updateGlobalBufferAndViews(wasmMemory.buffer);\n            return 1;\n        }\n        catch { }\n    }\n    function _emscripten_resize_heap(requestedSize) {\n        const oldSize = binding.HEAPU8.length;\n        requestedSize = requestedSize >>> 0;\n        const maxHeapSize = getHeapMax();\n        if (requestedSize > maxHeapSize)\n            return false;\n        for (let cutDown = 1; cutDown <= 4; cutDown *= 2) {\n            let overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);\n            overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n            const newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n            const replacement = emscripten_realloc_buffer(newSize);\n            if (replacement)\n                return true;\n        }\n        return false;\n    }\n    const UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;\n    function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead = 1024) {\n        const endIdx = idx + maxBytesToRead;\n        let endPtr = idx;\n        while (heapOrArray[endPtr] && !(endPtr >= endIdx))\n            ++endPtr;\n        if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n            return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n        }\n        let str = '';\n        while (idx < endPtr) {\n            let u0 = heapOrArray[idx++];\n            if (!(u0 & 128)) {\n                str += String.fromCharCode(u0);\n                continue;\n            }\n            const u1 = heapOrArray[idx++] & 63;\n            if ((u0 & 224) === 192) {\n                str += String.fromCharCode(((u0 & 31) << 6) | u1);\n                continue;\n            }\n            const u2 = heapOrArray[idx++] & 63;\n            if ((u0 & 240) === 224) {\n                u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n            }\n            else {\n                u0 = ((u0 & 7) << 18)\n                    | (u1 << 12)\n                    | (u2 << 6)\n                    | (heapOrArray[idx++] & 63);\n            }\n            if (u0 < 65536) {\n                str += String.fromCharCode(u0);\n            }\n            else {\n                const ch = u0 - 65536;\n                str += String.fromCharCode(55296 | (ch >> 10), 56320 | (ch & 1023));\n            }\n        }\n        return str;\n    }\n    function UTF8ToString(ptr, maxBytesToRead) {\n        return ptr ? UTF8ArrayToString(binding.HEAPU8, ptr, maxBytesToRead) : '';\n    }\n    const asmLibraryArg = {\n        emscripten_get_now: _emscripten_get_now,\n        emscripten_memcpy_big: _emscripten_memcpy_big,\n        emscripten_resize_heap: _emscripten_resize_heap,\n        fd_write: () => 0,\n    };\n    async function createWasm() {\n        const info = {\n            env: asmLibraryArg,\n            wasi_snapshot_preview1: asmLibraryArg,\n        };\n        const exports = await init(info);\n        wasmMemory = exports.memory;\n        updateGlobalBufferAndViews(wasmMemory.buffer);\n        Object.assign(binding, exports);\n        binding.UTF8ToString = UTF8ToString;\n    }\n    await createWasm();\n    return binding;\n}\n\n/* ---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *-------------------------------------------------------- */\nlet onigBinding = null;\n// let defaultDebugCall = false\nfunction throwLastOnigError(onigBinding) {\n    throw new ShikiError(onigBinding.UTF8ToString(onigBinding.getLastOnigError()));\n}\nclass UtfString {\n    static _utf8ByteLength(str) {\n        let result = 0;\n        for (let i = 0, len = str.length; i < len; i++) {\n            const charCode = str.charCodeAt(i);\n            let codepoint = charCode;\n            let wasSurrogatePair = false;\n            if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n                // Hit a high surrogate, try to look for a matching low surrogate\n                if (i + 1 < len) {\n                    const nextCharCode = str.charCodeAt(i + 1);\n                    if (nextCharCode >= 0xDC00 && nextCharCode <= 0xDFFF) {\n                        // Found the matching low surrogate\n                        codepoint = (((charCode - 0xD800) << 10) + 0x10000) | (nextCharCode - 0xDC00);\n                        wasSurrogatePair = true;\n                    }\n                }\n            }\n            if (codepoint <= 0x7F)\n                result += 1;\n            else if (codepoint <= 0x7FF)\n                result += 2;\n            else if (codepoint <= 0xFFFF)\n                result += 3;\n            else\n                result += 4;\n            if (wasSurrogatePair)\n                i++;\n        }\n        return result;\n    }\n    utf16Length;\n    utf8Length;\n    utf16Value;\n    utf8Value;\n    utf16OffsetToUtf8;\n    utf8OffsetToUtf16;\n    constructor(str) {\n        const utf16Length = str.length;\n        const utf8Length = UtfString._utf8ByteLength(str);\n        const computeIndicesMapping = (utf8Length !== utf16Length);\n        const utf16OffsetToUtf8 = computeIndicesMapping ? new Uint32Array(utf16Length + 1) : null;\n        if (computeIndicesMapping)\n            utf16OffsetToUtf8[utf16Length] = utf8Length;\n        const utf8OffsetToUtf16 = computeIndicesMapping ? new Uint32Array(utf8Length + 1) : null;\n        if (computeIndicesMapping)\n            utf8OffsetToUtf16[utf8Length] = utf16Length;\n        const utf8Value = new Uint8Array(utf8Length);\n        let i8 = 0;\n        for (let i16 = 0; i16 < utf16Length; i16++) {\n            const charCode = str.charCodeAt(i16);\n            let codePoint = charCode;\n            let wasSurrogatePair = false;\n            if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n                // Hit a high surrogate, try to look for a matching low surrogate\n                if (i16 + 1 < utf16Length) {\n                    const nextCharCode = str.charCodeAt(i16 + 1);\n                    if (nextCharCode >= 0xDC00 && nextCharCode <= 0xDFFF) {\n                        // Found the matching low surrogate\n                        codePoint = (((charCode - 0xD800) << 10) + 0x10000) | (nextCharCode - 0xDC00);\n                        wasSurrogatePair = true;\n                    }\n                }\n            }\n            if (computeIndicesMapping) {\n                utf16OffsetToUtf8[i16] = i8;\n                if (wasSurrogatePair)\n                    utf16OffsetToUtf8[i16 + 1] = i8;\n                if (codePoint <= 0x7F) {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                }\n                else if (codePoint <= 0x7FF) {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                    utf8OffsetToUtf16[i8 + 1] = i16;\n                }\n                else if (codePoint <= 0xFFFF) {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                    utf8OffsetToUtf16[i8 + 1] = i16;\n                    utf8OffsetToUtf16[i8 + 2] = i16;\n                }\n                else {\n                    utf8OffsetToUtf16[i8 + 0] = i16;\n                    utf8OffsetToUtf16[i8 + 1] = i16;\n                    utf8OffsetToUtf16[i8 + 2] = i16;\n                    utf8OffsetToUtf16[i8 + 3] = i16;\n                }\n            }\n            if (codePoint <= 0x7F) {\n                utf8Value[i8++] = codePoint;\n            }\n            else if (codePoint <= 0x7FF) {\n                utf8Value[i8++] = 0b11000000 | ((codePoint & 0b00000000000000000000011111000000) >>> 6);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n            }\n            else if (codePoint <= 0xFFFF) {\n                utf8Value[i8++] = 0b11100000 | ((codePoint & 0b00000000000000001111000000000000) >>> 12);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n            }\n            else {\n                utf8Value[i8++] = 0b11110000 | ((codePoint & 0b00000000000111000000000000000000) >>> 18);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000111111000000000000) >>> 12);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000111111000000) >>> 6);\n                utf8Value[i8++] = 0b10000000 | ((codePoint & 0b00000000000000000000000000111111) >>> 0);\n            }\n            if (wasSurrogatePair)\n                i16++;\n        }\n        this.utf16Length = utf16Length;\n        this.utf8Length = utf8Length;\n        this.utf16Value = str;\n        this.utf8Value = utf8Value;\n        this.utf16OffsetToUtf8 = utf16OffsetToUtf8;\n        this.utf8OffsetToUtf16 = utf8OffsetToUtf16;\n    }\n    createString(onigBinding) {\n        const result = onigBinding.omalloc(this.utf8Length);\n        onigBinding.HEAPU8.set(this.utf8Value, result);\n        return result;\n    }\n}\nclass OnigString {\n    static LAST_ID = 0;\n    static _sharedPtr = 0; // a pointer to a string of 10000 bytes\n    static _sharedPtrInUse = false;\n    id = (++OnigString.LAST_ID);\n    _onigBinding;\n    content;\n    utf16Length;\n    utf8Length;\n    utf16OffsetToUtf8;\n    utf8OffsetToUtf16;\n    ptr;\n    constructor(str) {\n        if (!onigBinding)\n            throw new ShikiError('Must invoke loadWasm first.');\n        this._onigBinding = onigBinding;\n        this.content = str;\n        const utfString = new UtfString(str);\n        this.utf16Length = utfString.utf16Length;\n        this.utf8Length = utfString.utf8Length;\n        this.utf16OffsetToUtf8 = utfString.utf16OffsetToUtf8;\n        this.utf8OffsetToUtf16 = utfString.utf8OffsetToUtf16;\n        if (this.utf8Length < 10000 && !OnigString._sharedPtrInUse) {\n            if (!OnigString._sharedPtr)\n                OnigString._sharedPtr = onigBinding.omalloc(10000);\n            OnigString._sharedPtrInUse = true;\n            onigBinding.HEAPU8.set(utfString.utf8Value, OnigString._sharedPtr);\n            this.ptr = OnigString._sharedPtr;\n        }\n        else {\n            this.ptr = utfString.createString(onigBinding);\n        }\n    }\n    convertUtf8OffsetToUtf16(utf8Offset) {\n        if (this.utf8OffsetToUtf16) {\n            if (utf8Offset < 0)\n                return 0;\n            if (utf8Offset > this.utf8Length)\n                return this.utf16Length;\n            return this.utf8OffsetToUtf16[utf8Offset];\n        }\n        return utf8Offset;\n    }\n    convertUtf16OffsetToUtf8(utf16Offset) {\n        if (this.utf16OffsetToUtf8) {\n            if (utf16Offset < 0)\n                return 0;\n            if (utf16Offset > this.utf16Length)\n                return this.utf8Length;\n            return this.utf16OffsetToUtf8[utf16Offset];\n        }\n        return utf16Offset;\n    }\n    dispose() {\n        if (this.ptr === OnigString._sharedPtr)\n            OnigString._sharedPtrInUse = false;\n        else\n            this._onigBinding.ofree(this.ptr);\n    }\n}\nclass OnigScanner {\n    _onigBinding;\n    _ptr;\n    constructor(patterns) {\n        if (!onigBinding)\n            throw new ShikiError('Must invoke loadWasm first.');\n        const strPtrsArr = [];\n        const strLenArr = [];\n        for (let i = 0, len = patterns.length; i < len; i++) {\n            const utfString = new UtfString(patterns[i]);\n            strPtrsArr[i] = utfString.createString(onigBinding);\n            strLenArr[i] = utfString.utf8Length;\n        }\n        const strPtrsPtr = onigBinding.omalloc(4 * patterns.length);\n        onigBinding.HEAPU32.set(strPtrsArr, strPtrsPtr / 4);\n        const strLenPtr = onigBinding.omalloc(4 * patterns.length);\n        onigBinding.HEAPU32.set(strLenArr, strLenPtr / 4);\n        const scannerPtr = onigBinding.createOnigScanner(strPtrsPtr, strLenPtr, patterns.length);\n        for (let i = 0, len = patterns.length; i < len; i++)\n            onigBinding.ofree(strPtrsArr[i]);\n        onigBinding.ofree(strLenPtr);\n        onigBinding.ofree(strPtrsPtr);\n        if (scannerPtr === 0)\n            throwLastOnigError(onigBinding);\n        this._onigBinding = onigBinding;\n        this._ptr = scannerPtr;\n    }\n    dispose() {\n        this._onigBinding.freeOnigScanner(this._ptr);\n    }\n    findNextMatchSync(string, startPosition, arg) {\n        // let debugCall = defaultDebugCall\n        let options = 0 /* FindOption.None */;\n        if (typeof arg === 'number') {\n            // if (arg & FindOption.DebugCall)\n            //   debugCall = true\n            options = arg;\n        }\n        if (typeof string === 'string') {\n            string = new OnigString(string);\n            const result = this._findNextMatchSync(string, startPosition, false, options);\n            string.dispose();\n            return result;\n        }\n        return this._findNextMatchSync(string, startPosition, false, options);\n    }\n    _findNextMatchSync(string, startPosition, debugCall, options) {\n        const onigBinding = this._onigBinding;\n        // let resultPtr: Pointer\n        // if (debugCall)\n        //   resultPtr = onigBinding.findNextOnigScannerMatchDbg(this._ptr, string.id, string.ptr, string.utf8Length, string.convertUtf16OffsetToUtf8(startPosition), options)\n        // else\n        const resultPtr = onigBinding.findNextOnigScannerMatch(this._ptr, string.id, string.ptr, string.utf8Length, string.convertUtf16OffsetToUtf8(startPosition), options);\n        if (resultPtr === 0) {\n            // no match\n            return null;\n        }\n        const HEAPU32 = onigBinding.HEAPU32;\n        let offset = resultPtr / 4; // byte offset -> uint32 offset\n        const index = HEAPU32[offset++];\n        const count = HEAPU32[offset++];\n        const captureIndices = [];\n        for (let i = 0; i < count; i++) {\n            const beg = string.convertUtf8OffsetToUtf16(HEAPU32[offset++]);\n            const end = string.convertUtf8OffsetToUtf16(HEAPU32[offset++]);\n            captureIndices[i] = {\n                start: beg,\n                end,\n                length: end - beg,\n            };\n        }\n        return {\n            index,\n            captureIndices,\n        };\n    }\n}\nfunction isInstantiatorOptionsObject(dataOrOptions) {\n    return (typeof dataOrOptions.instantiator === 'function');\n}\nfunction isInstantiatorModule(dataOrOptions) {\n    return (typeof dataOrOptions.default === 'function');\n}\nfunction isDataOptionsObject(dataOrOptions) {\n    return (typeof dataOrOptions.data !== 'undefined');\n}\nfunction isResponse(dataOrOptions) {\n    return (typeof Response !== 'undefined' && dataOrOptions instanceof Response);\n}\nfunction isArrayBuffer(data) {\n    return (typeof ArrayBuffer !== 'undefined' && (data instanceof ArrayBuffer || ArrayBuffer.isView(data)))\n        // eslint-disable-next-line node/prefer-global/buffer\n        || (typeof Buffer !== 'undefined' && Buffer.isBuffer?.(data))\n        || (typeof SharedArrayBuffer !== 'undefined' && data instanceof SharedArrayBuffer)\n        || (typeof Uint32Array !== 'undefined' && data instanceof Uint32Array);\n}\nlet initPromise;\nfunction loadWasm(options) {\n    if (initPromise)\n        return initPromise;\n    async function _load() {\n        onigBinding = await main(async (info) => {\n            let instance = options;\n            instance = await instance;\n            if (typeof instance === 'function')\n                instance = await instance(info);\n            if (typeof instance === 'function')\n                instance = await instance(info);\n            if (isInstantiatorOptionsObject(instance)) {\n                instance = await instance.instantiator(info);\n            }\n            else if (isInstantiatorModule(instance)) {\n                instance = await instance.default(info);\n            }\n            else {\n                if (isDataOptionsObject(instance))\n                    instance = instance.data;\n                if (isResponse(instance)) {\n                    if (typeof WebAssembly.instantiateStreaming === 'function')\n                        instance = await _makeResponseStreamingLoader(instance)(info);\n                    else\n                        instance = await _makeResponseNonStreamingLoader(instance)(info);\n                }\n                else if (isArrayBuffer(instance)) {\n                    instance = await _makeArrayBufferLoader(instance)(info);\n                }\n                // import(\"shiki/onig.wasm\") returns `{ default: WebAssembly.Module }` on cloudflare workers\n                // https://developers.cloudflare.com/workers/wrangler/bundling/\n                else if (instance instanceof WebAssembly.Module) {\n                    instance = await _makeArrayBufferLoader(instance)(info);\n                }\n                else if ('default' in instance && instance.default instanceof WebAssembly.Module) {\n                    instance = await _makeArrayBufferLoader(instance.default)(info);\n                }\n            }\n            if ('instance' in instance)\n                instance = instance.instance;\n            if ('exports' in instance)\n                instance = instance.exports;\n            return instance;\n        });\n    }\n    initPromise = _load();\n    return initPromise;\n}\nfunction _makeArrayBufferLoader(data) {\n    return importObject => WebAssembly.instantiate(data, importObject);\n}\nfunction _makeResponseStreamingLoader(data) {\n    return importObject => WebAssembly.instantiateStreaming(data, importObject);\n}\nfunction _makeResponseNonStreamingLoader(data) {\n    return async (importObject) => {\n        const arrayBuffer = await data.arrayBuffer();\n        return WebAssembly.instantiate(arrayBuffer, importObject);\n    };\n}\n// export function createOnigString(str: string) {\n//   return new OnigString(str)\n// }\n// export function createOnigScanner(patterns: string[]) {\n//   return new OnigScanner(patterns)\n// }\n// export function setDefaultDebugCall(_defaultDebugCall: boolean): void {\n//   defaultDebugCall = _defaultDebugCall\n// }\n\nlet _defaultWasmLoader;\n/**\n * Set the default wasm loader for `loadWasm`.\n * @internal\n */\nfunction setDefaultWasmLoader(_loader) {\n    _defaultWasmLoader = _loader;\n}\n/**\n * @internal\n */\nfunction getDefaultWasmLoader() {\n    return _defaultWasmLoader;\n}\nasync function createOnigurumaEngine(options) {\n    if (options)\n        await loadWasm(options);\n    return {\n        createScanner(patterns) {\n            return new OnigScanner(patterns);\n        },\n        createString(s) {\n            return new OnigString(s);\n        },\n    };\n}\n/**\n * Deprecated. Use `createOnigurumaEngine` instead.\n */\nasync function createWasmOnigEngine(options) {\n    return createOnigurumaEngine(options);\n}\n\nexport { createOnigurumaEngine, createWasmOnigEngine, getDefaultWasmLoader, loadWasm, setDefaultWasmLoader };\n"],
  "mappings": ";;;;;AAAA,IAAM,aAAN,cAAyB,MAAM;AAAA,EAC3B,YAAY,SAAS;AACjB,UAAM,OAAO;AACb,SAAK,OAAO;AAAA,EAChB;AACJ;AAEA,SAAS,aAAa;AAClB,SAAO;AACX;AACA,SAAS,sBAAsB;AAC3B,SAAO,OAAO,gBAAgB,cAAc,YAAY,IAAI,IAAI,KAAK,IAAI;AAC7E;AACA,IAAM,UAAU,CAAC,GAAG,aAAa,KAAM,WAAY,IAAI,YAAa;AACpE,eAAe,KAAK,MAAM;AACtB,MAAI;AACJ,MAAI;AACJ,QAAM,UAAU,CAAC;AACjB,WAAS,2BAA2B,KAAK;AACrC,aAAS;AACT,YAAQ,SAAS,IAAI,WAAW,GAAG;AACnC,YAAQ,UAAU,IAAI,YAAY,GAAG;AAAA,EACzC;AACA,WAAS,uBAAuB,MAAM,KAAK,KAAK;AAC5C,YAAQ,OAAO,WAAW,MAAM,KAAK,MAAM,GAAG;AAAA,EAClD;AACA,WAAS,0BAA0B,MAAM;AACrC,QAAI;AACA,iBAAW,KAAM,OAAO,OAAO,aAAa,UAAW,EAAE;AACzD,iCAA2B,WAAW,MAAM;AAC5C,aAAO;AAAA,IACX,QACM;AAAA,IAAE;AAAA,EACZ;AACA,WAAS,wBAAwB,eAAe;AAC5C,UAAM,UAAU,QAAQ,OAAO;AAC/B,oBAAgB,kBAAkB;AAClC,UAAM,cAAc,WAAW;AAC/B,QAAI,gBAAgB;AAChB,aAAO;AACX,aAAS,UAAU,GAAG,WAAW,GAAG,WAAW,GAAG;AAC9C,UAAI,oBAAoB,WAAW,IAAI,MAAM;AAC7C,0BAAoB,KAAK,IAAI,mBAAmB,gBAAgB,SAAS;AACzE,YAAM,UAAU,KAAK,IAAI,aAAa,QAAQ,KAAK,IAAI,eAAe,iBAAiB,GAAG,KAAK,CAAC;AAChG,YAAM,cAAc,0BAA0B,OAAO;AACrD,UAAI;AACA,eAAO;AAAA,IACf;AACA,WAAO;AAAA,EACX;AACA,QAAM,cAAc,OAAO,eAAe,cAAc,IAAI,YAAY,MAAM,IAAI;AAClF,WAAS,kBAAkB,aAAa,KAAK,iBAAiB,MAAM;AAChE,UAAM,SAAS,MAAM;AACrB,QAAI,SAAS;AACb,WAAO,YAAY,MAAM,KAAK,EAAE,UAAU;AACtC,QAAE;AACN,QAAI,SAAS,MAAM,MAAM,YAAY,UAAU,aAAa;AACxD,aAAO,YAAY,OAAO,YAAY,SAAS,KAAK,MAAM,CAAC;AAAA,IAC/D;AACA,QAAI,MAAM;AACV,WAAO,MAAM,QAAQ;AACjB,UAAI,KAAK,YAAY,KAAK;AAC1B,UAAI,EAAE,KAAK,MAAM;AACb,eAAO,OAAO,aAAa,EAAE;AAC7B;AAAA,MACJ;AACA,YAAM,KAAK,YAAY,KAAK,IAAI;AAChC,WAAK,KAAK,SAAS,KAAK;AACpB,eAAO,OAAO,cAAe,KAAK,OAAO,IAAK,EAAE;AAChD;AAAA,MACJ;AACA,YAAM,KAAK,YAAY,KAAK,IAAI;AAChC,WAAK,KAAK,SAAS,KAAK;AACpB,cAAO,KAAK,OAAO,KAAO,MAAM,IAAK;AAAA,MACzC,OACK;AACD,cAAO,KAAK,MAAM,KACX,MAAM,KACN,MAAM,IACN,YAAY,KAAK,IAAI;AAAA,MAChC;AACA,UAAI,KAAK,OAAO;AACZ,eAAO,OAAO,aAAa,EAAE;AAAA,MACjC,OACK;AACD,cAAM,KAAK,KAAK;AAChB,eAAO,OAAO,aAAa,QAAS,MAAM,IAAK,QAAS,KAAK,IAAK;AAAA,MACtE;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACA,WAAS,aAAa,KAAK,gBAAgB;AACvC,WAAO,MAAM,kBAAkB,QAAQ,QAAQ,KAAK,cAAc,IAAI;AAAA,EAC1E;AACA,QAAM,gBAAgB;AAAA,IAClB,oBAAoB;AAAA,IACpB,uBAAuB;AAAA,IACvB,wBAAwB;AAAA,IACxB,UAAU,MAAM;AAAA,EACpB;AACA,iBAAe,aAAa;AACxB,UAAM,OAAO;AAAA,MACT,KAAK;AAAA,MACL,wBAAwB;AAAA,IAC5B;AACA,UAAM,UAAU,MAAM,KAAK,IAAI;AAC/B,iBAAa,QAAQ;AACrB,+BAA2B,WAAW,MAAM;AAC5C,WAAO,OAAO,SAAS,OAAO;AAC9B,YAAQ,eAAe;AAAA,EAC3B;AACA,QAAM,WAAW;AACjB,SAAO;AACX;AAKA,IAAI,cAAc;AAElB,SAAS,mBAAmBA,cAAa;AACrC,QAAM,IAAI,WAAWA,aAAY,aAAaA,aAAY,iBAAiB,CAAC,CAAC;AACjF;AACA,IAAM,YAAN,MAAM,WAAU;AAAA,EAqCZ,YAAY,KAAK;AANjB;AACA;AACA;AACA;AACA;AACA;AAEI,UAAM,cAAc,IAAI;AACxB,UAAM,aAAa,WAAU,gBAAgB,GAAG;AAChD,UAAM,wBAAyB,eAAe;AAC9C,UAAM,oBAAoB,wBAAwB,IAAI,YAAY,cAAc,CAAC,IAAI;AACrF,QAAI;AACA,wBAAkB,WAAW,IAAI;AACrC,UAAM,oBAAoB,wBAAwB,IAAI,YAAY,aAAa,CAAC,IAAI;AACpF,QAAI;AACA,wBAAkB,UAAU,IAAI;AACpC,UAAM,YAAY,IAAI,WAAW,UAAU;AAC3C,QAAI,KAAK;AACT,aAAS,MAAM,GAAG,MAAM,aAAa,OAAO;AACxC,YAAM,WAAW,IAAI,WAAW,GAAG;AACnC,UAAI,YAAY;AAChB,UAAI,mBAAmB;AACvB,UAAI,YAAY,SAAU,YAAY,OAAQ;AAE1C,YAAI,MAAM,IAAI,aAAa;AACvB,gBAAM,eAAe,IAAI,WAAW,MAAM,CAAC;AAC3C,cAAI,gBAAgB,SAAU,gBAAgB,OAAQ;AAElD,yBAAe,WAAW,SAAW,MAAM,QAAY,eAAe;AACtE,+BAAmB;AAAA,UACvB;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,uBAAuB;AACvB,0BAAkB,GAAG,IAAI;AACzB,YAAI;AACA,4BAAkB,MAAM,CAAC,IAAI;AACjC,YAAI,aAAa,KAAM;AACnB,4BAAkB,KAAK,CAAC,IAAI;AAAA,QAChC,WACS,aAAa,MAAO;AACzB,4BAAkB,KAAK,CAAC,IAAI;AAC5B,4BAAkB,KAAK,CAAC,IAAI;AAAA,QAChC,WACS,aAAa,OAAQ;AAC1B,4BAAkB,KAAK,CAAC,IAAI;AAC5B,4BAAkB,KAAK,CAAC,IAAI;AAC5B,4BAAkB,KAAK,CAAC,IAAI;AAAA,QAChC,OACK;AACD,4BAAkB,KAAK,CAAC,IAAI;AAC5B,4BAAkB,KAAK,CAAC,IAAI;AAC5B,4BAAkB,KAAK,CAAC,IAAI;AAC5B,4BAAkB,KAAK,CAAC,IAAI;AAAA,QAChC;AAAA,MACJ;AACA,UAAI,aAAa,KAAM;AACnB,kBAAU,IAAI,IAAI;AAAA,MACtB,WACS,aAAa,MAAO;AACzB,kBAAU,IAAI,IAAI,OAAe,YAAY,UAAwC;AACrF,kBAAU,IAAI,IAAI,OAAe,YAAY,QAAwC;AAAA,MACzF,WACS,aAAa,OAAQ;AAC1B,kBAAU,IAAI,IAAI,OAAe,YAAY,WAAwC;AACrF,kBAAU,IAAI,IAAI,OAAe,YAAY,UAAwC;AACrF,kBAAU,IAAI,IAAI,OAAe,YAAY,QAAwC;AAAA,MACzF,OACK;AACD,kBAAU,IAAI,IAAI,OAAe,YAAY,aAAwC;AACrF,kBAAU,IAAI,IAAI,OAAe,YAAY,YAAwC;AACrF,kBAAU,IAAI,IAAI,OAAe,YAAY,UAAwC;AACrF,kBAAU,IAAI,IAAI,OAAe,YAAY,QAAwC;AAAA,MACzF;AACA,UAAI;AACA;AAAA,IACR;AACA,SAAK,cAAc;AACnB,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,YAAY;AACjB,SAAK,oBAAoB;AACzB,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EAjHA,OAAO,gBAAgB,KAAK;AACxB,QAAI,SAAS;AACb,aAAS,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC5C,YAAM,WAAW,IAAI,WAAW,CAAC;AACjC,UAAI,YAAY;AAChB,UAAI,mBAAmB;AACvB,UAAI,YAAY,SAAU,YAAY,OAAQ;AAE1C,YAAI,IAAI,IAAI,KAAK;AACb,gBAAM,eAAe,IAAI,WAAW,IAAI,CAAC;AACzC,cAAI,gBAAgB,SAAU,gBAAgB,OAAQ;AAElD,yBAAe,WAAW,SAAW,MAAM,QAAY,eAAe;AACtE,+BAAmB;AAAA,UACvB;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,aAAa;AACb,kBAAU;AAAA,eACL,aAAa;AAClB,kBAAU;AAAA,eACL,aAAa;AAClB,kBAAU;AAAA;AAEV,kBAAU;AACd,UAAI;AACA;AAAA,IACR;AACA,WAAO;AAAA,EACX;AAAA,EAqFA,aAAaA,cAAa;AACtB,UAAM,SAASA,aAAY,QAAQ,KAAK,UAAU;AAClD,IAAAA,aAAY,OAAO,IAAI,KAAK,WAAW,MAAM;AAC7C,WAAO;AAAA,EACX;AACJ;AACA,IAAM,cAAN,MAAM,YAAW;AAAA,EAYb,YAAY,KAAK;AARjB,8BAAM,EAAE,YAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AAEI,QAAI,CAAC;AACD,YAAM,IAAI,WAAW,6BAA6B;AACtD,SAAK,eAAe;AACpB,SAAK,UAAU;AACf,UAAM,YAAY,IAAI,UAAU,GAAG;AACnC,SAAK,cAAc,UAAU;AAC7B,SAAK,aAAa,UAAU;AAC5B,SAAK,oBAAoB,UAAU;AACnC,SAAK,oBAAoB,UAAU;AACnC,QAAI,KAAK,aAAa,OAAS,CAAC,YAAW,iBAAiB;AACxD,UAAI,CAAC,YAAW;AACZ,oBAAW,aAAa,YAAY,QAAQ,GAAK;AACrD,kBAAW,kBAAkB;AAC7B,kBAAY,OAAO,IAAI,UAAU,WAAW,YAAW,UAAU;AACjE,WAAK,MAAM,YAAW;AAAA,IAC1B,OACK;AACD,WAAK,MAAM,UAAU,aAAa,WAAW;AAAA,IACjD;AAAA,EACJ;AAAA,EACA,yBAAyB,YAAY;AACjC,QAAI,KAAK,mBAAmB;AACxB,UAAI,aAAa;AACb,eAAO;AACX,UAAI,aAAa,KAAK;AAClB,eAAO,KAAK;AAChB,aAAO,KAAK,kBAAkB,UAAU;AAAA,IAC5C;AACA,WAAO;AAAA,EACX;AAAA,EACA,yBAAyB,aAAa;AAClC,QAAI,KAAK,mBAAmB;AACxB,UAAI,cAAc;AACd,eAAO;AACX,UAAI,cAAc,KAAK;AACnB,eAAO,KAAK;AAChB,aAAO,KAAK,kBAAkB,WAAW;AAAA,IAC7C;AACA,WAAO;AAAA,EACX;AAAA,EACA,UAAU;AACN,QAAI,KAAK,QAAQ,YAAW;AACxB,kBAAW,kBAAkB;AAAA;AAE7B,WAAK,aAAa,MAAM,KAAK,GAAG;AAAA,EACxC;AACJ;AA1DI,cADE,aACK,WAAU;AACjB,cAFE,aAEK,cAAa;AAAA;AACpB,cAHE,aAGK,mBAAkB;AAH7B,IAAM,aAAN;AA4DA,IAAM,cAAN,MAAkB;AAAA,EAGd,YAAY,UAAU;AAFtB;AACA;AAEI,QAAI,CAAC;AACD,YAAM,IAAI,WAAW,6BAA6B;AACtD,UAAM,aAAa,CAAC;AACpB,UAAM,YAAY,CAAC;AACnB,aAAS,IAAI,GAAG,MAAM,SAAS,QAAQ,IAAI,KAAK,KAAK;AACjD,YAAM,YAAY,IAAI,UAAU,SAAS,CAAC,CAAC;AAC3C,iBAAW,CAAC,IAAI,UAAU,aAAa,WAAW;AAClD,gBAAU,CAAC,IAAI,UAAU;AAAA,IAC7B;AACA,UAAM,aAAa,YAAY,QAAQ,IAAI,SAAS,MAAM;AAC1D,gBAAY,QAAQ,IAAI,YAAY,aAAa,CAAC;AAClD,UAAM,YAAY,YAAY,QAAQ,IAAI,SAAS,MAAM;AACzD,gBAAY,QAAQ,IAAI,WAAW,YAAY,CAAC;AAChD,UAAM,aAAa,YAAY,kBAAkB,YAAY,WAAW,SAAS,MAAM;AACvF,aAAS,IAAI,GAAG,MAAM,SAAS,QAAQ,IAAI,KAAK;AAC5C,kBAAY,MAAM,WAAW,CAAC,CAAC;AACnC,gBAAY,MAAM,SAAS;AAC3B,gBAAY,MAAM,UAAU;AAC5B,QAAI,eAAe;AACf,yBAAmB,WAAW;AAClC,SAAK,eAAe;AACpB,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,UAAU;AACN,SAAK,aAAa,gBAAgB,KAAK,IAAI;AAAA,EAC/C;AAAA,EACA,kBAAkB,QAAQ,eAAe,KAAK;AAE1C,QAAI,UAAU;AACd,QAAI,OAAO,QAAQ,UAAU;AAGzB,gBAAU;AAAA,IACd;AACA,QAAI,OAAO,WAAW,UAAU;AAC5B,eAAS,IAAI,WAAW,MAAM;AAC9B,YAAM,SAAS,KAAK,mBAAmB,QAAQ,eAAe,OAAO,OAAO;AAC5E,aAAO,QAAQ;AACf,aAAO;AAAA,IACX;AACA,WAAO,KAAK,mBAAmB,QAAQ,eAAe,OAAO,OAAO;AAAA,EACxE;AAAA,EACA,mBAAmB,QAAQ,eAAe,WAAW,SAAS;AAC1D,UAAMA,eAAc,KAAK;AAKzB,UAAM,YAAYA,aAAY,yBAAyB,KAAK,MAAM,OAAO,IAAI,OAAO,KAAK,OAAO,YAAY,OAAO,yBAAyB,aAAa,GAAG,OAAO;AACnK,QAAI,cAAc,GAAG;AAEjB,aAAO;AAAA,IACX;AACA,UAAM,UAAUA,aAAY;AAC5B,QAAI,SAAS,YAAY;AACzB,UAAM,QAAQ,QAAQ,QAAQ;AAC9B,UAAM,QAAQ,QAAQ,QAAQ;AAC9B,UAAM,iBAAiB,CAAC;AACxB,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B,YAAM,MAAM,OAAO,yBAAyB,QAAQ,QAAQ,CAAC;AAC7D,YAAM,MAAM,OAAO,yBAAyB,QAAQ,QAAQ,CAAC;AAC7D,qBAAe,CAAC,IAAI;AAAA,QAChB,OAAO;AAAA,QACP;AAAA,QACA,QAAQ,MAAM;AAAA,MAClB;AAAA,IACJ;AACA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AACJ;AACA,SAAS,4BAA4B,eAAe;AAChD,SAAQ,OAAO,cAAc,iBAAiB;AAClD;AACA,SAAS,qBAAqB,eAAe;AACzC,SAAQ,OAAO,cAAc,YAAY;AAC7C;AACA,SAAS,oBAAoB,eAAe;AACxC,SAAQ,OAAO,cAAc,SAAS;AAC1C;AACA,SAAS,WAAW,eAAe;AAC/B,SAAQ,OAAO,aAAa,eAAe,yBAAyB;AACxE;AACA,SAAS,cAAc,MAAM;AAzY7B;AA0YI,SAAQ,OAAO,gBAAgB,gBAAgB,gBAAgB,eAAe,YAAY,OAAO,IAAI,MAE7F,OAAO,WAAW,iBAAe,YAAO,aAAP,gCAAkB,UACnD,OAAO,sBAAsB,eAAe,gBAAgB,qBAC5D,OAAO,gBAAgB,eAAe,gBAAgB;AAClE;AACA,IAAI;AACJ,SAAS,SAAS,SAAS;AACvB,MAAI;AACA,WAAO;AACX,iBAAe,QAAQ;AACnB,kBAAc,MAAM,KAAK,OAAO,SAAS;AACrC,UAAI,WAAW;AACf,iBAAW,MAAM;AACjB,UAAI,OAAO,aAAa;AACpB,mBAAW,MAAM,SAAS,IAAI;AAClC,UAAI,OAAO,aAAa;AACpB,mBAAW,MAAM,SAAS,IAAI;AAClC,UAAI,4BAA4B,QAAQ,GAAG;AACvC,mBAAW,MAAM,SAAS,aAAa,IAAI;AAAA,MAC/C,WACS,qBAAqB,QAAQ,GAAG;AACrC,mBAAW,MAAM,SAAS,QAAQ,IAAI;AAAA,MAC1C,OACK;AACD,YAAI,oBAAoB,QAAQ;AAC5B,qBAAW,SAAS;AACxB,YAAI,WAAW,QAAQ,GAAG;AACtB,cAAI,OAAO,YAAY,yBAAyB;AAC5C,uBAAW,MAAM,6BAA6B,QAAQ,EAAE,IAAI;AAAA;AAE5D,uBAAW,MAAM,gCAAgC,QAAQ,EAAE,IAAI;AAAA,QACvE,WACS,cAAc,QAAQ,GAAG;AAC9B,qBAAW,MAAM,uBAAuB,QAAQ,EAAE,IAAI;AAAA,QAC1D,WAGS,oBAAoB,YAAY,QAAQ;AAC7C,qBAAW,MAAM,uBAAuB,QAAQ,EAAE,IAAI;AAAA,QAC1D,WACS,aAAa,YAAY,SAAS,mBAAmB,YAAY,QAAQ;AAC9E,qBAAW,MAAM,uBAAuB,SAAS,OAAO,EAAE,IAAI;AAAA,QAClE;AAAA,MACJ;AACA,UAAI,cAAc;AACd,mBAAW,SAAS;AACxB,UAAI,aAAa;AACb,mBAAW,SAAS;AACxB,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AACA,gBAAc,MAAM;AACpB,SAAO;AACX;AACA,SAAS,uBAAuB,MAAM;AAClC,SAAO,kBAAgB,YAAY,YAAY,MAAM,YAAY;AACrE;AACA,SAAS,6BAA6B,MAAM;AACxC,SAAO,kBAAgB,YAAY,qBAAqB,MAAM,YAAY;AAC9E;AACA,SAAS,gCAAgC,MAAM;AAC3C,SAAO,OAAO,iBAAiB;AAC3B,UAAM,cAAc,MAAM,KAAK,YAAY;AAC3C,WAAO,YAAY,YAAY,aAAa,YAAY;AAAA,EAC5D;AACJ;AAWA,IAAI;AAKJ,SAAS,qBAAqB,SAAS;AACnC,uBAAqB;AACzB;AAIA,SAAS,uBAAuB;AAC5B,SAAO;AACX;AACA,eAAe,sBAAsB,SAAS;AAC1C,MAAI;AACA,UAAM,SAAS,OAAO;AAC1B,SAAO;AAAA,IACH,cAAc,UAAU;AACpB,aAAO,IAAI,YAAY,QAAQ;AAAA,IACnC;AAAA,IACA,aAAa,GAAG;AACZ,aAAO,IAAI,WAAW,CAAC;AAAA,IAC3B;AAAA,EACJ;AACJ;AAIA,eAAe,qBAAqB,SAAS;AACzC,SAAO,sBAAsB,OAAO;AACxC;",
  "names": ["onigBinding"]
}
