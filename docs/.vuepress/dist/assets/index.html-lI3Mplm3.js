import{_ as n,c as a,a as e,o as i}from"./app-gNybPUzB.js";const l={};function p(c,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose"><span>Docker-compose</span></a></h1><blockquote><p>Compose 是 Docker 公司推出的一个软件，可以管理多个Docker容器组成一个应用。需要定义一个YAML格式的配置文件</p><p>docker-compose.yaml,写好多个容器之间的调用关系。然后只要一个命令就能同时 <strong>启动/关闭</strong> 这些容器。</p><p>Docker-compose 允许用户通过一个单独的docker-compose.yml文件来定义一组相关联的应用容器为一个项目。</p><p>即 <strong>容器的编排管理</strong>。</p></blockquote><div class="language-docker-compose line-numbers-mode" data-ext="docker-compose" data-title="docker-compose"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>version: &#39;2.3&#39;</span></span>
<span class="line"><span>services:</span></span>
<span class="line"><span>  pigx999:</span></span>
<span class="line"><span>    image: docker_pigx_boot</span></span>
<span class="line"><span>    container_name: docker_pigx_boot_9999</span></span>
<span class="line"><span>    volumes:</span></span>
<span class="line"><span>      - /home/deploy/docker/9999:/home/deploy</span></span>
<span class="line"><span>      - /Users/lengleng/Downloads/files:/Users/lengleng/Downloads/files</span></span>
<span class="line"><span>    ports:</span></span>
<span class="line"><span>      - 9999:9999</span></span>
<span class="line"><span>  pigx998:</span></span>
<span class="line"><span>    image: docker_pigx_boot</span></span>
<span class="line"><span>    container_name: docker_pigx_boot_9998</span></span>
<span class="line"><span>    volumes:</span></span>
<span class="line"><span>      - /home/deploy/docker/9998:/home/deploy</span></span>
<span class="line"><span>      - /Users/lengleng/Downloads/files:/Users/lengleng/Downloads/files</span></span>
<span class="line"><span>    ports:</span></span>
<span class="line"><span>      - 9998:9999</span></span>
<span class="line"><span>  pigx997:</span></span>
<span class="line"><span>    image: docker_pigx_boot</span></span>
<span class="line"><span>    container_name: docker_pigx_boot_9997</span></span>
<span class="line"><span>    volumes:</span></span>
<span class="line"><span>      - /home/deploy/docker/9997:/home/deploy</span></span>
<span class="line"><span>      - /Users/lengleng/Downloads/files:/Users/lengleng/Downloads/files</span></span>
<span class="line"><span>    ports:</span></span>
<span class="line"><span>      - 9997:9999</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>##　1. Ｄocker-compose 安装</p><p>文件： <a href="./assets/docker-compose-Linux-x86_64">docker-compose-Linux-x86_64</a></p><div class="language-sh line-numbers-mode" data-ext="sh" data-title="sh"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mv</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker-compose-Linux-x86_64</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/local/bin/docker-compose</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">chmod</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> +x</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/local/bin/docker-compose</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 开发环境可以授予最高权限</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">chmod</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 777</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/local/bin/docker-compose</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-卸载" tabindex="-1"><a class="header-anchor" href="#_2-卸载"><span>2. 卸载</span></a></h2><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rm</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -rf</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/local/bin/docker-compose</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">reboot</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-yml配置文件及常用指令" tabindex="-1"><a class="header-anchor" href="#_3-yml配置文件及常用指令"><span>3. yml配置文件及常用指令</span></a></h2><p>Docker compose 默认使用 docker-compose.yml 。当然也可以使用 -f 参数指定具体文件。</p><h3 id="_3-1-yml文件级" tabindex="-1"><a class="header-anchor" href="#_3-1-yml文件级"><span>3.1 yml文件级</span></a></h3><p>Docker Compose 的 YAML 文件包含 4 个一级 key:version、services、networks、volumes</p><ul><li>version 是必须指定的，而且总是位于文件的第一行。它定义了 Compose 文件格式(主要是 API)的版本。注意，version 并非定义 Docker Compose 或 Docker 引擎的版本号。</li><li>services 用于定义不同的应用服务。Docker Compose 会将每个服务部署在各自的容器中。</li><li>networks 用于指引 Docker 创建新的网络。默认情况下，Docker Compose 会创建 bridge 网络。 这是一种单主机网络，只能够实现同一主机上容器的连接。当然，也可以使用 driver 属性来指定不 同的网络类型。</li><li>volumes 用于指引 Docker 来创建新的卷。</li></ul><h2 id="_2-compose常用命令" tabindex="-1"><a class="header-anchor" href="#_2-compose常用命令"><span>2. compose常用命令</span></a></h2><ul><li>docker-compose -h : 查看帮助</li><li><strong>docker-compose up : 启动所有docker-compose服务</strong></li><li><strong>docker-compose up -d : 启动所有docker-compose服务并后台运行</strong></li><li>docker-compose down : 停止并删除容器、网络、卷、镜像。</li><li>docker-compose exec yml里面的服务id bash : 进入容器实例内部，</li><li>docker-compose ps : 查看当前compose编排过的所有容器</li><li>docker-compose top : 展示当前docker-compose编排过的容器进程</li><li>docker-compose logs yml里面的服务id : 查看容器输出日志</li><li>docker-compose config : 检查yml配置</li><li>docker-compose config -q : 检查配置，有问题才输出</li><li><strong>docker-compose restart : 重启服务</strong></li><li><strong>docker-compose start : 启动服务</strong></li><li><strong>docker-compose stop : 停止服务</strong></li></ul><h2 id="_3-伪示例" tabindex="-1"><a class="header-anchor" href="#_3-伪示例"><span>3. 伪示例</span></a></h2><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>version 3</span></span>
<span class="line"><span>services:</span></span>
<span class="line"><span>	# build1</span></span>
<span class="line"><span>	mycentos: # 服务名称, 构建镜像时的镜像名就是该服务名</span></span>
<span class="line"><span>		build: . # 相对当前docker-compose.yml 文件所在目录，基于Dockerfile构建镜像</span></span>
<span class="line"><span>		container_name: mycentosContainer # 容器名称</span></span>
<span class="line"><span>		ports: # 宿主机与容器端口的映射关系</span></span>
<span class="line"><span>			- &quot;8080:8080&quot;</span></span>
<span class="line"><span>	# build2</span></span>
<span class="line"><span>	mycentos: # 服务名称</span></span>
<span class="line"><span>		build:</span></span>
<span class="line"><span>			context: . # 相对当前 docker-compose.yml 文件所在目录</span></span>
<span class="line"><span>			dockerfile: Dockerfile-alternate # 基于名称为 Dockerfile-alternate 的文件构建镜像</span></span>
<span class="line"><span>		container_name: mycentosContainer # 容器名称</span></span>
<span class="line"><span>		ports: # 宿主机与容器端口的映射关系</span></span>
<span class="line"><span>			- &quot;8080:8080&quot;</span></span>
<span class="line"><span>	microservice:</span></span>
<span class="line"><span>		image: order_docker:1.0</span></span>
<span class="line"><span>		container_name: ms01</span></span>
<span class="line"><span>		ports:</span></span>
<span class="line"><span>			- &quot;1000:100&quot;</span></span>
<span class="line"><span>			- &quot;6000:6000&quot;</span></span>
<span class="line"><span>		volumns:</span></span>
<span class="line"><span>			- /data1:/dta</span></span>
<span class="line"><span>			- /data2:/data2</span></span>
<span class="line"><span>		depends_on:</span></span>
<span class="line"><span>			- redis</span></span>
<span class="line"><span>			- mysql</span></span>
<span class="line"><span>		networks:</span></span>
<span class="line"><span>			- xx_net</span></span>
<span class="line"><span>	redis:</span></span>
<span class="line"><span>		image: redis:6.8.0</span></span>
<span class="line"><span>		ports::</span></span>
<span class="line"><span>			- &quot;6379:6379&quot;</span></span>
<span class="line"><span>		volumns:</span></span>
<span class="line"><span>			- /app/redis/redis.conf:/etc/redis/redis.conf</span></span>
<span class="line"><span>			- /app/redis/data:/data</span></span>
<span class="line"><span>		command: redis-server /etc/redis/redis.conf</span></span>
<span class="line"><span>		networks:</span></span>
<span class="line"><span>			- xx_net</span></span>
<span class="line"><span>	mysql:</span></span>
<span class="line"><span>		image: mysql:5.7</span></span>
<span class="line"><span>		environment:</span></span>
<span class="line"><span>			MYSQL_ROOT_PASSWORD: &#39;12345&#39;</span></span>
<span class="line"><span>			MYSQL_ALLOW_EMPTY_PASSWORD: &#39;no&#39;</span></span>
<span class="line"><span>			MYSQL_DATABASE: &#39;db1&#39;</span></span>
<span class="line"><span>			MYSQL_USER: &#39;ROOT&#39;</span></span>
<span class="line"><span>			MYSQL_PASSWROD: &#39;ROOT&#39;</span></span>
<span class="line"><span>		ports:</span></span>
<span class="line"><span>			- &quot;3306:3306&quot;</span></span>
<span class="line"><span>		volumes:</span></span>
<span class="line"><span>			- /app/mysql/db:/var/lib/mysql</span></span>
<span class="line"><span>            - /app/mysql/conf/my.cnf:/etc/my.cnf</span></span>
<span class="line"><span>            - /app/mysql/init:/docker-entrypoint-initdb.d</span></span>
<span class="line"><span>        networks:</span></span>
<span class="line"><span>        	- xx_net</span></span>
<span class="line"><span>        command: --default-authentication-plugin=mysql_native_password # 解决外部无法访问</span></span>
<span class="line"><span>			</span></span>
<span class="line"><span>networks:</span></span>
<span class="line"><span>	- xx_net:</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17)]))}const t=n(l,[["render",p],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/notes/Docker/Docker-compose/","title":"Docker-compose","lang":"zh-CN","frontmatter":{"description":"Docker-compose Compose 是 Docker 公司推出的一个软件，可以管理多个Docker容器组成一个应用。需要定义一个YAML格式的配置文件 docker-compose.yaml,写好多个容器之间的调用关系。然后只要一个命令就能同时 启动/关闭 这些容器。 Docker-compose 允许用户通过一个单独的docker-comp...","head":[["meta",{"property":"og:url","content":"https://kylinBachelor.github.io/notes/Docker/Docker-compose/"}],["meta",{"property":"og:site_name","content":"攻城狮"}],["meta",{"property":"og:title","content":"Docker-compose"}],["meta",{"property":"og:description","content":"Docker-compose Compose 是 Docker 公司推出的一个软件，可以管理多个Docker容器组成一个应用。需要定义一个YAML格式的配置文件 docker-compose.yaml,写好多个容器之间的调用关系。然后只要一个命令就能同时 启动/关闭 这些容器。 Docker-compose 允许用户通过一个单独的docker-comp..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T10:36:56.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-30T10:36:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker-compose\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-30T10:36:56.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":2.74,"words":821},"git":{"updatedTime":1732963016000},"autoDesc":true,"filePathRelative":"notes/Docker/Docker-compose/index.md","categoryList":[{"id":"4358b5","sort":10004,"name":"notes"},{"id":"7acc78","sort":10005,"name":"Docker"},{"id":"799164","sort":10006,"name":"Docker-compose"}],"bulletin":false}');export{t as comp,d as data};
