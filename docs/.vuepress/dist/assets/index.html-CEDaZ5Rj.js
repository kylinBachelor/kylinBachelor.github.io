import{_ as l,c as i,a as o,o as t}from"./app-C08HRChj.js";const r={};function a(c,e){return t(),i("div",null,e[0]||(e[0]=[o('<p>Docker是开源的容器技术，采用的是容器虚拟化技术，是容器运行的载体。</p><h2 id="官网" tabindex="-1"><a class="header-anchor" href="#官网"><span>官网</span></a></h2><ol><li>Docker官网: http://www.docker.cn</li><li>Docker Hub官网: https://hub.docker.com/</li></ol><h2 id="docker三要素" tabindex="-1"><a class="header-anchor" href="#docker三要素"><span>Docker三要素</span></a></h2><ol><li>镜像（image）: 相当于Java中的类</li><li>容器（container）: 相当于Java中的new出来的一个一个实例</li><li>仓库（repository）: 存放镜像的地方</li></ol><h2 id="docker帮助启动类命令" tabindex="-1"><a class="header-anchor" href="#docker帮助启动类命令"><span>Docker帮助启动类命令</span></a></h2><ul><li>systemctl start docker : 启动docker</li><li>systemctl stop docker : 停止docker</li><li>systemctl restart docker : 重启docker</li><li>systemctl status docker : 查看docker状态</li><li>systemctl enable docker : 开机启动</li><li>docker info : 查看docker概要信息</li><li>docker --help : 查看docker总体帮助文档</li><li>docker 具体命令 --help : 查看docker命令帮助文档</li></ul><h2 id="镜像命令" tabindex="-1"><a class="header-anchor" href="#镜像命令"><span>镜像命令</span></a></h2><ol><li>docker images : 查看docker上安装的镜像 <ul><li>-a:列出本地所有的镜像（含历史镜像）</li><li>-q:只显示镜像ID</li></ul></li><li>docker search [options] [xxx镜像的名字] : 查看docker镜像库中的镜像 <ul><li>--limit:只列出N个镜像，默认25个</li><li>docker search --limit 5 redis</li></ul></li><li>docker pull 镜像名字[:TAG] : 从官方镜像库中拉取镜像 tag标签为版本号，不写默认最新版</li><li>docker system df : 查看镜像/容器/数据卷所占的空间</li><li>docker rmi [-f] 镜像名字/镜像ID : 删除xxx镜像名字/镜像ID -f表示强制删除</li><li>docker rmi [-f] $(docker ps -qa)：删除所有</li></ol><h2 id="容器命令" tabindex="-1"><a class="header-anchor" href="#容器命令"><span>容器命令</span></a></h2><ul><li><p>docker ps [options]: 查看容器</p><ol><li>-a:列出当前所有正在运行的容器+历史上运行过的</li><li>-l:显示最近创建的容器</li><li>-n:显示最近n个创建的容器</li><li>-q:静默模式，只显示容器编号</li></ol></li><li><p>docker run [OPTIONS] image [COMMAND] [ARG...]</p><ol><li>options说明 <ul><li>--name=容器新名字 : 为容器指定一个名称</li><li>-d:后台运行容器并返回容器ID,即为启动守护式容器</li><li>-i:以交互模式运行容器，通常与-t同时使用</li><li>-t:为容器重新分配一个伪输入终端，通常与-i同时使用，也即启动交互式容器</li><li>-P:随机端口映射，大写P</li><li>-p:指定端口映射，小写p</li></ul></li></ol></li><li><p>退出容器：</p><ol><li>run进去容器，exit退出，容器停止</li><li>run进去容器，ctrl+p+q退出，容器不停止</li></ol></li><li><p>启动已停止运行的容器</p><ol><li>docker start 容器ID/容器名称 ： 启动已停止运行的容器</li></ol></li><li><p>重启容器</p><ol><li>docker restart 容器ID或容器名</li></ol></li><li><p>停止容器</p><ol><li>docker stop 容器ID/容器名称 ： 停止容器</li><li>docker kill 容器ID/容器名称 ： 强制停止容器</li></ol></li><li><p>删除已停止的容器</p><ol><li>docker rm 容器ID : 删除已停止的容器</li></ol></li><li><p>查看容器内部</p><ol><li>docker top 容器ID/name : 查看容器内运行的进程</li><li>docker inspect 容器ID/name : 查看容器内部细节</li><li>docker logs -f 容器ID : 查看容器日志</li></ol></li><li><p>重新进入已启动的容器内部交互</p><ol><li>docker exec -it 容器ID /bin/bash ： 在容器中打开新的终端，并且可以启动新的进程，用exit退出不会导致容器的停止</li><li>docker attach 容器ID : 直接进入容器启动命令的终端，不会启动新的进程，用exit退出，会导致容器的停止</li></ol></li><li><p>从容器内拷贝文件到宿主机上</p><ol><li>docker cp 容器ID:容器内路径 目的主机路径</li></ol></li><li><p>导入导出容器</p><ol><li>导出： docker export 容器ID &gt; /XX/XX/XX/文件名.tar</li><li>导入： cat 文件名.tar | docker import - 镜像用户/镜像名：镜像版本号</li></ol></li></ul><h2 id="docker启动示例" tabindex="-1"><a class="header-anchor" href="#docker启动示例"><span>Docker启动示例</span></a></h2><p>docker run --name nginx-test -p 8080:80 -d nginx</p><ul><li>--name nginx-test：容器名称。</li><li>-p 8080:80： 端口进行映射，将本地 8080 端口映射到容器内部的 80 端口。</li><li>-d nginx： 设置容器在在后台一直运行。</li></ul><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h2><ol><li>获取最新版本的node镜像：docker pull node:latest</li><li>查看本地镜像，是否已安装了node: docker images</li><li>运行容器：docker run -itd --name node-test node</li><li>进入容器：docker exec -it node-test /bin/bash</li><li>进入容器之后查看node版本：node -v</li></ol>',16)]))}const d=l(r,[["render",a],["__file","index.html.vue"]]),s=JSON.parse('{"path":"/notes/Docker/Docker%E5%91%BD%E4%BB%A4/","title":"Docker初识","lang":"zh-CN","frontmatter":{"title":"Docker初识","aliases":null,"tags":["Docker"],"description":"描述","createTime":"2024/11/30 14:15:41","draft":false,"head":[["meta",{"property":"og:url","content":"https://kylinBachelor.github.io/notes/Docker/Docker%E5%91%BD%E4%BB%A4/"}],["meta",{"property":"og:site_name","content":"攻城狮"}],["meta",{"property":"og:title","content":"Docker初识"}],["meta",{"property":"og:description","content":"描述"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T10:36:56.000Z"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:modified_time","content":"2024-11-30T10:36:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker初识\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-30T10:36:56.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":3.39,"words":1017},"git":{"updatedTime":1732963016000},"filePathRelative":"notes/Docker/Docker命令/index.md","categoryList":[{"id":"4358b5","sort":10001,"name":"notes"},{"id":"7acc78","sort":10002,"name":"Docker"},{"id":"2dfa64","sort":10077,"name":"Docker命令"}],"bulletin":false}');export{d as comp,s as data};
