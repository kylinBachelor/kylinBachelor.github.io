import{_ as s,c as a,a as e,o as t}from"./app-Bra2waNn.js";const n="/assets/image-20231206164511238-DRe3AkZ8.png",h="/assets/image-20231206164838398-CBqkdiS8.png",l="/assets/image-20231206165113573-0US02B7I.png",p="/assets/image-20231206164951831-BUIyGW4m.png",k="/assets/image-20231206170401658-DZgUsp1S.png",r="/assets/image-20231206170424609-CgtjtT78.png",d="/assets/image-20231206170906222-CyOamiLO.png",g={};function o(c,i){return t(),a("div",null,i[0]||(i[0]=[e('<p>仲裁队列通过 Raft 协议，实现了不同节点间队列消息数据的复制，使得在 创建这个队列的节点 宕机时，其他节点仍然可以使用该队列进行服务.</p><blockquote><p><span style="color:blue;font-weight:bolder;">说明</span>：鉴于仲裁队列的功能，肯定是需要在前面集群的基础上操作！</p></blockquote><h2 id="_1、创建交换机" tabindex="-1"><a class="header-anchor" href="#_1、创建交换机"><span>1、创建交换机</span></a></h2><p>和仲裁队列绑定的交换机没有特殊，我们还是创建一个direct交换机即可</p><p>交换机名称：exchange.quorum.test</p><figure><img src="'+n+'" alt="image-20231206164511238" tabindex="0" loading="lazy"><figcaption>image-20231206164511238</figcaption></figure><h2 id="_2、创建仲裁队列" tabindex="-1"><a class="header-anchor" href="#_2、创建仲裁队列"><span>2、创建仲裁队列</span></a></h2><p>队列名称：queue.quorum.test</p><figure><img src="'+h+'" alt="image-20231206164838398" tabindex="0" loading="lazy"><figcaption>image-20231206164838398</figcaption></figure><figure><img src="'+l+'" alt="image-20231206165113573" tabindex="0" loading="lazy"><figcaption>image-20231206165113573</figcaption></figure><h2 id="_3、绑定交换机" tabindex="-1"><a class="header-anchor" href="#_3、绑定交换机"><span>3、绑定交换机</span></a></h2><p>路由键：routing.key.quorum.test</p><figure><img src="'+p+`" alt="image-20231206164951831" tabindex="0" loading="lazy"><figcaption>image-20231206164951831</figcaption></figure><h1 id="二、测试仲裁队列" tabindex="-1"><a class="header-anchor" href="#二、测试仲裁队列"><span>二、测试仲裁队列</span></a></h1><h2 id="_1、常规测试" tabindex="-1"><a class="header-anchor" href="#_1、常规测试"><span>1、常规测试</span></a></h2><p>像使用经典队列一样发送消息、消费消息</p><h3 id="_1生产者端" tabindex="-1"><a class="header-anchor" href="#_1生产者端"><span>①生产者端</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> EXCHANGE_QUORUM_TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">exchange.quorum.test</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ROUTING_KEY_QUORUM_TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">routing.key.quorum.test</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Test</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> testSendMessageToQuorum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    rabbitTemplate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">convertAndSend</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">EXCHANGE_QUORUM_TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ROUTING_KEY_QUORUM_TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">message test quorum ~~~</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="image-20231206170401658" tabindex="0" loading="lazy"><figcaption>image-20231206170401658</figcaption></figure><h3 id="_2消费者端" tabindex="-1"><a class="header-anchor" href="#_2消费者端"><span>②消费者端</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> final</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> QUEUE_QUORUM_TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">queue.quorum.test</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">RabbitListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">queues</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">QUEUE_QUORUM_TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">})</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> quorumMessageProcess</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Message message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Channel channel</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> throws IOException </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">消费端：</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> data</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    channel</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">basicAck</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getMessageProperties</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getDeliveryTag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="image-20231206170424609" tabindex="0" loading="lazy"><figcaption>image-20231206170424609</figcaption></figure><h2 id="_2、高可用测试" tabindex="-1"><a class="header-anchor" href="#_2、高可用测试"><span>2、高可用测试</span></a></h2><h3 id="_1停止某个节点的rabbit应用" tabindex="-1"><a class="header-anchor" href="#_1停止某个节点的rabbit应用"><span>①停止某个节点的rabbit应用</span></a></h3><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 停止rabbit应用</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rabbitmqctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stop_app</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2查看仲裁队列对应的节点情况" tabindex="-1"><a class="header-anchor" href="#_2查看仲裁队列对应的节点情况"><span>②查看仲裁队列对应的节点情况</span></a></h3><figure><img src="`+d+'" alt="image-20231206170906222" tabindex="0" loading="lazy"><figcaption>image-20231206170906222</figcaption></figure><h3 id="_3再次发送消息" tabindex="-1"><a class="header-anchor" href="#_3再次发送消息"><span>③再次发送消息</span></a></h3><p>收发消息仍然正常</p>',29)]))}const m=s(g,[["render",o],["__file","仲裁队列.html.vue"]]),u=JSON.parse('{"path":"/notes/MQ/RabbitMQ/%E4%BB%B2%E8%A3%81%E9%98%9F%E5%88%97.html","title":"仲裁队列","lang":"zh-CN","frontmatter":{"title":"仲裁队列","createTime":"2024/12/01 14:15:28","description":"仲裁队列通过 Raft 协议，实现了不同节点间队列消息数据的复制，使得在 创建这个队列的节点 宕机时，其他节点仍然可以使用该队列进行服务. 说明：鉴于仲裁队列的功能，肯定是需要在前面集群的基础上操作！ 1、创建交换机 和仲裁队列绑定的交换机没有特殊，我们还是创建一个direct交换机即可 交换机名称：exchange.quorum.test image...","head":[["meta",{"property":"og:url","content":"https://kylinBachelor.github.io/notes/MQ/RabbitMQ/%E4%BB%B2%E8%A3%81%E9%98%9F%E5%88%97.html"}],["meta",{"property":"og:site_name","content":"攻城狮"}],["meta",{"property":"og:title","content":"仲裁队列"}],["meta",{"property":"og:description","content":"仲裁队列通过 Raft 协议，实现了不同节点间队列消息数据的复制，使得在 创建这个队列的节点 宕机时，其他节点仍然可以使用该队列进行服务. 说明：鉴于仲裁队列的功能，肯定是需要在前面集群的基础上操作！ 1、创建交换机 和仲裁队列绑定的交换机没有特殊，我们还是创建一个direct交换机即可 交换机名称：exchange.quorum.test image..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-01T06:25:24.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-01T06:25:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"仲裁队列\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-01T06:25:24.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":1.14,"words":343},"git":{"updatedTime":1733034324000},"autoDesc":true,"filePathRelative":"notes/MQ/RabbitMQ/仲裁队列.md","categoryList":[{"id":"4358b5","sort":10001,"name":"notes"},{"id":"e98b0b","sort":10039,"name":"MQ"},{"id":"49c4b2","sort":10045,"name":"RabbitMQ"}],"bulletin":false}');export{m as comp,u as data};
