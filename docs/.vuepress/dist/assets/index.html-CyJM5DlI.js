import{_ as i,c as a,a as n,o as e}from"./app-Bra2waNn.js";const l="/assets/image-20240716094139983-CvSM4AEL.png",t={};function p(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="使用docker部署方式" tabindex="-1"><a class="header-anchor" href="#使用docker部署方式"><span>使用Docker部署方式</span></a></h1><h2 id="_1-不使用harbor仓库部署" tabindex="-1"><a class="header-anchor" href="#_1-不使用harbor仓库部署"><span>1. 不使用Harbor仓库部署</span></a></h2><blockquote><p>本地可以连接远程Docker，以Dcoker进行构建镜像（该Docker需为部署自己服务程序的服务器上的Docker,因为构建镜像时是直接构建到远程Docker上的）。</p></blockquote><h3 id="_1-1-前提准备" tabindex="-1"><a class="header-anchor" href="#_1-1-前提准备"><span>1.1 前提准备</span></a></h3><h4 id="_1-1-1-maven-docker打包插件-fabric8及远程docker配置" tabindex="-1"><a class="header-anchor" href="#_1-1-1-maven-docker打包插件-fabric8及远程docker配置"><span>1.1.1 maven docker打包插件：fabric8及远程Docker配置</span></a></h4><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&lt;!--maven  docker 打包插件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">plugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">io.fabric8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">docker-maven-plugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\${docker.plugin.version}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">configuration</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dockerHost</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\${docker.host}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dockerHost</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">registry</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\${docker.registry}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">registry</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">authConfig</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">push</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">username</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\${docker.username}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">username</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">password</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\${docker.password}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">password</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">push</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">authConfig</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">images</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">image</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\${docker.registry}/\${docker.namespace}/\${project.name}:\${project.version}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                    &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dockerFile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">\${project.basedir}/Dockerfile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dockerFile</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">                &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">            &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">image</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">images</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">configuration</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">plugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-1-2-构建镜像的dockerfile文件" tabindex="-1"><a class="header-anchor" href="#_1-1-2-构建镜像的dockerfile文件"><span>1.1.2 构建镜像的Dockerfile文件</span></a></h4><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>FROM ubuntu</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MAINTAINER congpeitong@shundesoft.com</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 设置工作目录</span></span>
<span class="line"><span>WORKDIR /pigx-boot</span></span>
<span class="line"><span># 设置JAR位置</span></span>
<span class="line"><span>ARG JAR_FILE=target/pigx-boot.jar</span></span>
<span class="line"><span># 将本地的Java源代码赋值到容器内</span></span>
<span class="line"><span>COPY \${JAR_FILE} app.jar</span></span>
<span class="line"><span># 暴露端口给物理机映射</span></span>
<span class="line"><span>EXPOSE 9999</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ENV TZ=Asia/Shanghai JAVA_OPTS=&quot;-Xms512m -Xmx1024m -Djava.security.egd=file:/dev/./urandom&quot;</span></span>
<span class="line"><span># 运行编译后的Java程序</span></span>
<span class="line"><span>CMD sleep 60; java $JAVA_OPTS -jar app.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-1-3-生成好的程序jar包" tabindex="-1"><a class="header-anchor" href="#_1-1-3-生成好的程序jar包"><span>1.1.3 生成好的程序jar包</span></a></h4><h3 id="_1-2-部署" tabindex="-1"><a class="header-anchor" href="#_1-2-部署"><span>1.2 部署</span></a></h3><h4 id="_1-2-1-maven命令部署" tabindex="-1"><a class="header-anchor" href="#_1-2-1-maven命令部署"><span>1.2.1 maven命令部署</span></a></h4><div class="language-sh line-numbers-mode" data-ext="sh" data-title="sh"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mvn</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clean</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> package</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker:stop</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker:remove</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker:build</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docker:run</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>docker:stop 停止并删除docker容器</li><li>docker:remove 删除镜像</li><li>docker:build 构建镜像</li><li>docker:run 创建并启动docker容器</li></ul><h4 id="_1-2-2-idea部署" tabindex="-1"><a class="header-anchor" href="#_1-2-2-idea部署"><span>1.2.2 idea部署</span></a></h4><figure><img src="`+l+'" alt="image-20240716094139983" tabindex="0" loading="lazy"><figcaption>image-20240716094139983</figcaption></figure><h2 id="_2-使用harbor仓库部署" tabindex="-1"><a class="header-anchor" href="#_2-使用harbor仓库部署"><span>2. 使用Harbor仓库部署</span></a></h2><h3 id="_2-1-前提准备" tabindex="-1"><a class="header-anchor" href="#_2-1-前提准备"><span>2.1 前提准备</span></a></h3><p>和不使用Harbor的前提准备一致，配置好Harbor信息就行了</p><h3 id="_2-2-部署" tabindex="-1"><a class="header-anchor" href="#_2-2-部署"><span>2.2 部署</span></a></h3><p>本地使用build生成镜像-》通过push将生成的镜像上传到Harbor仓库-》部署服务器通过docker pull命令从Harbor仓库拉取然后run启动就行了。</p>',20)]))}const r=i(t,[["render",p],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/notes/Docker/%E4%B8%80%E8%88%AC%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/","title":"使用Docker部署方式","lang":"zh-CN","frontmatter":{"description":"使用Docker部署方式 1. 不使用Harbor仓库部署 本地可以连接远程Docker，以Dcoker进行构建镜像（该Docker需为部署自己服务程序的服务器上的Docker,因为构建镜像时是直接构建到远程Docker上的）。 1.1 前提准备 1.1.1 maven docker打包插件：fabric8及远程Docker配置 1.1.2 构建镜像的...","head":[["meta",{"property":"og:url","content":"https://kylinBachelor.github.io/notes/Docker/%E4%B8%80%E8%88%AC%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/"}],["meta",{"property":"og:site_name","content":"攻城狮"}],["meta",{"property":"og:title","content":"使用Docker部署方式"}],["meta",{"property":"og:description","content":"使用Docker部署方式 1. 不使用Harbor仓库部署 本地可以连接远程Docker，以Dcoker进行构建镜像（该Docker需为部署自己服务程序的服务器上的Docker,因为构建镜像时是直接构建到远程Docker上的）。 1.1 前提准备 1.1.1 maven docker打包插件：fabric8及远程Docker配置 1.1.2 构建镜像的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T10:36:56.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-30T10:36:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Docker部署方式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-30T10:36:56.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":1.29,"words":387},"git":{"updatedTime":1732963016000},"autoDesc":true,"filePathRelative":"notes/Docker/一般部署方式/index.md","categoryList":[{"id":"4358b5","sort":10001,"name":"notes"},{"id":"7acc78","sort":10015,"name":"Docker"},{"id":"76cc60","sort":10021,"name":"一般部署方式"}],"bulletin":false}');export{r as comp,d as data};
