import{_ as a,c as e,a as n,o as i}from"./app-Bra2waNn.js";const l="/assets/image-20240709130302870-BXQJQcTt.png",t="/assets/image-20240710101007424-bZzJWsd5.png",p={};function d(r,s){return i(),e("div",null,s[0]||(s[0]=[n('<h1 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile"><span>Dockerfile</span></a></h1><p>官网（需要翻墙）：https://docs.docker.com/reference/dockerfile/</p><p>中文网： http://www.dockerinfo.net/dockerfile%e4%bb%8b%e7%bb%8d</p><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><blockquote><p>=== Dockerfile 是用来构建 Docker 镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本</p></blockquote><figure><img src="'+l+`" alt="image-20240709130302870" tabindex="0" loading="lazy"><figcaption>image-20240709130302870</figcaption></figure><p>示例</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>FROM centos:7</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 配置Java17环境变量</span></span>
<span class="line"><span>ADD jdk-17_linux-x64_bin.tar /usr/lib/</span></span>
<span class="line"><span>ENV JAVA_HOME /usr/lib/jdk-17.0.11</span></span>
<span class="line"><span>ENV CLASSPATH .:\${JAVA_HOME}/jre/lib/rt.jar:\${JAVA_HOME}/lib/dt.jar:\${JAVA_HOME}/lib/tools.jar</span></span>
<span class="line"><span>ENV PATH $PATH:\${JAVA_HOME}/bin</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CMD /bin/bash</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>FROM centos</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>MAINTAINER Linkaiqiang</span></span>
<span class="line"><span></span></span>
<span class="line"><span>COPY readme.txt /usr/local/readme.txt</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ADD jdk1.8.0_291.tar.gz /usr/local/</span></span>
<span class="line"><span>ADD tomcat.tar.gz /usr/local/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>RUN cd /etc/yum.repos.d/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>RUN sed -i &#39;s/mirrorlist/#mirrorlist/g&#39; /etc/yum.repos.d/CentOS-*</span></span>
<span class="line"><span>RUN sed -i &#39;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#39; /etc/yum.repos.d/CentOS-*</span></span>
<span class="line"><span></span></span>
<span class="line"><span>RUN yum -y install vim wget</span></span>
<span class="line"><span></span></span>
<span class="line"><span>VOLUME [&quot;/data1&quot;,&quot;/data2&quot;]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>ENV MYPATH /usr/local</span></span>
<span class="line"><span>WORKDIR $MYPATH</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ENV JAVA_HOME /usr/local/jdk1.8.0_291</span></span>
<span class="line"><span>ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span></span>
<span class="line"><span>ENV CATALINA_HOME /usr/local/tomcat</span></span>
<span class="line"><span>ENV CATALINA_BASE /usr/local/tomcat</span></span>
<span class="line"><span>ENV PATH $PATH:$JAVA_HOME/bin:$CLASSPATH:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span></span>
<span class="line"><span></span></span>
<span class="line"><span>EXPOSE 8080</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CMD /usr/local/tomcat/bin/startup.sh &amp;&amp; tail -f /usr/local/tomcat/logs/catalina.out</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-构建格式" tabindex="-1"><a class="header-anchor" href="#_1-2-构建格式"><span>1.2 构建格式</span></a></h3><ol><li><p>格式</p><p>docker build [选项] PATH | URL | -</p></li><li><p>选项</p><p>-t: 打标签</p><p>-c: -cpu-shares int: cpu份额（相对权重）</p><p>-m: -memory bytes: 内存限制</p><p>--build-arg: 设置构建时的变量，就是构建时候修改ARG指令的参数</p></li></ol><h2 id="_2-常用的指令" tabindex="-1"><a class="header-anchor" href="#_2-常用的指令"><span>2. 常用的指令</span></a></h2><blockquote><p>=== 必须大写</p></blockquote><h3 id="_2-1-from" tabindex="-1"><a class="header-anchor" href="#_2-1-from"><span>2.1 FROM</span></a></h3><p>Dockerfile文件的第一个非注释的指令。</p><p>基础镜像，当前新镜像是基于哪个镜像来生成新镜像的，指定一个已经存在的镜像作为模板。</p><p>默认情况下，当执行 <strong>docker build</strong> 命令时会在docker主机上查找镜像，如果镜像不存在，则会自动从Docker仓库pull下来，当然了，再找不到镜像就会报错了。</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>FROM 镜像名:镜像标签</span></span>
<span class="line"><span># 默认镜像标签为 latest, 即最新的镜像</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-maintainer" tabindex="-1"><a class="header-anchor" href="#_2-2-maintainer"><span>2.2 MAINTAINER</span></a></h3><p>用于提供镜像维护者的姓名和邮箱地址</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>MAINTAINER &#39;zhangsan&lt;zhangsan@163.com&gt;&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-3-run" tabindex="-1"><a class="header-anchor" href="#_2-3-run"><span>2.3 RUN</span></a></h3><p>容器构建时需要运行的命令（build）</p><h4 id="_2-3-1-两种格式" tabindex="-1"><a class="header-anchor" href="#_2-3-1-两种格式"><span>2.3.1 两种格式</span></a></h4><h5 id="_2-3-1-1-shell格式" tabindex="-1"><a class="header-anchor" href="#_2-3-1-1-shell格式"><span>2.3.1.1 shell格式</span></a></h5><div class="language-sh line-numbers-mode" data-ext="sh" data-title="sh"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RUN</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> yum</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -y</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> vim</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="_2-3-1-2-exec格式" tabindex="-1"><a class="header-anchor" href="#_2-3-1-2-exec格式"><span>2.3.1.2 exec格式</span></a></h5><div class="language-sh line-numbers-mode" data-ext="sh" data-title="sh"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">可执行文件</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">参数1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">参数2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>=== RUN 命令时build构建镜像时执行的。</p></blockquote><h3 id="_2-4-expose" tabindex="-1"><a class="header-anchor" href="#_2-4-expose"><span>2.4 EXPOSE</span></a></h3><p>当前容器对外暴露出的端口</p><h3 id="_2-5-workdir" tabindex="-1"><a class="header-anchor" href="#_2-5-workdir"><span>2.5 WORKDIR</span></a></h3><p>指定在容器创建以后，终端默认登录进来的目录，一个落脚点</p><h3 id="_2-6-user" tabindex="-1"><a class="header-anchor" href="#_2-6-user"><span>2.6 USER</span></a></h3><p>指定该镜像以什么样的的用户去执行它，如果没有指定默认为root</p><h3 id="_2-7-env" tabindex="-1"><a class="header-anchor" href="#_2-7-env"><span>2.7 ENV</span></a></h3><p>用于在构建镜像过程中设置环境变量</p><div class="language-sh line-numbers-mode" data-ext="sh" data-title="sh"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ENV</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> MY_PATH</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/mytest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">这个环境变量可以在后续的任何</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> RUN</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 指令中使用，这就如同在命令前面环境变量前缀一样；</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">它可以在其它指令中直接使用这些环境变量；</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">比如：</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> WORKDIR</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $MY_PATH</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-8-copy" tabindex="-1"><a class="header-anchor" href="#_2-8-copy"><span>2.8 COPY</span></a></h3><p>用于从docker主机赋值文件或目录至创建的新镜像指定的路径中</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>COPY [源] [目标]</span></span>
<span class="line"><span>COPY [&quot;源&quot;, &quot;目标&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>文件复制准则</p><ul><li>必须是build上下文中的路径，即当前工作目录中的路径，不能是其父目录中的文件；</li><li>如果是目录，则其内部文件或子目录会被递归复制，但目录自身不会被复制；</li><li>如果指定了多个，或在中使用了通配符，则必须是一个目录，且必须以/结尾；</li><li>如果事先不存在，他将会被自动创建，这包括父目录路径</li></ul><p>示例</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span># copy 文件</span></span>
<span class="line"><span>COPY index.html /data/web/html/      //要确保Dockerfile同级路径下有index.html文件</span></span>
<span class="line"><span></span></span>
<span class="line"><span># copy 目录  如果是复制目录，则其内部文件或子目录会被递归复制，但目录自身不会被复制；需要把复制目录名字也写在容器中要复制的路径下！</span></span>
<span class="line"><span>COPY yum.repos.d /etc/yum.repos.d/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-9-add" tabindex="-1"><a class="header-anchor" href="#_2-9-add"><span>2.9 ADD</span></a></h3><p>同 copy 只是提供了URL 和 解压压缩包的功能</p><p>将宿主机目录下的文件拷贝至镜像且会自动处理URL和解压tar压缩包</p><h3 id="_2-10-volume" tabindex="-1"><a class="header-anchor" href="#_2-10-volume"><span>2.10 VOLUME</span></a></h3><div class="hint-container note"><p class="hint-container-title">注</p><p>容器数据卷，用于数据保存和持久化工作</p></div><p>使用方式：</p><p>​ VOLUME /home/data /home2/data</p><p>​ VOLUMN [&quot;/home/data&quot;,&quot;/home2/data&quot;]</p><p>如果使用 docker run xx 命令启动容器时若没有使用 -v 挂载 VOLUME指定的目录，则会在创建容器时自动在Docker安装目录生成从一个匿名目录用以存储VOLUME声明的文件夹内的内容。一般是在 <strong>/var/lib/docker/volumes/</strong> 下</p><figure><img src="`+t+`" alt="image-20240710101007424" tabindex="0" loading="lazy"><figcaption>image-20240710101007424</figcaption></figure><p>一个目录会生成一个文件夹，例如 VOLUME /home/data /home2/data 则会生成两个文件夹。</p><p>如果使用 -v 声明了，则会被 -v 声明的覆盖。</p><h3 id="_2-11-cmd" tabindex="-1"><a class="header-anchor" href="#_2-11-cmd"><span>2.11 CMD</span></a></h3><p>类似于RUN命令，只不过运行时机不同，指定容器启动后要做的事情</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换。</p></div><h3 id="_2-12-entrypoint" tabindex="-1"><a class="header-anchor" href="#_2-12-entrypoint"><span>2.12 ENTRYPOINT</span></a></h3><p>ENTRYPOINT可以和CMD一起使用，一般是变参时才会使用CMD,这里的CMD等于是在给ENTRYPOINT传参。</p><p>当指定了ENTRYPOINT之后，CMD的含义就发生了变化，不再是直接运行其命令而是将CMD的内容作为参数传递给ENTRYPOINT指令，两个组合之后就会变成 <code>&lt;ENTIRYPOINT&gt;&lt;CMD&gt;</code></p><p><code>ENTRYPOINT &lt;command&gt;</code></p><p><code>ENTRYPOINT [&quot;&lt;executable&gt;&quot;, &quot;&lt;param1&gt;&quot;, &quot;&lt;param2&gt;&quot;]</code></p><p>案例：假设有一个nginx:test镜像</p><p>Dockerfile:</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>FROM nginx</span></span>
<span class="line"><span>ENTRYPOINT [&#39;nginx&#39;,&#39;-c&#39;] #定参</span></span>
<span class="line"><span>CMD [&quot;/etc/nginx/nginx.conf&quot;] #变参</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>是否传参</th><th>按照Dockerfile执行编写</th><th>传参运行</th></tr></thead><tbody><tr><td>Docker命令</td><td>docker run nginx:test</td><td>docker run nginx:test -c /etc/nginx/new.conf</td></tr><tr><td>衍生出的实际命令</td><td>nginx -c /etc/nginx/nginx.conf</td><td>nginx -c /etc/nginx/new.conf</td></tr></tbody></table><div class="hint-container note"><p class="hint-container-title">注</p><ul><li>docker run命令传入的命令参数会覆盖CMD指令的内容并且附加到ENTRYPOINT命令最后做为其参数使用</li><li>Dockerfile文件中也可以存在多个ENTRYPOINT指令，但仅有最后一个会生效</li></ul></div><ul><li>类似CMD指令的功能，用于为容器指定默认运行程序，从而使容器像是一个单独的可执行程序</li><li>与CMD不同的是，由ENTRYPOINT启动的程序不会被docker run命令行指定的参数所覆盖，而且，这些命令行参数会被当作参数传递给ENTRYPOINT指定指定的程序</li></ul>`,70)]))}const o=a(p,[["render",d],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/notes/Docker/Dockerfile/","title":"Dockerfile","lang":"zh-CN","frontmatter":{"description":"Dockerfile 官网（需要翻墙）：https://docs.docker.com/reference/dockerfile/ 中文网： http://www.dockerinfo.net/dockerfile%e4%bb%8b%e7%bb%8d 1. 概述 === Dockerfile 是用来构建 Docker 镜像的文本文件，是由一条条构建镜像...","head":[["meta",{"property":"og:url","content":"https://kylinBachelor.github.io/notes/Docker/Dockerfile/"}],["meta",{"property":"og:site_name","content":"攻城狮"}],["meta",{"property":"og:title","content":"Dockerfile"}],["meta",{"property":"og:description","content":"Dockerfile 官网（需要翻墙）：https://docs.docker.com/reference/dockerfile/ 中文网： http://www.dockerinfo.net/dockerfile%e4%bb%8b%e7%bb%8d 1. 概述 === Dockerfile 是用来构建 Docker 镜像的文本文件，是由一条条构建镜像..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-30T10:36:56.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-30T10:36:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dockerfile\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-30T10:36:56.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":4.79,"words":1437},"git":{"updatedTime":1732963016000},"autoDesc":true,"filePathRelative":"notes/Docker/Dockerfile/index.md","categoryList":[{"id":"4358b5","sort":10001,"name":"notes"},{"id":"7acc78","sort":10015,"name":"Docker"},{"id":"feb8ab","sort":10023,"name":"Dockerfile"}],"bulletin":false}');export{o as comp,h as data};
